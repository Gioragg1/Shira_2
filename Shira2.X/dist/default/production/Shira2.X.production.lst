

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Mar 27 10:32:01 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18LF23K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           	psect	eeprom_data
    54  F00000  00 DC 00 EE FF FF FF FF 	db	0,220,0,238,255,255,255,255	;# 
    55  F00008  01 A4 00 03 00 96 FF FF 	db	1,164,0,3,0,150,255,255	;# 
    56  F00010  22 38 00 00 00 A8 00 0A 	db	34,56,0,0,0,168,0,10	;# 
    57  F00018  00 78 00 72 00 AD 00 CB 	db	0,120,0,114,0,173,0,203	;# 
    58  F00020  FF FF 00 03 00 78 15 18 	db	255,255,0,3,0,120,21,24	;# 
    59  F00028  FF FF FF FF FF FF FF FF 	db	255,255,255,255,255,255,255,255	;# 
    60  F00030  FF FF FF FF FF FF FF FF 	db	255,255,255,255,255,255,255,255	;# 
    61  F00038  FF FF FF FF FF FF FF FF 	db	255,255,255,255,255,255,255,255	;# 
    62  F00040  FF FF FF FF FF FF FF FF 	db	255,255,255,255,255,255,255,255	;# 
    63  F00048  00 DC 00 EE FF FF FF FF 	db	0,220,0,238,255,255,255,255	;# 
    64  F00050  01 A4 00 03 00 96 FF FF 	db	1,164,0,3,0,150,255,255	;# 
    65  F00058  22 38 00 00 00 A8 00 0A 	db	34,56,0,0,0,168,0,10	;# 
    66  F00060  00 78 00 72 00 AD 00 CB 	db	0,120,0,114,0,173,0,203	;# 
    67  F00068  FF FF 00 03 00 78 15 18 	db	255,255,0,3,0,120,21,24	;# 
    68  F00070  FF FF FF FF FF FF FF FF 	db	255,255,255,255,255,255,255,255	;# 
    69  F00078  FF FF FF FF FF FF FF FF 	db	255,255,255,255,255,255,255,255	;# 
    70  F00080  FF FF FF FF FF FF FF FF 	db	255,255,255,255,255,255,255,255	;# 
    71  F00088  FF FF FF FF FF FF FF FF 	db	255,255,255,255,255,255,255,255	;# 
    72  0000                     
    73                           	psect	mediumconst
    74  001BC0                     __pmediumconst:
    75                           	opt stack 0
    76  001BC0  00                 	db	0
    77  001BC1                     _octpowers:
    78                           	opt stack 0
    79  001BC1  0001               	dw	1
    80  001BC3  0008               	dw	8
    81  001BC5  0040               	dw	64
    82  001BC7  0200               	dw	512
    83  001BC9  1000               	dw	4096
    84  001BCB  8000               	dw	32768
    85  001BCD                     __end_of_octpowers:
    86                           	opt stack 0
    87  001BCD                     _dpowers:
    88                           	opt stack 0
    89  001BCD  0001               	dw	1
    90  001BCF  000A               	dw	10
    91  001BD1  0064               	dw	100
    92  001BD3  03E8               	dw	1000
    93  001BD5  2710               	dw	10000
    94  001BD7                     __end_of_dpowers:
    95                           	opt stack 0
    96  001BD7                     _hexpowers:
    97                           	opt stack 0
    98  001BD7  0001               	dw	1
    99  001BD9  0010               	dw	16
   100  001BDB  0100               	dw	256
   101  001BDD  1000               	dw	4096
   102  001BDF                     __end_of_hexpowers:
   103                           	opt stack 0
   104  001BDF                     STR_15:
   105  001BDF  0A                 	db	10
   106  001BE0  0D                 	db	13
   107  001BE1  20                 	db	32
   108  001BE2  47                 	db	71	;'G'
   109  001BE3  52                 	db	82	;'R'
   110  001BE4  49                 	db	73	;'I'
   111  001BE5  44                 	db	68	;'D'
   112  001BE6  5F                 	db	95	;'_'
   113  001BE7  56                 	db	86	;'V'
   114  001BE8  6F                 	db	111	;'o'
   115  001BE9  6C                 	db	108	;'l'
   116  001BEA  74                 	db	116	;'t'
   117  001BEB  61                 	db	97	;'a'
   118  001BEC  67                 	db	103	;'g'
   119  001BED  65                 	db	101	;'e'
   120  001BEE  5F                 	db	95	;'_'
   121  001BEF  41                 	db	65	;'A'
   122  001BF0  44                 	db	68	;'D'
   123  001BF1  43                 	db	67	;'C'
   124  001BF2  5F                 	db	95	;'_'
   125  001BF3  76                 	db	118	;'v'
   126  001BF4  61                 	db	97	;'a'
   127  001BF5  6C                 	db	108	;'l'
   128  001BF6  20                 	db	32
   129  001BF7  3D                 	db	61	;'='
   130  001BF8  25                 	db	37
   131  001BF9  64                 	db	100	;'d'
   132  001BFA  20                 	db	32
   133  001BFB  2C                 	db	44
   134  001BFC  67                 	db	103	;'g'
   135  001BFD  72                 	db	114	;'r'
   136  001BFE  69                 	db	105	;'i'
   137  001BFF  64                 	db	100	;'d'
   138  001C00  5F                 	db	95	;'_'
   139  001C01  70                 	db	112	;'p'
   140  001C02  6F                 	db	111	;'o'
   141  001C03  77                 	db	119	;'w'
   142  001C04  65                 	db	101	;'e'
   143  001C05  72                 	db	114	;'r'
   144  001C06  5F                 	db	95	;'_'
   145  001C07  6C                 	db	108	;'l'
   146  001C08  6F                 	db	111	;'o'
   147  001C09  77                 	db	119	;'w'
   148  001C0A  5F                 	db	95	;'_'
   149  001C0B  76                 	db	118	;'v'
   150  001C0C  6F                 	db	111	;'o'
   151  001C0D  6C                 	db	108	;'l'
   152  001C0E  74                 	db	116	;'t'
   153  001C0F  61                 	db	97	;'a'
   154  001C10  67                 	db	103	;'g'
   155  001C11  65                 	db	101	;'e'
   156  001C12  20                 	db	32
   157  001C13  3D                 	db	61	;'='
   158  001C14  20                 	db	32
   159  001C15  25                 	db	37
   160  001C16  64                 	db	100	;'d'
   161  001C17  20                 	db	32
   162  001C18  00                 	db	0
   163  001C19                     STR_40:
   164  001C19  0A                 	db	10
   165  001C1A  0D                 	db	13
   166  001C1B  20                 	db	32
   167  001C1C  53                 	db	83	;'S'
   168  001C1D  59                 	db	89	;'Y'
   169  001C1E  53                 	db	83	;'S'
   170  001C1F  54                 	db	84	;'T'
   171  001C20  45                 	db	69	;'E'
   172  001C21  4D                 	db	77	;'M'
   173  001C22  20                 	db	32
   174  001C23  54                 	db	84	;'T'
   175  001C24  45                 	db	69	;'E'
   176  001C25  53                 	db	83	;'S'
   177  001C26  54                 	db	84	;'T'
   178  001C27  20                 	db	32
   179  001C28  48                 	db	72	;'H'
   180  001C29  41                 	db	65	;'A'
   181  001C2A  53                 	db	83	;'S'
   182  001C2B  20                 	db	32
   183  001C2C  42                 	db	66	;'B'
   184  001C2D  45                 	db	69	;'E'
   185  001C2E  45                 	db	69	;'E'
   186  001C2F  4E                 	db	78	;'N'
   187  001C30  20                 	db	32
   188  001C31  53                 	db	83	;'S'
   189  001C32  55                 	db	85	;'U'
   190  001C33  43                 	db	67	;'C'
   191  001C34  43                 	db	67	;'C'
   192  001C35  53                 	db	83	;'S'
   193  001C36  45                 	db	69	;'E'
   194  001C37  46                 	db	70	;'F'
   195  001C38  55                 	db	85	;'U'
   196  001C39  4C                 	db	76	;'L'
   197  001C3A  4C                 	db	76	;'L'
   198  001C3B  21                 	db	33
   199  001C3C  21                 	db	33
   200  001C3D  0A                 	db	10
   201  001C3E  0D                 	db	13
   202  001C3F  20                 	db	32
   203  001C40  00                 	db	0
   204  001C41                     STR_36:
   205  001C41  0A                 	db	10
   206  001C42  0D                 	db	13
   207  001C43  53                 	db	83	;'S'
   208  001C44  59                 	db	89	;'Y'
   209  001C45  53                 	db	83	;'S'
   210  001C46  54                 	db	84	;'T'
   211  001C47  45                 	db	69	;'E'
   212  001C48  4D                 	db	77	;'M'
   213  001C49  20                 	db	32
   214  001C4A  54                 	db	84	;'T'
   215  001C4B  45                 	db	69	;'E'
   216  001C4C  53                 	db	83	;'S'
   217  001C4D  54                 	db	84	;'T'
   218  001C4E  20                 	db	32
   219  001C4F  48                 	db	72	;'H'
   220  001C50  41                 	db	65	;'A'
   221  001C51  53                 	db	83	;'S'
   222  001C52  20                 	db	32
   223  001C53  42                 	db	66	;'B'
   224  001C54  45                 	db	69	;'E'
   225  001C55  45                 	db	69	;'E'
   226  001C56  4E                 	db	78	;'N'
   227  001C57  20                 	db	32
   228  001C58  53                 	db	83	;'S'
   229  001C59  55                 	db	85	;'U'
   230  001C5A  43                 	db	67	;'C'
   231  001C5B  43                 	db	67	;'C'
   232  001C5C  53                 	db	83	;'S'
   233  001C5D  45                 	db	69	;'E'
   234  001C5E  46                 	db	70	;'F'
   235  001C5F  55                 	db	85	;'U'
   236  001C60  4C                 	db	76	;'L'
   237  001C61  4C                 	db	76	;'L'
   238  001C62  0A                 	db	10
   239  001C63  0D                 	db	13
   240  001C64  20                 	db	32
   241  001C65  00                 	db	0
   242  001C66                     STR_19:
   243  001C66  0A                 	db	10
   244  001C67  0D                 	db	13
   245  001C68  42                 	db	66	;'B'
   246  001C69  41                 	db	65	;'A'
   247  001C6A  54                 	db	84	;'T'
   248  001C6B  54                 	db	84	;'T'
   249  001C6C  20                 	db	32
   250  001C6D  55                 	db	85	;'U'
   251  001C6E  53                 	db	83	;'S'
   252  001C6F  20                 	db	32
   253  001C70  56                 	db	86	;'V'
   254  001C71  45                 	db	69	;'E'
   255  001C72  52                 	db	82	;'R'
   256  001C73  59                 	db	89	;'Y'
   257  001C74  20                 	db	32
   258  001C75  4C                 	db	76	;'L'
   259  001C76  4F                 	db	79	;'O'
   260  001C77  57                 	db	87	;'W'
   261  001C78  20                 	db	32
   262  001C79  53                 	db	83	;'S'
   263  001C7A  4F                 	db	79	;'O'
   264  001C7B  20                 	db	32
   265  001C7C  47                 	db	71	;'G'
   266  001C7D  4F                 	db	79	;'O'
   267  001C7E  49                 	db	73	;'I'
   268  001C7F  4E                 	db	78	;'N'
   269  001C80  47                 	db	71	;'G'
   270  001C81  20                 	db	32
   271  001C82  54                 	db	84	;'T'
   272  001C83  4F                 	db	79	;'O'
   273  001C84  20                 	db	32
   274  001C85  53                 	db	83	;'S'
   275  001C86  4C                 	db	76	;'L'
   276  001C87  45                 	db	69	;'E'
   277  001C88  45                 	db	69	;'E'
   278  001C89  50                 	db	80	;'P'
   279  001C8A  00                 	db	0
   280  001C8B                     STR_42:
   281  001C8B  0A                 	db	10
   282  001C8C  0D                 	db	13
   283  001C8D  20                 	db	32
   284  001C8E  53                 	db	83	;'S'
   285  001C8F  59                 	db	89	;'Y'
   286  001C90  53                 	db	83	;'S'
   287  001C91  54                 	db	84	;'T'
   288  001C92  45                 	db	69	;'E'
   289  001C93  4D                 	db	77	;'M'
   290  001C94  20                 	db	32
   291  001C95  54                 	db	84	;'T'
   292  001C96  45                 	db	69	;'E'
   293  001C97  53                 	db	83	;'S'
   294  001C98  54                 	db	84	;'T'
   295  001C99  20                 	db	32
   296  001C9A  48                 	db	72	;'H'
   297  001C9B  41                 	db	65	;'A'
   298  001C9C  53                 	db	83	;'S'
   299  001C9D  20                 	db	32
   300  001C9E  42                 	db	66	;'B'
   301  001C9F  45                 	db	69	;'E'
   302  001CA0  45                 	db	69	;'E'
   303  001CA1  4E                 	db	78	;'N'
   304  001CA2  20                 	db	32
   305  001CA3  46                 	db	70	;'F'
   306  001CA4  41                 	db	65	;'A'
   307  001CA5  49                 	db	73	;'I'
   308  001CA6  4C                 	db	76	;'L'
   309  001CA7  44                 	db	68	;'D'
   310  001CA8  21                 	db	33
   311  001CA9  20                 	db	32
   312  001CAA  0A                 	db	10
   313  001CAB  0D                 	db	13
   314  001CAC  20                 	db	32
   315  001CAD  00                 	db	0
   316  001CAE                     STR_30:
   317  001CAE  20                 	db	32
   318  001CAF  47                 	db	71	;'G'
   319  001CB0  52                 	db	82	;'R'
   320  001CB1  49                 	db	73	;'I'
   321  001CB2  44                 	db	68	;'D'
   322  001CB3  20                 	db	32
   323  001CB4  50                 	db	80	;'P'
   324  001CB5  4F                 	db	79	;'O'
   325  001CB6  57                 	db	87	;'W'
   326  001CB7  45                 	db	69	;'E'
   327  001CB8  52                 	db	82	;'R'
   328  001CB9  20                 	db	32
   329  001CBA  44                 	db	68	;'D'
   330  001CBB  45                 	db	69	;'E'
   331  001CBC  54                 	db	84	;'T'
   332  001CBD  45                 	db	69	;'E'
   333  001CBE  43                 	db	67	;'C'
   334  001CBF  54                 	db	84	;'T'
   335  001CC0  45                 	db	69	;'E'
   336  001CC1  44                 	db	68	;'D'
   337  001CC2  20                 	db	32
   338  001CC3  73                 	db	115	;'s'
   339  001CC4  6F                 	db	111	;'o'
   340  001CC5  20                 	db	32
   341  001CC6  57                 	db	87	;'W'
   342  001CC7  41                 	db	65	;'A'
   343  001CC8  4B                 	db	75	;'K'
   344  001CC9  49                 	db	73	;'I'
   345  001CCA  4E                 	db	78	;'N'
   346  001CCB  47                 	db	71	;'G'
   347  001CCC  20                 	db	32
   348  001CCD  55                 	db	85	;'U'
   349  001CCE  50                 	db	80	;'P'
   350  001CCF  00                 	db	0
   351  001CD0                     STR_5:
   352  001CD0  0A                 	db	10
   353  001CD1  0D                 	db	13
   354  001CD2  41                 	db	65	;'A'
   355  001CD3  54                 	db	84	;'T'
   356  001CD4  54                 	db	84	;'T'
   357  001CD5  21                 	db	33
   358  001CD6  21                 	db	33
   359  001CD7  21                 	db	33
   360  001CD8  20                 	db	32
   361  001CD9  62                 	db	98	;'b'
   362  001CDA  61                 	db	97	;'a'
   363  001CDB  74                 	db	116	;'t'
   364  001CDC  74                 	db	116	;'t'
   365  001CDD  5F                 	db	95	;'_'
   366  001CDE  73                 	db	115	;'s'
   367  001CDF  74                 	db	116	;'t'
   368  001CE0  61                 	db	97	;'a'
   369  001CE1  74                 	db	116	;'t'
   370  001CE2  20                 	db	32
   371  001CE3  3D                 	db	61	;'='
   372  001CE4  20                 	db	32
   373  001CE5  53                 	db	83	;'S'
   374  001CE6  48                 	db	72	;'H'
   375  001CE7  4F                 	db	79	;'O'
   376  001CE8  52                 	db	82	;'R'
   377  001CE9  54                 	db	84	;'T'
   378  001CEA  45                 	db	69	;'E'
   379  001CEB  44                 	db	68	;'D'
   380  001CEC  20                 	db	32
   381  001CED  21                 	db	33
   382  001CEE  21                 	db	33
   383  001CEF  21                 	db	33
   384  001CF0  00                 	db	0
   385  001CF1                     STR_37:
   386  001CF1  0A                 	db	10
   387  001CF2  0D                 	db	13
   388  001CF3  53                 	db	83	;'S'
   389  001CF4  59                 	db	89	;'Y'
   390  001CF5  53                 	db	83	;'S'
   391  001CF6  54                 	db	84	;'T'
   392  001CF7  45                 	db	69	;'E'
   393  001CF8  4D                 	db	77	;'M'
   394  001CF9  20                 	db	32
   395  001CFA  54                 	db	84	;'T'
   396  001CFB  45                 	db	69	;'E'
   397  001CFC  53                 	db	83	;'S'
   398  001CFD  54                 	db	84	;'T'
   399  001CFE  20                 	db	32
   400  001CFF  48                 	db	72	;'H'
   401  001D00  41                 	db	65	;'A'
   402  001D01  53                 	db	83	;'S'
   403  001D02  20                 	db	32
   404  001D03  42                 	db	66	;'B'
   405  001D04  45                 	db	69	;'E'
   406  001D05  45                 	db	69	;'E'
   407  001D06  4E                 	db	78	;'N'
   408  001D07  20                 	db	32
   409  001D08  46                 	db	70	;'F'
   410  001D09  41                 	db	65	;'A'
   411  001D0A  49                 	db	73	;'I'
   412  001D0B  4C                 	db	76	;'L'
   413  001D0C  44                 	db	68	;'D'
   414  001D0D  0A                 	db	10
   415  001D0E  0D                 	db	13
   416  001D0F  20                 	db	32
   417  001D10  00                 	db	0
   418  001D11                     STR_13:
   419  001D11  0A                 	db	10
   420  001D12  0D                 	db	13
   421  001D13  20                 	db	32
   422  001D14  47                 	db	71	;'G'
   423  001D15  52                 	db	82	;'R'
   424  001D16  49                 	db	73	;'I'
   425  001D17  44                 	db	68	;'D'
   426  001D18  5F                 	db	95	;'_'
   427  001D19  50                 	db	80	;'P'
   428  001D1A  4F                 	db	79	;'O'
   429  001D1B  57                 	db	87	;'W'
   430  001D1C  45                 	db	69	;'E'
   431  001D1D  52                 	db	82	;'R'
   432  001D1E  20                 	db	32
   433  001D1F  46                 	db	70	;'F'
   434  001D20  41                 	db	65	;'A'
   435  001D21  49                 	db	73	;'I'
   436  001D22  4C                 	db	76	;'L'
   437  001D23  20                 	db	32
   438  001D24  44                 	db	68	;'D'
   439  001D25  45                 	db	69	;'E'
   440  001D26  54                 	db	84	;'T'
   441  001D27  45                 	db	69	;'E'
   442  001D28  43                 	db	67	;'C'
   443  001D29  54                 	db	84	;'T'
   444  001D2A  45                 	db	69	;'E'
   445  001D2B  44                 	db	68	;'D'
   446  001D2C  20                 	db	32
   447  001D2D  0A                 	db	10
   448  001D2E  0D                 	db	13
   449  001D2F  00                 	db	0
   450  001D30                     STR_38:
   451  001D30  0A                 	db	10
   452  001D31  0D                 	db	13
   453  001D32  45                 	db	69	;'E'
   454  001D33  4E                 	db	78	;'N'
   455  001D34  54                 	db	84	;'T'
   456  001D35  45                 	db	69	;'E'
   457  001D36  52                 	db	82	;'R'
   458  001D37  49                 	db	73	;'I'
   459  001D38  4E                 	db	78	;'N'
   460  001D39  47                 	db	71	;'G'
   461  001D3A  20                 	db	32
   462  001D3B  53                 	db	83	;'S'
   463  001D3C  48                 	db	72	;'H'
   464  001D3D  4F                 	db	79	;'O'
   465  001D3E  52                 	db	82	;'R'
   466  001D3F  54                 	db	84	;'T'
   467  001D40  20                 	db	32
   468  001D41  54                 	db	84	;'T'
   469  001D42  45                 	db	69	;'E'
   470  001D43  53                 	db	83	;'S'
   471  001D44  54                 	db	84	;'T'
   472  001D45  20                 	db	32
   473  001D46  4D                 	db	77	;'M'
   474  001D47  4F                 	db	79	;'O'
   475  001D48  44                 	db	68	;'D'
   476  001D49  45                 	db	69	;'E'
   477  001D4A  0A                 	db	10
   478  001D4B  0D                 	db	13
   479  001D4C  20                 	db	32
   480  001D4D  00                 	db	0
   481  001D4E                     STR_41:
   482  001D4E  0A                 	db	10
   483  001D4F  0D                 	db	13
   484  001D50  54                 	db	84	;'T'
   485  001D51  45                 	db	69	;'E'
   486  001D52  53                 	db	83	;'S'
   487  001D53  54                 	db	84	;'T'
   488  001D54  5F                 	db	95	;'_'
   489  001D55  43                 	db	67	;'C'
   490  001D56  4F                 	db	79	;'O'
   491  001D57  55                 	db	85	;'U'
   492  001D58  4E                 	db	78	;'N'
   493  001D59  54                 	db	84	;'T'
   494  001D5A  20                 	db	32
   495  001D5B  49                 	db	73	;'I'
   496  001D5C  53                 	db	83	;'S'
   497  001D5D  20                 	db	32
   498  001D5E  25                 	db	37
   499  001D5F  64                 	db	100	;'d'
   500  001D60  20                 	db	32
   501  001D61  73                 	db	115	;'s'
   502  001D62  65                 	db	101	;'e'
   503  001D63  63                 	db	99	;'c'
   504  001D64  6F                 	db	111	;'o'
   505  001D65  6E                 	db	110	;'n'
   506  001D66  64                 	db	100	;'d'
   507  001D67  73                 	db	115	;'s'
   508  001D68  0A                 	db	10
   509  001D69  0D                 	db	13
   510  001D6A  00                 	db	0
   511  001D6B                     STR_33:
   512  001D6B  0A                 	db	10
   513  001D6C  0D                 	db	13
   514  001D6D  45                 	db	69	;'E'
   515  001D6E  4E                 	db	78	;'N'
   516  001D6F  54                 	db	84	;'T'
   517  001D70  45                 	db	69	;'E'
   518  001D71  52                 	db	82	;'R'
   519  001D72  49                 	db	73	;'I'
   520  001D73  4E                 	db	78	;'N'
   521  001D74  47                 	db	71	;'G'
   522  001D75  20                 	db	32
   523  001D76  4C                 	db	76	;'L'
   524  001D77  4F                 	db	79	;'O'
   525  001D78  4E                 	db	78	;'N'
   526  001D79  47                 	db	71	;'G'
   527  001D7A  20                 	db	32
   528  001D7B  54                 	db	84	;'T'
   529  001D7C  45                 	db	69	;'E'
   530  001D7D  53                 	db	83	;'S'
   531  001D7E  54                 	db	84	;'T'
   532  001D7F  20                 	db	32
   533  001D80  4D                 	db	77	;'M'
   534  001D81  4F                 	db	79	;'O'
   535  001D82  44                 	db	68	;'D'
   536  001D83  45                 	db	69	;'E'
   537  001D84  0A                 	db	10
   538  001D85  0D                 	db	13
   539  001D86  20                 	db	32
   540  001D87  00                 	db	0
   541  001D88                     STR_4:
   542  001D88  0A                 	db	10
   543  001D89  0D                 	db	13
   544  001D8A  62                 	db	98	;'b'
   545  001D8B  61                 	db	97	;'a'
   546  001D8C  74                 	db	116	;'t'
   547  001D8D  74                 	db	116	;'t'
   548  001D8E  5F                 	db	95	;'_'
   549  001D8F  73                 	db	115	;'s'
   550  001D90  74                 	db	116	;'t'
   551  001D91  61                 	db	97	;'a'
   552  001D92  74                 	db	116	;'t'
   553  001D93  20                 	db	32
   554  001D94  3D                 	db	61	;'='
   555  001D95  20                 	db	32
   556  001D96  4E                 	db	78	;'N'
   557  001D97  45                 	db	69	;'E'
   558  001D98  45                 	db	69	;'E'
   559  001D99  44                 	db	68	;'D'
   560  001D9A  5F                 	db	95	;'_'
   561  001D9B  43                 	db	67	;'C'
   562  001D9C  48                 	db	72	;'H'
   563  001D9D  41                 	db	65	;'A'
   564  001D9E  52                 	db	82	;'R'
   565  001D9F  47                 	db	71	;'G'
   566  001DA0  49                 	db	73	;'I'
   567  001DA1  4E                 	db	78	;'N'
   568  001DA2  47                 	db	71	;'G'
   569  001DA3  00                 	db	0
   570  001DA4                     STR_31:
   571  001DA4  0A                 	db	10
   572  001DA5  0D                 	db	13
   573  001DA6  54                 	db	84	;'T'
   574  001DA7  45                 	db	69	;'E'
   575  001DA8  53                 	db	83	;'S'
   576  001DA9  54                 	db	84	;'T'
   577  001DAA  5F                 	db	95	;'_'
   578  001DAB  53                 	db	83	;'S'
   579  001DAC  57                 	db	87	;'W'
   580  001DAD  20                 	db	32
   581  001DAE  70                 	db	112	;'p'
   582  001DAF  72                 	db	114	;'r'
   583  001DB0  65                 	db	101	;'e'
   584  001DB1  73                 	db	115	;'s'
   585  001DB2  73                 	db	115	;'s'
   586  001DB3  20                 	db	32
   587  001DB4  64                 	db	100	;'d'
   588  001DB5  65                 	db	101	;'e'
   589  001DB6  74                 	db	116	;'t'
   590  001DB7  65                 	db	101	;'e'
   591  001DB8  63                 	db	99	;'c'
   592  001DB9  74                 	db	116	;'t'
   593  001DBA  65                 	db	101	;'e'
   594  001DBB  64                 	db	100	;'d'
   595  001DBC  20                 	db	32
   596  001DBD  73                 	db	115	;'s'
   597  001DBE  6F                 	db	111	;'o'
   598  001DBF  00                 	db	0
   599  001DC0                     STR_3:
   600  001DC0  0A                 	db	10
   601  001DC1  0D                 	db	13
   602  001DC2  62                 	db	98	;'b'
   603  001DC3  61                 	db	97	;'a'
   604  001DC4  74                 	db	116	;'t'
   605  001DC5  74                 	db	116	;'t'
   606  001DC6  5F                 	db	95	;'_'
   607  001DC7  73                 	db	115	;'s'
   608  001DC8  74                 	db	116	;'t'
   609  001DC9  61                 	db	97	;'a'
   610  001DCA  74                 	db	116	;'t'
   611  001DCB  20                 	db	32
   612  001DCC  3D                 	db	61	;'='
   613  001DCD  20                 	db	32
   614  001DCE  46                 	db	70	;'F'
   615  001DCF  55                 	db	85	;'U'
   616  001DD0  4C                 	db	76	;'L'
   617  001DD1  4C                 	db	76	;'L'
   618  001DD2  5F                 	db	95	;'_'
   619  001DD3  43                 	db	67	;'C'
   620  001DD4  48                 	db	72	;'H'
   621  001DD5  41                 	db	65	;'A'
   622  001DD6  52                 	db	82	;'R'
   623  001DD7  47                 	db	71	;'G'
   624  001DD8  45                 	db	69	;'E'
   625  001DD9  44                 	db	68	;'D'
   626  001DDA  00                 	db	0
   627  001DDB                     STR_2:
   628  001DDB  0A                 	db	10
   629  001DDC  0D                 	db	13
   630  001DDD  62                 	db	98	;'b'
   631  001DDE  61                 	db	97	;'a'
   632  001DDF  74                 	db	116	;'t'
   633  001DE0  74                 	db	116	;'t'
   634  001DE1  5F                 	db	95	;'_'
   635  001DE2  73                 	db	115	;'s'
   636  001DE3  74                 	db	116	;'t'
   637  001DE4  61                 	db	97	;'a'
   638  001DE5  74                 	db	116	;'t'
   639  001DE6  20                 	db	32
   640  001DE7  3D                 	db	61	;'='
   641  001DE8  20                 	db	32
   642  001DE9  44                 	db	68	;'D'
   643  001DEA  49                 	db	73	;'I'
   644  001DEB  53                 	db	83	;'S'
   645  001DEC  43                 	db	67	;'C'
   646  001DED  4F                 	db	79	;'O'
   647  001DEE  4E                 	db	78	;'N'
   648  001DEF  4E                 	db	78	;'N'
   649  001DF0  45                 	db	69	;'E'
   650  001DF1  43                 	db	67	;'C'
   651  001DF2  54                 	db	84	;'T'
   652  001DF3  45                 	db	69	;'E'
   653  001DF4  44                 	db	68	;'D'
   654  001DF5  00                 	db	0
   655  001DF6                     STR_26:
   656  001DF6  0A                 	db	10
   657  001DF7  0D                 	db	13
   658  001DF8  20                 	db	32
   659  001DF9  42                 	db	66	;'B'
   660  001DFA  41                 	db	65	;'A'
   661  001DFB  54                 	db	84	;'T'
   662  001DFC  20                 	db	32
   663  001DFD  56                 	db	86	;'V'
   664  001DFE  4F                 	db	79	;'O'
   665  001DFF  4C                 	db	76	;'L'
   666  001E00  54                 	db	84	;'T'
   667  001E01  41                 	db	65	;'A'
   668  001E02  47                 	db	71	;'G'
   669  001E03  45                 	db	69	;'E'
   670  001E04  20                 	db	32
   671  001E05  49                 	db	73	;'I'
   672  001E06  53                 	db	83	;'S'
   673  001E07  20                 	db	32
   674  001E08  47                 	db	71	;'G'
   675  001E09  4F                 	db	79	;'O'
   676  001E0A  4F                 	db	79	;'O'
   677  001E0B  44                 	db	68	;'D'
   678  001E0C  21                 	db	33
   679  001E0D  20                 	db	32
   680  001E0E  00                 	db	0
   681  001E0F                     STR_35:
   682  001E0F  0A                 	db	10
   683  001E10  0D                 	db	13
   684  001E11  54                 	db	84	;'T'
   685  001E12  45                 	db	69	;'E'
   686  001E13  53                 	db	83	;'S'
   687  001E14  54                 	db	84	;'T'
   688  001E15  20                 	db	32
   689  001E16  49                 	db	73	;'I'
   690  001E17  53                 	db	83	;'S'
   691  001E18  20                 	db	32
   692  001E19  25                 	db	37
   693  001E1A  64                 	db	100	;'d'
   694  001E1B  20                 	db	32
   695  001E1C  73                 	db	115	;'s'
   696  001E1D  65                 	db	101	;'e'
   697  001E1E  63                 	db	99	;'c'
   698  001E1F  6F                 	db	111	;'o'
   699  001E20  6E                 	db	110	;'n'
   700  001E21  64                 	db	100	;'d'
   701  001E22  73                 	db	115	;'s'
   702  001E23  0A                 	db	10
   703  001E24  0D                 	db	13
   704  001E25  20                 	db	32
   705  001E26  00                 	db	0
   706  001E27                     STR_11:
   707  001E27  0A                 	db	10
   708  001E28  0D                 	db	13
   709  001E29  20                 	db	32
   710  001E2A  4D                 	db	77	;'M'
   711  001E2B  4F                 	db	79	;'O'
   712  001E2C  56                 	db	86	;'V'
   713  001E2D  49                 	db	73	;'I'
   714  001E2E  4E                 	db	78	;'N'
   715  001E2F  47                 	db	71	;'G'
   716  001E30  20                 	db	32
   717  001E31  54                 	db	84	;'T'
   718  001E32  4F                 	db	79	;'O'
   719  001E33  20                 	db	32
   720  001E34  53                 	db	83	;'S'
   721  001E35  54                 	db	84	;'T'
   722  001E36  5F                 	db	95	;'_'
   723  001E37  42                 	db	66	;'B'
   724  001E38  59                 	db	89	;'Y'
   725  001E39  20                 	db	32
   726  001E3A  4D                 	db	77	;'M'
   727  001E3B  4F                 	db	79	;'O'
   728  001E3C  44                 	db	68	;'D'
   729  001E3D  45                 	db	69	;'E'
   730  001E3E  00                 	db	0
   731  001E3F                     STR_28:
   732  001E3F  0A                 	db	10
   733  001E40  0D                 	db	13
   734  001E41  0A                 	db	10
   735  001E42  0D                 	db	13
   736  001E43  0A                 	db	10
   737  001E44  0D                 	db	13
   738  001E45  20                 	db	32
   739  001E46  73                 	db	115	;'s'
   740  001E47  77                 	db	119	;'w'
   741  001E48  5F                 	db	95	;'_'
   742  001E49  73                 	db	115	;'s'
   743  001E4A  74                 	db	116	;'t'
   744  001E4B  61                 	db	97	;'a'
   745  001E4C  74                 	db	116	;'t'
   746  001E4D  20                 	db	32
   747  001E4E  3D                 	db	61	;'='
   748  001E4F  20                 	db	32
   749  001E50  53                 	db	83	;'S'
   750  001E51  4C                 	db	76	;'L'
   751  001E52  45                 	db	69	;'E'
   752  001E53  45                 	db	69	;'E'
   753  001E54  50                 	db	80	;'P'
   754  001E55  00                 	db	0
   755  001E56                     STR_7:
   756  001E56  2D                 	db	45
   757  001E57  20                 	db	32
   758  001E58  4E                 	db	78	;'N'
   759  001E59  4F                 	db	79	;'O'
   760  001E5A  52                 	db	82	;'R'
   761  001E5B  4D                 	db	77	;'M'
   762  001E5C  41                 	db	65	;'A'
   763  001E5D  4C                 	db	76	;'L'
   764  001E5E  20                 	db	32
   765  001E5F  26                 	db	38
   766  001E60  20                 	db	32
   767  001E61  54                 	db	84	;'T'
   768  001E62  52                 	db	82	;'R'
   769  001E63  49                 	db	73	;'I'
   770  001E64  43                 	db	67	;'C'
   771  001E65  4B                 	db	75	;'K'
   772  001E66  4C                 	db	76	;'L'
   773  001E67  45                 	db	69	;'E'
   774  001E68  0A                 	db	10
   775  001E69  0D                 	db	13
   776  001E6A  20                 	db	32
   777  001E6B  00                 	db	0
   778  001E6C                     STR_25:
   779  001E6C  0A                 	db	10
   780  001E6D  0D                 	db	13
   781  001E6E  0A                 	db	10
   782  001E6F  0D                 	db	13
   783  001E70  20                 	db	32
   784  001E71  73                 	db	115	;'s'
   785  001E72  77                 	db	119	;'w'
   786  001E73  5F                 	db	95	;'_'
   787  001E74  73                 	db	115	;'s'
   788  001E75  74                 	db	116	;'t'
   789  001E76  61                 	db	97	;'a'
   790  001E77  74                 	db	116	;'t'
   791  001E78  20                 	db	32
   792  001E79  3D                 	db	61	;'='
   793  001E7A  20                 	db	32
   794  001E7B  45                 	db	69	;'E'
   795  001E7C  52                 	db	82	;'R'
   796  001E7D  52                 	db	82	;'R'
   797  001E7E  4F                 	db	79	;'O'
   798  001E7F  52                 	db	82	;'R'
   799  001E80  3B                 	db	59	;';'
   800  001E81  00                 	db	0
   801  001E82                     STR_12:
   802  001E82  0A                 	db	10
   803  001E83  0D                 	db	13
   804  001E84  0A                 	db	10
   805  001E85  0D                 	db	13
   806  001E86  20                 	db	32
   807  001E87  73                 	db	115	;'s'
   808  001E88  77                 	db	119	;'w'
   809  001E89  5F                 	db	95	;'_'
   810  001E8A  73                 	db	115	;'s'
   811  001E8B  74                 	db	116	;'t'
   812  001E8C  61                 	db	97	;'a'
   813  001E8D  74                 	db	116	;'t'
   814  001E8E  20                 	db	32
   815  001E8F  3D                 	db	61	;'='
   816  001E90  20                 	db	32
   817  001E91  53                 	db	83	;'S'
   818  001E92  54                 	db	84	;'T'
   819  001E93  5F                 	db	95	;'_'
   820  001E94  42                 	db	66	;'B'
   821  001E95  59                 	db	89	;'Y'
   822  001E96  3B                 	db	59	;';'
   823  001E97  00                 	db	0
   824  001E98                     STR_39:
   825  001E98  0A                 	db	10
   826  001E99  0D                 	db	13
   827  001E9A  57                 	db	87	;'W'
   828  001E9B  45                 	db	69	;'E'
   829  001E9C  20                 	db	32
   830  001E9D  41                 	db	65	;'A'
   831  001E9E  52                 	db	82	;'R'
   832  001E9F  45                 	db	69	;'E'
   833  001EA0  20                 	db	32
   834  001EA1  49                 	db	73	;'I'
   835  001EA2  4E                 	db	78	;'N'
   836  001EA3  20                 	db	32
   837  001EA4  57                 	db	87	;'W'
   838  001EA5  4F                 	db	79	;'O'
   839  001EA6  52                 	db	82	;'R'
   840  001EA7  4B                 	db	75	;'K'
   841  001EA8  20                 	db	32
   842  001EA9  4D                 	db	77	;'M'
   843  001EAA  4F                 	db	79	;'O'
   844  001EAB  44                 	db	68	;'D'
   845  001EAC  45                 	db	69	;'E'
   846  001EAD  00                 	db	0
   847  001EAE                     STR_27:
   848  001EAE  0A                 	db	10
   849  001EAF  0D                 	db	13
   850  001EB0  20                 	db	32
   851  001EB1  45                 	db	69	;'E'
   852  001EB2  58                 	db	88	;'X'
   853  001EB3  49                 	db	73	;'I'
   854  001EB4  54                 	db	84	;'T'
   855  001EB5  49                 	db	73	;'I'
   856  001EB6  4E                 	db	78	;'N'
   857  001EB7  47                 	db	71	;'G'
   858  001EB8  20                 	db	32
   859  001EB9  45                 	db	69	;'E'
   860  001EBA  52                 	db	82	;'R'
   861  001EBB  52                 	db	82	;'R'
   862  001EBC  4F                 	db	79	;'O'
   863  001EBD  52                 	db	82	;'R'
   864  001EBE  20                 	db	32
   865  001EBF  4D                 	db	77	;'M'
   866  001EC0  4F                 	db	79	;'O'
   867  001EC1  44                 	db	68	;'D'
   868  001EC2  45                 	db	69	;'E'
   869  001EC3  00                 	db	0
   870  001EC4                     STR_20:
   871  001EC4  0A                 	db	10
   872  001EC5  0D                 	db	13
   873  001EC6  4D                 	db	77	;'M'
   874  001EC7  4F                 	db	79	;'O'
   875  001EC8  56                 	db	86	;'V'
   876  001EC9  49                 	db	73	;'I'
   877  001ECA  4E                 	db	78	;'N'
   878  001ECB  47                 	db	71	;'G'
   879  001ECC  20                 	db	32
   880  001ECD  54                 	db	84	;'T'
   881  001ECE  4F                 	db	79	;'O'
   882  001ECF  20                 	db	32
   883  001ED0  54                 	db	84	;'T'
   884  001ED1  45                 	db	69	;'E'
   885  001ED2  53                 	db	83	;'S'
   886  001ED3  54                 	db	84	;'T'
   887  001ED4  20                 	db	32
   888  001ED5  4D                 	db	77	;'M'
   889  001ED6  4F                 	db	79	;'O'
   890  001ED7  44                 	db	68	;'D'
   891  001ED8  45                 	db	69	;'E'
   892  001ED9  00                 	db	0
   893  001EDA                     STR_17:
   894  001EDA  0A                 	db	10
   895  001EDB  0D                 	db	13
   896  001EDC  0A                 	db	10
   897  001EDD  0D                 	db	13
   898  001EDE  20                 	db	32
   899  001EDF  73                 	db	115	;'s'
   900  001EE0  77                 	db	119	;'w'
   901  001EE1  5F                 	db	95	;'_'
   902  001EE2  73                 	db	115	;'s'
   903  001EE3  74                 	db	116	;'t'
   904  001EE4  61                 	db	97	;'a'
   905  001EE5  74                 	db	116	;'t'
   906  001EE6  20                 	db	32
   907  001EE7  3D                 	db	61	;'='
   908  001EE8  20                 	db	32
   909  001EE9  57                 	db	87	;'W'
   910  001EEA  4F                 	db	79	;'O'
   911  001EEB  52                 	db	82	;'R'
   912  001EEC  4B                 	db	75	;'K'
   913  001EED  3B                 	db	59	;';'
   914  001EEE  00                 	db	0
   915  001EEF                     STR_21:
   916  001EEF  0A                 	db	10
   917  001EF0  0D                 	db	13
   918  001EF1  0A                 	db	10
   919  001EF2  0D                 	db	13
   920  001EF3  20                 	db	32
   921  001EF4  73                 	db	115	;'s'
   922  001EF5  77                 	db	119	;'w'
   923  001EF6  5F                 	db	95	;'_'
   924  001EF7  73                 	db	115	;'s'
   925  001EF8  74                 	db	116	;'t'
   926  001EF9  61                 	db	97	;'a'
   927  001EFA  74                 	db	116	;'t'
   928  001EFB  20                 	db	32
   929  001EFC  3D                 	db	61	;'='
   930  001EFD  20                 	db	32
   931  001EFE  54                 	db	84	;'T'
   932  001EFF  45                 	db	69	;'E'
   933  001F00  53                 	db	83	;'S'
   934  001F01  54                 	db	84	;'T'
   935  001F02  3B                 	db	59	;';'
   936  001F03  00                 	db	0
   937  001F04                     STR_43:
   938  001F04  0A                 	db	10
   939  001F05  0D                 	db	13
   940  001F06  7E                 	db	126
   941  001F07  7E                 	db	126
   942  001F08  53                 	db	83	;'S'
   943  001F09  79                 	db	121	;'y'
   944  001F0A  73                 	db	115	;'s'
   945  001F0B  20                 	db	32
   946  001F0C  53                 	db	83	;'S'
   947  001F0D  74                 	db	116	;'t'
   948  001F0E  61                 	db	97	;'a'
   949  001F0F  72                 	db	114	;'r'
   950  001F10  74                 	db	116	;'t'
   951  001F11  65                 	db	101	;'e'
   952  001F12  64                 	db	100	;'d'
   953  001F13  7E                 	db	126
   954  001F14  7E                 	db	126
   955  001F15  7E                 	db	126
   956  001F16  00                 	db	0
   957  001F17                     STR_14:
   958  001F17  0A                 	db	10
   959  001F18  0D                 	db	13
   960  001F19  47                 	db	71	;'G'
   961  001F1A  52                 	db	82	;'R'
   962  001F1B  49                 	db	73	;'I'
   963  001F1C  44                 	db	68	;'D'
   964  001F1D  5F                 	db	95	;'_'
   965  001F1E  50                 	db	80	;'P'
   966  001F1F  4F                 	db	79	;'O'
   967  001F20  57                 	db	87	;'W'
   968  001F21  45                 	db	69	;'E'
   969  001F22  52                 	db	82	;'R'
   970  001F23  20                 	db	32
   971  001F24  49                 	db	73	;'I'
   972  001F25  53                 	db	83	;'S'
   973  001F26  20                 	db	32
   974  001F27  4F                 	db	79	;'O'
   975  001F28  4B                 	db	75	;'K'
   976  001F29  00                 	db	0
   977  001F2A                     STR_1:
   978  001F2A  0A                 	db	10
   979  001F2B  0D                 	db	13
   980  001F2C  0A                 	db	10
   981  001F2D  0D                 	db	13
   982  001F2E  20                 	db	32
   983  001F2F  56                 	db	86	;'V'
   984  001F30  62                 	db	98	;'b'
   985  001F31  61                 	db	97	;'a'
   986  001F32  74                 	db	116	;'t'
   987  001F33  20                 	db	32
   988  001F34  41                 	db	65	;'A'
   989  001F35  44                 	db	68	;'D'
   990  001F36  43                 	db	67	;'C'
   991  001F37  20                 	db	32
   992  001F38  3D                 	db	61	;'='
   993  001F39  20                 	db	32
   994  001F3A  25                 	db	37
   995  001F3B  64                 	db	100	;'d'
   996  001F3C  00                 	db	0
   997  001F3D                     STR_45:
   998  001F3D  30                 	db	48	;'0'
   999  001F3E  31                 	db	49	;'1'
  1000  001F3F  32                 	db	50	;'2'
  1001  001F40  33                 	db	51	;'3'
  1002  001F41  34                 	db	52	;'4'
  1003  001F42  35                 	db	53	;'5'
  1004  001F43  36                 	db	54	;'6'
  1005  001F44  37                 	db	55	;'7'
  1006  001F45  38                 	db	56	;'8'
  1007  001F46  39                 	db	57	;'9'
  1008  001F47  41                 	db	65	;'A'
  1009  001F48  42                 	db	66	;'B'
  1010  001F49  43                 	db	67	;'C'
  1011  001F4A  44                 	db	68	;'D'
  1012  001F4B  45                 	db	69	;'E'
  1013  001F4C  46                 	db	70	;'F'
  1014  001F4D  00                 	db	0
  1015  001F4E                     STR_46:
  1016  001F4E  30                 	db	48	;'0'
  1017  001F4F  31                 	db	49	;'1'
  1018  001F50  32                 	db	50	;'2'
  1019  001F51  33                 	db	51	;'3'
  1020  001F52  34                 	db	52	;'4'
  1021  001F53  35                 	db	53	;'5'
  1022  001F54  36                 	db	54	;'6'
  1023  001F55  37                 	db	55	;'7'
  1024  001F56  38                 	db	56	;'8'
  1025  001F57  39                 	db	57	;'9'
  1026  001F58  61                 	db	97	;'a'
  1027  001F59  62                 	db	98	;'b'
  1028  001F5A  63                 	db	99	;'c'
  1029  001F5B  64                 	db	100	;'d'
  1030  001F5C  65                 	db	101	;'e'
  1031  001F5D  66                 	db	102	;'f'
  1032  001F5E  00                 	db	0
  1033  001F5F                     STR_23:
  1034  001F5F  0A                 	db	10
  1035  001F60  0D                 	db	13
  1036  001F61  67                 	db	103	;'g'
  1037  001F62  6F                 	db	111	;'o'
  1038  001F63  69                 	db	105	;'i'
  1039  001F64  6E                 	db	110	;'n'
  1040  001F65  67                 	db	103	;'g'
  1041  001F66  20                 	db	32
  1042  001F67  74                 	db	116	;'t'
  1043  001F68  6F                 	db	111	;'o'
  1044  001F69  20                 	db	32
  1045  001F6A  53                 	db	83	;'S'
  1046  001F6B  54                 	db	84	;'T'
  1047  001F6C  5F                 	db	95	;'_'
  1048  001F6D  42                 	db	66	;'B'
  1049  001F6E  59                 	db	89	;'Y'
  1050  001F6F  00                 	db	0
  1051  001F70                     STR_6:
  1052  001F70  0A                 	db	10
  1053  001F71  0D                 	db	13
  1054  001F72  20                 	db	32
  1055  001F73  43                 	db	67	;'C'
  1056  001F74  48                 	db	72	;'H'
  1057  001F75  41                 	db	65	;'A'
  1058  001F76  52                 	db	82	;'R'
  1059  001F77  47                 	db	71	;'G'
  1060  001F78  49                 	db	73	;'I'
  1061  001F79  4E                 	db	78	;'N'
  1062  001F7A  47                 	db	71	;'G'
  1063  001F7B  20                 	db	32
  1064  001F7C  49                 	db	73	;'I'
  1065  001F7D  53                 	db	83	;'S'
  1066  001F7E  20                 	db	32
  1067  001F7F  00                 	db	0
  1068  001F80                     STR_24:
  1069  001F80  0A                 	db	10
  1070  001F81  0D                 	db	13
  1071  001F82  54                 	db	84	;'T'
  1072  001F83  4F                 	db	79	;'O'
  1073  001F84  20                 	db	32
  1074  001F85  45                 	db	69	;'E'
  1075  001F86  52                 	db	82	;'R'
  1076  001F87  52                 	db	82	;'R'
  1077  001F88  4F                 	db	79	;'O'
  1078  001F89  52                 	db	82	;'R'
  1079  001F8A  20                 	db	32
  1080  001F8B  4D                 	db	77	;'M'
  1081  001F8C  4F                 	db	79	;'O'
  1082  001F8D  44                 	db	68	;'D'
  1083  001F8E  45                 	db	69	;'E'
  1084  001F8F  00                 	db	0
  1085  001F90                     STR_18:
  1086  001F90  0A                 	db	10
  1087  001F91  0D                 	db	13
  1088  001F92  50                 	db	80	;'P'
  1089  001F93  4F                 	db	79	;'O'
  1090  001F94  57                 	db	87	;'W'
  1091  001F95  45                 	db	69	;'E'
  1092  001F96  52                 	db	82	;'R'
  1093  001F97  20                 	db	32
  1094  001F98  49                 	db	73	;'I'
  1095  001F99  53                 	db	83	;'S'
  1096  001F9A  20                 	db	32
  1097  001F9B  42                 	db	66	;'B'
  1098  001F9C  41                 	db	65	;'A'
  1099  001F9D  43                 	db	67	;'C'
  1100  001F9E  4B                 	db	75	;'K'
  1101  001F9F  00                 	db	0
  1102  001FA0                     STR_29:
  1103  001FA0  0A                 	db	10
  1104  001FA1  0D                 	db	13
  1105  001FA2  20                 	db	32
  1106  001FA3  56                 	db	86	;'V'
  1107  001FA4  69                 	db	105	;'i'
  1108  001FA5  6E                 	db	110	;'n'
  1109  001FA6  20                 	db	32
  1110  001FA7  41                 	db	65	;'A'
  1111  001FA8  44                 	db	68	;'D'
  1112  001FA9  43                 	db	67	;'C'
  1113  001FAA  20                 	db	32
  1114  001FAB  3D                 	db	61	;'='
  1115  001FAC  20                 	db	32
  1116  001FAD  25                 	db	37
  1117  001FAE  64                 	db	100	;'d'
  1118  001FAF  00                 	db	0
  1119  001FB0                     STR_34:
  1120  001FB0  0A                 	db	10
  1121  001FB1  0D                 	db	13
  1122  001FB2  54                 	db	84	;'T'
  1123  001FB3  45                 	db	69	;'E'
  1124  001FB4  53                 	db	83	;'S'
  1125  001FB5  54                 	db	84	;'T'
  1126  001FB6  20                 	db	32
  1127  001FB7  44                 	db	68	;'D'
  1128  001FB8  45                 	db	69	;'E'
  1129  001FB9  4C                 	db	76	;'L'
  1130  001FBA  41                 	db	65	;'A'
  1131  001FBB  59                 	db	89	;'Y'
  1132  001FBC  45                 	db	69	;'E'
  1133  001FBD  44                 	db	68	;'D'
  1134  001FBE  00                 	db	0
  1135  001FBF                     STR_16:
  1136  001FBF  0A                 	db	10
  1137  001FC0  0D                 	db	13
  1138  001FC1  54                 	db	84	;'T'
  1139  001FC2  4F                 	db	79	;'O'
  1140  001FC3  20                 	db	32
  1141  001FC4  57                 	db	87	;'W'
  1142  001FC5  4F                 	db	79	;'O'
  1143  001FC6  52                 	db	82	;'R'
  1144  001FC7  4B                 	db	75	;'K'
  1145  001FC8  20                 	db	32
  1146  001FC9  4D                 	db	77	;'M'
  1147  001FCA  4F                 	db	79	;'O'
  1148  001FCB  44                 	db	68	;'D'
  1149  001FCC  45                 	db	69	;'E'
  1150  001FCD  00                 	db	0
  1151  001FCE                     STR_22:
  1152  001FCE  0A                 	db	10
  1153  001FCF  0D                 	db	13
  1154  001FD0  54                 	db	84	;'T'
  1155  001FD1  45                 	db	69	;'E'
  1156  001FD2  53                 	db	83	;'S'
  1157  001FD3  54                 	db	84	;'T'
  1158  001FD4  20                 	db	32
  1159  001FD5  49                 	db	73	;'I'
  1160  001FD6  53                 	db	83	;'S'
  1161  001FD7  20                 	db	32
  1162  001FD8  44                 	db	68	;'D'
  1163  001FD9  4F                 	db	79	;'O'
  1164  001FDA  4E                 	db	78	;'N'
  1165  001FDB  45                 	db	69	;'E'
  1166  001FDC  00                 	db	0
  1167  001FDD                     STR_44:
  1168  001FDD  0A                 	db	10
  1169  001FDE  0D                 	db	13
  1170  001FDF  52                 	db	82	;'R'
  1171  001FE0  43                 	db	67	;'C'
  1172  001FE1  4F                 	db	79	;'O'
  1173  001FE2  4E                 	db	78	;'N'
  1174  001FE3  20                 	db	32
  1175  001FE4  3D                 	db	61	;'='
  1176  001FE5  20                 	db	32
  1177  001FE6  25                 	db	37
  1178  001FE7  78                 	db	120	;'x'
  1179  001FE8  20                 	db	32
  1180  001FE9  00                 	db	0
  1181  001FEA                     STR_10:
  1182  001FEA  2D                 	db	45
  1183  001FEB  20                 	db	32
  1184  001FEC  54                 	db	84	;'T'
  1185  001FED  52                 	db	82	;'R'
  1186  001FEE  49                 	db	73	;'I'
  1187  001FEF  43                 	db	67	;'C'
  1188  001FF0  4B                 	db	75	;'K'
  1189  001FF1  4C                 	db	76	;'L'
  1190  001FF2  45                 	db	69	;'E'
  1191  001FF3  0A                 	db	10
  1192  001FF4  0D                 	db	13
  1193  001FF5  20                 	db	32
  1194  001FF6  00                 	db	0
  1195  001FF7                     STR_8:
  1196  001FF7  4F                 	db	79	;'O'
  1197  001FF8  46                 	db	70	;'F'
  1198  001FF9  46                 	db	70	;'F'
  1199  001FFA  20                 	db	32
  1200  001FFB  0A                 	db	10
  1201  001FFC  0D                 	db	13
  1202  001FFD  20                 	db	32
  1203  001FFE  00                 	db	0
  1204  0000                     
  1205                           ; #config settings
  1206  001FFF  00                 	db	0	; dummy byte at the end
  1207  0000                     
  1208                           	psect	nvBANK0
  1209  0000EB                     __pnvBANK0:
  1210                           	opt stack 0
  1211  0000EB                     _exit_sleep_press:
  1212                           	opt stack 0
  1213  0000EB                     	ds	2
  1214  0000ED                     _test_faild_flag:
  1215                           	opt stack 0
  1216  0000ED                     	ds	2
  1217  0000EF                     globals@test_faild_flag:
  1218                           	opt stack 0
  1219  0000EF                     	ds	2
  1220  0000                     _ANSELA	set	3896
  1221  0000                     _ANSELB	set	3897
  1222  0000                     _ANSELC	set	3898
  1223  0000                     _FVRCONbits	set	3906
  1224  0000                     _ADCON0	set	4034
  1225  0000                     _ADCON1	set	4033
  1226  0000                     _ADCON1bits	set	4033
  1227  0000                     _ADCON2	set	4032
  1228  0000                     _ADRESH	set	4036
  1229  0000                     _ADRESL	set	4035
  1230  0000                     _BAUDCON1bits	set	4024
  1231  0000                     _EEADR	set	4009
  1232  0000                     _EECON1bits	set	4006
  1233  0000                     _EECON2	set	4007
  1234  0000                     _EEDATA	set	4008
  1235  0000                     _INTCONbits	set	4082
  1236  0000                     _LATA	set	3977
  1237  0000                     _LATAbits	set	3977
  1238  0000                     _LATB	set	3978
  1239  0000                     _LATBbits	set	3978
  1240  0000                     _LATC	set	3979
  1241  0000                     _LATCbits	set	3979
  1242  0000                     _OSCCON	set	4051
  1243  0000                     _PORTBbits	set	3969
  1244  0000                     _RCON	set	4048
  1245  0000                     _RCREG	set	4014
  1246  0000                     _RCREG1	set	4014
  1247  0000                     _RCSTA	set	4011
  1248  0000                     _SPBRG	set	4015
  1249  0000                     _T1CON	set	4045
  1250  0000                     _TMR1H	set	4047
  1251  0000                     _TMR1L	set	4046
  1252  0000                     _TRISA	set	3986
  1253  0000                     _TRISB	set	3987
  1254  0000                     _TRISC	set	3988
  1255  0000                     _TXREG	set	4013
  1256  0000                     _TXSTA	set	4012
  1257  0000                     _WPUB	set	3937
  1258  0000                     _CREN1	set	32092
  1259  0000                     _FERR1	set	32090
  1260  0000                     _GIE	set	32663
  1261  0000                     _GODONE	set	32273
  1262  0000                     _GO_DONE	set	32273
  1263  0000                     _INT1F	set	32640
  1264  0000                     _OERR1	set	32089
  1265  0000                     _PEIE	set	32662
  1266  0000                     _RC1IE	set	31981
  1267  0000                     _RC1IF	set	31989
  1268  0000                     _RCIE	set	31981
  1269  0000                     _RCIF	set	31989
  1270  0000                     _SPEN1	set	32095
  1271  0000                     _TMR1IE	set	31976
  1272  0000                     _TMR1IF	set	31984
  1273  0000                     _TRISA1	set	31889
  1274  0000                     _TRISC0	set	31904
  1275  0000                     _TRISC6	set	31910
  1276  0000                     _TRISC7	set	31911
  1277  0000                     _TRMT1	set	32097
  1278  0000                     _nRBPU	set	32655
  1279                           
  1280                           	psect	cinit
  1281  001A24                     __pcinit:
  1282                           	opt stack 0
  1283  001A24                     start_initialization:
  1284                           	opt stack 0
  1285  001A24                     __initialization:
  1286                           	opt stack 0
  1287                           
  1288                           ; Clear objects allocated to BANK1 (20 bytes)
  1289  001A24  EE01  F015         	lfsr	0,__pbssBANK1
  1290  001A28  0E14               	movlw	20
  1291  001A2A                     clear_0:
  1292  001A2A  6AEE               	clrf	postinc0,c
  1293  001A2C  06E8               	decf	wreg,f,c
  1294  001A2E  E1FD               	bnz	clear_0
  1295                           
  1296                           ; Clear objects allocated to BANK0 (139 bytes)
  1297  001A30  EE00  F060         	lfsr	0,__pbssBANK0
  1298  001A34  0E8B               	movlw	139
  1299  001A36                     clear_1:
  1300  001A36  6AEE               	clrf	postinc0,c
  1301  001A38  06E8               	decf	wreg,f,c
  1302  001A3A  E1FD               	bnz	clear_1
  1303                           
  1304                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  1305  001A3C  6A4A               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1306                           
  1307                           ; Clear objects allocated to COMRAM (33 bytes)
  1308  001A3E  EE00  F029         	lfsr	0,__pbssCOMRAM
  1309  001A42  0E21               	movlw	33
  1310  001A44                     clear_2:
  1311  001A44  6AEE               	clrf	postinc0,c
  1312  001A46  06E8               	decf	wreg,f,c
  1313  001A48  E1FD               	bnz	clear_2
  1314  001A4A                     end_of_initialization:
  1315                           	opt stack 0
  1316  001A4A                     __end_of__initialization:
  1317                           	opt stack 0
  1318  001A4A  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1319  001A4C  6EF8               	movwf	tblptru,c
  1320  001A4E  0100               	movlb	0
  1321  001A50  EF94  F005         	goto	_main	;jump to C main() function
  1322                           tblptru	equ	0xFF8
  1323                           postinc0	equ	0xFEE
  1324                           wreg	equ	0xFE8
  1325                           
  1326                           	psect	bitbssCOMRAM
  1327  000250                     __pbitbssCOMRAM:
  1328                           	opt stack 0
  1329  000250                     _send_data_flag:
  1330                           	opt stack 0
  1331  000250                     	ds	1
  1332                           tblptru	equ	0xFF8
  1333                           postinc0	equ	0xFEE
  1334                           wreg	equ	0xFE8
  1335                           
  1336                           	psect	bssCOMRAM
  1337  000029                     __pbssCOMRAM:
  1338                           	opt stack 0
  1339  000029                     _GRID_Voltage_ADC_val:
  1340                           	opt stack 0
  1341  000029                     	ds	2
  1342  00002B                     _Vbat_ADC_val:
  1343                           	opt stack 0
  1344  00002B                     	ds	2
  1345  00002D                     _grid_power_low_voltage:
  1346                           	opt stack 0
  1347  00002D                     	ds	2
  1348  00002F                     _num_of_bat_cells:
  1349                           	opt stack 0
  1350  00002F                     	ds	2
  1351  000031                     _saved_hours_counter:
  1352                           	opt stack 0
  1353  000031                     	ds	2
  1354  000033                     _stat:
  1355                           	opt stack 0
  1356  000033                     	ds	2
  1357  000035                     _test_time_count:
  1358                           	opt stack 0
  1359  000035                     	ds	2
  1360  000037                     _Count_1000m:
  1361                           	opt stack 0
  1362  000037                     	ds	1
  1363  000038                     _Count_100m:
  1364                           	opt stack 0
  1365  000038                     	ds	1
  1366  000039                     _Count_10Sec:
  1367                           	opt stack 0
  1368  000039                     	ds	1
  1369  00003A                     _Count_10m:
  1370                           	opt stack 0
  1371  00003A                     	ds	1
  1372  00003B                     _Count_10min:
  1373                           	opt stack 0
  1374  00003B                     	ds	1
  1375  00003C                     _Count_1hour:
  1376                           	opt stack 0
  1377  00003C                     	ds	1
  1378  00003D                     _Count_1min:
  1379                           	opt stack 0
  1380  00003D                     	ds	1
  1381  00003E                     _Count_500m:
  1382                           	opt stack 0
  1383  00003E                     	ds	1
  1384  00003F                     _Switch_stat:
  1385                           	opt stack 0
  1386  00003F                     	ds	1
  1387  000040                     _analog_delay_count:
  1388                           	opt stack 0
  1389  000040                     	ds	1
  1390  000041                     _batt_stat:
  1391                           	opt stack 0
  1392  000041                     	ds	1
  1393  000042                     _last_sw_stat:
  1394                           	opt stack 0
  1395  000042                     	ds	1
  1396  000043                     _main_led_stat:
  1397                           	opt stack 0
  1398  000043                     	ds	1
  1399  000044                     _number_of_recived_bytes:
  1400                           	opt stack 0
  1401  000044                     	ds	1
  1402  000045                     _red_led:
  1403                           	opt stack 0
  1404  000045                     	ds	1
  1405  000046                     _rx_pointer:
  1406                           	opt stack 0
  1407  000046                     	ds	1
  1408  000047                     _start_analog_sequence_flag:
  1409                           	opt stack 0
  1410  000047                     	ds	1
  1411  000048                     _start_sampling_flag:
  1412                           	opt stack 0
  1413  000048                     	ds	1
  1414  000049                     _sw_stat:
  1415                           	opt stack 0
  1416  000049                     	ds	1
  1417                           tblptru	equ	0xFF8
  1418                           postinc0	equ	0xFEE
  1419                           wreg	equ	0xFE8
  1420                           
  1421                           	psect	bssBANK0
  1422  000060                     __pbssBANK0:
  1423                           	opt stack 0
  1424  000060                     _rx_buufer:
  1425                           	opt stack 0
  1426  000060                     	ds	20
  1427  000074                     _working_timeout:
  1428                           	opt stack 0
  1429  000074                     	ds	4
  1430  000078                     _CLearn:
  1431                           	opt stack 0
  1432  000078                     	ds	2
  1433  00007A                     _CTLearn:
  1434                           	opt stack 0
  1435  00007A                     	ds	2
  1436  00007C                     _GREEN_LED_10mS_Timer:
  1437                           	opt stack 0
  1438  00007C                     	ds	2
  1439  00007E                     _ORANGE_LED_10mS_Timer:
  1440                           	opt stack 0
  1441  00007E                     	ds	2
  1442  000080                     _RED_LED_10mS_Timer:
  1443                           	opt stack 0
  1444  000080                     	ds	2
  1445  000082                     _Vbat_ADC_val_accum:
  1446                           	opt stack 0
  1447  000082                     	ds	2
  1448  000084                     _Vin_ADC_accum:
  1449                           	opt stack 0
  1450  000084                     	ds	2
  1451  000086                     _WDT_cnter:
  1452                           	opt stack 0
  1453  000086                     	ds	2
  1454  000088                     _bat_is_disconnected_voltage:
  1455                           	opt stack 0
  1456  000088                     	ds	2
  1457  00008A                     _bat_is_shorted_voltage:
  1458                           	opt stack 0
  1459  00008A                     	ds	2
  1460  00008C                     _batt_full_voltage:
  1461                           	opt stack 0
  1462  00008C                     	ds	2
  1463  00008E                     _batt_voltage:
  1464                           	opt stack 0
  1465  00008E                     	ds	2
  1466  000090                     _blink_sec_count:
  1467                           	opt stack 0
  1468  000090                     	ds	2
  1469  000092                     _exit_sleep_count:
  1470                           	opt stack 0
  1471  000092                     	ds	2
  1472  000094                     _g:
  1473                           	opt stack 0
  1474  000094                     	ds	2
  1475  000096                     _grid_power_high_voltage:
  1476                           	opt stack 0
  1477  000096                     	ds	2
  1478  000098                     _hour_counter:
  1479                           	opt stack 0
  1480  000098                     	ds	2
  1481  00009A                     _led_off_bat_voltage:
  1482                           	opt stack 0
  1483  00009A                     	ds	2
  1484  00009C                     _led_on_bat_voltage:
  1485                           	opt stack 0
  1486  00009C                     	ds	2
  1487  00009E                     _long_press_time:
  1488                           	opt stack 0
  1489  00009E                     	ds	2
  1490  0000A0                     _long_time_test_pass:
  1491                           	opt stack 0
  1492  0000A0                     	ds	2
  1493  0000A2                     _min_bat_voltage_for_test:
  1494                           	opt stack 0
  1495  0000A2                     	ds	2
  1496  0000A4                     _min_bat_voltage_normal_cahrging:
  1497                           	opt stack 0
  1498  0000A4                     	ds	2
  1499  0000A6                     _previous_charge_stat:
  1500                           	opt stack 0
  1501  0000A6                     	ds	2
  1502  0000A8                     _previous_trickle_stat:
  1503                           	opt stack 0
  1504  0000A8                     	ds	2
  1505  0000AA                     _saved_error_buzzer_count:
  1506                           	opt stack 0
  1507  0000AA                     	ds	2
  1508  0000AC                     _short_press_time_max:
  1509                           	opt stack 0
  1510  0000AC                     	ds	2
  1511  0000AE                     _short_press_time_min:
  1512                           	opt stack 0
  1513  0000AE                     	ds	2
  1514  0000B0                     _short_time_test_pass:
  1515                           	opt stack 0
  1516  0000B0                     	ds	2
  1517  0000B2                     _shorted_bat_voltage:
  1518                           	opt stack 0
  1519  0000B2                     	ds	2
  1520  0000B4                     _solar_cell_voltage:
  1521                           	opt stack 0
  1522  0000B4                     	ds	2
  1523  0000B6                     _tempa:
  1524                           	opt stack 0
  1525  0000B6                     	ds	2
  1526  0000B8                     _test_led_time_count:
  1527                           	opt stack 0
  1528  0000B8                     	ds	2
  1529  0000BA                     _test_sw_count:
  1530                           	opt stack 0
  1531  0000BA                     	ds	2
  1532  0000BC                     _time_to_pass_test:
  1533                           	opt stack 0
  1534  0000BC                     	ds	2
  1535  0000BE                     _tmpI:
  1536                           	opt stack 0
  1537  0000BE                     	ds	2
  1538  0000C0                     _total_bat_is_disconnected_voltage:
  1539                           	opt stack 0
  1540  0000C0                     	ds	2
  1541  0000C2                     _total_batt_full_voltage:
  1542                           	opt stack 0
  1543  0000C2                     	ds	2
  1544  0000C4                     _total_led_off_bat_voltage:
  1545                           	opt stack 0
  1546  0000C4                     	ds	2
  1547  0000C6                     _total_led_on_bat_voltage:
  1548                           	opt stack 0
  1549  0000C6                     	ds	2
  1550  0000C8                     _total_min_bat_voltage_normal_cahrging:
  1551                           	opt stack 0
  1552  0000C8                     	ds	2
  1553  0000CA                     _total_shorted_bat_voltage:
  1554                           	opt stack 0
  1555  0000CA                     	ds	2
  1556  0000CC                     _unit_ID:
  1557                           	opt stack 0
  1558  0000CC                     	ds	2
  1559  0000CE                     _week_in_houres:
  1560                           	opt stack 0
  1561  0000CE                     	ds	2
  1562  0000D0                     _year_time:
  1563                           	opt stack 0
  1564  0000D0                     	ds	2
  1565  0000D2                     _BuzzTimer:
  1566                           	opt stack 0
  1567  0000D2                     	ds	1
  1568  0000D3                     _FLearn:
  1569                           	opt stack 0
  1570  0000D3                     	ds	1
  1571  0000D4                     _Learn_Window:
  1572                           	opt stack 0
  1573  0000D4                     	ds	1
  1574  0000D5                     _Sync_Last:
  1575                           	opt stack 0
  1576  0000D5                     	ds	1
  1577  0000D6                     _a:
  1578                           	opt stack 0
  1579  0000D6                     	ds	1
  1580  0000D7                     _analog_samples_count:
  1581                           	opt stack 0
  1582  0000D7                     	ds	1
  1583  0000D8                     _charging_stat:
  1584                           	opt stack 0
  1585  0000D8                     	ds	1
  1586  0000D9                     _curent_save_position:
  1587                           	opt stack 0
  1588  0000D9                     	ds	1
  1589  0000DA                     _dummy:
  1590                           	opt stack 0
  1591  0000DA                     	ds	1
  1592  0000DB                     _enable_sending_data:
  1593                           	opt stack 0
  1594  0000DB                     	ds	1
  1595  0000DC                     _eraze_transmiters_cnt:
  1596                           	opt stack 0
  1597  0000DC                     	ds	1
  1598  0000DD                     _error_buzzer_count:
  1599                           	opt stack 0
  1600  0000DD                     	ds	1
  1601  0000DE                     _green_led:
  1602                           	opt stack 0
  1603  0000DE                     	ds	1
  1604  0000DF                     _i:
  1605                           	opt stack 0
  1606  0000DF                     	ds	1
  1607  0000E0                     _last_main_led_stat:
  1608                           	opt stack 0
  1609  0000E0                     	ds	1
  1610  0000E1                     _lrn_sw_presed_on_remote:
  1611                           	opt stack 0
  1612  0000E1                     	ds	1
  1613  0000E2                     _msec100buzz:
  1614                           	opt stack 0
  1615  0000E2                     	ds	1
  1616  0000E3                     _normal_charging:
  1617                           	opt stack 0
  1618  0000E3                     	ds	1
  1619  0000E4                     _power_fail_count:
  1620                           	opt stack 0
  1621  0000E4                     	ds	1
  1622  0000E5                     _power_stat:
  1623                           	opt stack 0
  1624  0000E5                     	ds	1
  1625  0000E6                     _rx_timeout:
  1626                           	opt stack 0
  1627  0000E6                     	ds	1
  1628  0000E7                     _second_sample_count:
  1629                           	opt stack 0
  1630  0000E7                     	ds	1
  1631  0000E8                     _sw_direction:
  1632                           	opt stack 0
  1633  0000E8                     	ds	1
  1634  0000E9                     _trickl_charging:
  1635                           	opt stack 0
  1636  0000E9                     	ds	1
  1637  0000EA                     _unit_type:
  1638                           	opt stack 0
  1639  0000EA                     	ds	1
  1640                           tblptru	equ	0xFF8
  1641                           postinc0	equ	0xFEE
  1642                           wreg	equ	0xFE8
  1643                           
  1644                           	psect	bssBANK1
  1645  000115                     __pbssBANK1:
  1646                           	opt stack 0
  1647  000115                     _data_buff:
  1648                           	opt stack 0
  1649  000115                     	ds	20
  1650                           tblptru	equ	0xFF8
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           
  1654                           	psect	cstackBANK1
  1655  000100                     __pcstackBANK1:
  1656                           	opt stack 0
  1657  000100                     printf@idx:
  1658                           	opt stack 0
  1659                           
  1660                           ; 1 bytes @ 0x0
  1661  000100                     	ds	1
  1662  000101                     printf@cp:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x1
  1666  000101                     	ds	2
  1667  000103                     _printf$1564:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0x3
  1671  000103                     	ds	2
  1672  000105                     _printf$1565:
  1673                           	opt stack 0
  1674                           
  1675                           ; 2 bytes @ 0x5
  1676  000105                     	ds	2
  1677  000107                     _printf$1571:
  1678                           	opt stack 0
  1679                           
  1680                           ; 2 bytes @ 0x7
  1681  000107                     	ds	2
  1682  000109                     printf@len:
  1683                           	opt stack 0
  1684                           
  1685                           ; 2 bytes @ 0x9
  1686  000109                     	ds	2
  1687  00010B                     printf@ap:
  1688                           	opt stack 0
  1689                           
  1690                           ; 2 bytes @ 0xB
  1691  00010B                     	ds	2
  1692  00010D                     printf@val:
  1693                           	opt stack 0
  1694                           
  1695                           ; 2 bytes @ 0xD
  1696  00010D                     	ds	2
  1697  00010F                     printf@prec:
  1698                           	opt stack 0
  1699                           
  1700                           ; 1 bytes @ 0xF
  1701  00010F                     	ds	1
  1702  000110                     printf@width:
  1703                           	opt stack 0
  1704                           
  1705                           ; 2 bytes @ 0x10
  1706  000110                     	ds	2
  1707  000112                     printf@c:
  1708                           	opt stack 0
  1709                           
  1710                           ; 1 bytes @ 0x12
  1711  000112                     	ds	1
  1712  000113                     printf@flag:
  1713                           	opt stack 0
  1714                           
  1715                           ; 2 bytes @ 0x13
  1716  000113                     	ds	2
  1717                           tblptru	equ	0xFF8
  1718                           postinc0	equ	0xFEE
  1719                           wreg	equ	0xFE8
  1720                           
  1721                           	psect	cstackCOMRAM
  1722  000001                     __pcstackCOMRAM:
  1723                           	opt stack 0
  1724  000001                     ??_ISR:
  1725  000001                     
  1726                           ; 0 bytes @ 0x0
  1727  000001                     	ds	15
  1728  000010                     ??_isdigit:
  1729  000010                     ?_readA2D:
  1730                           	opt stack 0
  1731  000010                     ?___wmul:
  1732                           	opt stack 0
  1733  000010                     ?___lwdiv:
  1734                           	opt stack 0
  1735  000010                     DelayMs@cnt:
  1736                           	opt stack 0
  1737  000010                     buzz_off@duration:
  1738                           	opt stack 0
  1739  000010                     putch@tx_byte:
  1740                           	opt stack 0
  1741  000010                     Read_b_eep@badd:
  1742                           	opt stack 0
  1743  000010                     Write_b_eep@badd:
  1744                           	opt stack 0
  1745  000010                     ___wmul@multiplier:
  1746                           	opt stack 0
  1747  000010                     ___lwdiv@dividend:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0xF
  1751  000010                     	ds	1
  1752  000011                     DelayMs@i:
  1753                           	opt stack 0
  1754  000011                     _isdigit$2006:
  1755                           	opt stack 0
  1756                           
  1757                           ; 1 bytes @ 0x10
  1758  000011                     	ds	1
  1759  000012                     ??_readA2D:
  1760  000012                     ?_load_int_from_eeprom:
  1761                           	opt stack 0
  1762  000012                     DelayMs@_dcnt:
  1763                           	opt stack 0
  1764  000012                     Write_b_eep@bdat:
  1765                           	opt stack 0
  1766  000012                     isdigit@c:
  1767                           	opt stack 0
  1768  000012                     ___wmul@multiplicand:
  1769                           	opt stack 0
  1770  000012                     ___lwdiv@divisor:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0x11
  1774  000012                     	ds	1
  1775  000013                     Write_b_eep@GIE_BIT_VAL:
  1776                           	opt stack 0
  1777  000013                     blink_RED_LED@timeMs:
  1778                           	opt stack 0
  1779                           
  1780                           ; 2 bytes @ 0x12
  1781  000013                     	ds	1
  1782  000014                     ??_load_int_from_eeprom:
  1783  000014                     readA2D@channel:
  1784                           	opt stack 0
  1785  000014                     ___lwdiv@counter:
  1786                           	opt stack 0
  1787  000014                     save_int_to_eeprom@data:
  1788                           	opt stack 0
  1789  000014                     ___wmul@product:
  1790                           	opt stack 0
  1791                           
  1792                           ; 2 bytes @ 0x13
  1793  000014                     	ds	1
  1794  000015                     readA2D@_dcnt:
  1795                           	opt stack 0
  1796  000015                     blink_RED_LED@blinks:
  1797                           	opt stack 0
  1798  000015                     load_int_from_eeprom@a:
  1799                           	opt stack 0
  1800  000015                     ___lwdiv@quotient:
  1801                           	opt stack 0
  1802                           
  1803                           ; 2 bytes @ 0x14
  1804  000015                     	ds	1
  1805  000016                     readA2D@_dcnt_180:
  1806                           	opt stack 0
  1807  000016                     blink_RED_LED@i:
  1808                           	opt stack 0
  1809  000016                     buzz_on@duration:
  1810                           	opt stack 0
  1811  000016                     save_int_to_eeprom@add:
  1812                           	opt stack 0
  1813                           
  1814                           ; 1 bytes @ 0x15
  1815  000016                     	ds	1
  1816  000017                     ?___lwmod:
  1817                           	opt stack 0
  1818  000017                     readA2D@i:
  1819                           	opt stack 0
  1820  000017                     buzz_on@temp_GIE:
  1821                           	opt stack 0
  1822  000017                     load_int_from_eeprom@add:
  1823                           	opt stack 0
  1824  000017                     ___lwmod@dividend:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x16
  1828  000017                     	ds	1
  1829  000018                     buzz_on@_dcnt:
  1830                           	opt stack 0
  1831  000018                     readA2D@A2D_Result:
  1832                           	opt stack 0
  1833  000018                     eeprom_time_delay@houres:
  1834                           	opt stack 0
  1835                           
  1836                           ; 2 bytes @ 0x17
  1837  000018                     	ds	1
  1838  000019                     buzz_on@_dcnt_864:
  1839                           	opt stack 0
  1840  000019                     ___lwmod@divisor:
  1841                           	opt stack 0
  1842                           
  1843                           ; 2 bytes @ 0x18
  1844  000019                     	ds	1
  1845  00001A                     ??_eeprom_time_delay:
  1846  00001A                     buzz_on@calc_duration:
  1847                           	opt stack 0
  1848                           
  1849                           ; 2 bytes @ 0x19
  1850  00001A                     	ds	1
  1851  00001B                     ___lwmod@counter:
  1852                           	opt stack 0
  1853                           
  1854                           ; 1 bytes @ 0x1A
  1855  00001B                     	ds	1
  1856  00001C                     ?_printf:
  1857                           	opt stack 0
  1858  00001C                     activate_buzzer@On_duration:
  1859                           	opt stack 0
  1860  00001C                     eeprom_time_delay@temp:
  1861                           	opt stack 0
  1862  00001C                     printf@f:
  1863                           	opt stack 0
  1864                           
  1865                           ; 2 bytes @ 0x1B
  1866  00001C                     	ds	1
  1867  00001D                     activate_buzzer@Off_duration:
  1868                           	opt stack 0
  1869                           
  1870                           ; 1 bytes @ 0x1C
  1871  00001D                     	ds	1
  1872  00001E                     activate_buzzer@beeps:
  1873                           	opt stack 0
  1874                           
  1875                           ; 1 bytes @ 0x1D
  1876  00001E                     	ds	1
  1877  00001F                     blink_GREEN_LED_and_RED_LED_and_BUZZER@timeMs:
  1878                           	opt stack 0
  1879                           
  1880                           ; 2 bytes @ 0x1E
  1881  00001F                     	ds	2
  1882  000021                     blink_GREEN_LED_and_RED_LED_and_BUZZER@blinks:
  1883                           	opt stack 0
  1884                           
  1885                           ; 1 bytes @ 0x20
  1886  000021                     	ds	1
  1887  000022                     ??_printf:
  1888  000022                     blink_GREEN_LED_and_RED_LED_and_BUZZER@i:
  1889                           	opt stack 0
  1890                           
  1891                           ; 1 bytes @ 0x21
  1892  000022                     	ds	4
  1893  000026                     ??_stby_stat_hendler:
  1894  000026                     ??_work_stat_hendler:
  1895  000026                     ??_test_stat_hendler:
  1896  000026                     ??_error_stat_hendler:
  1897  000026                     
  1898                           ; 0 bytes @ 0x25
  1899  000026                     	ds	2
  1900  000028                     ??_main:
  1901                           
  1902                           ; 0 bytes @ 0x27
  1903  000028                     	ds	1
  1904                           tblptru	equ	0xFF8
  1905                           postinc0	equ	0xFEE
  1906                           wreg	equ	0xFE8
  1907                           
  1908 ;;
  1909 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1910 ;;
  1911 ;; *************** function _main *****************
  1912 ;; Defined at:
  1913 ;;		line 93 in file "../main.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;		None
  1916 ;; Auto vars:     Size  Location     Type
  1917 ;;		None
  1918 ;; Return value:  Size  Location     Type
  1919 ;;		None               void
  1920 ;; Registers used:
  1921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1922 ;; Tracked objects:
  1923 ;;		On entry : 0/0
  1924 ;;		On exit  : 0/0
  1925 ;;		Unchanged: 0/0
  1926 ;; Data sizes:     COMRAM   BANK0   BANK1
  1927 ;;      Params:         0       0       0
  1928 ;;      Locals:         0       0       0
  1929 ;;      Temps:          1       0       0
  1930 ;;      Totals:         1       0       0
  1931 ;;Total ram usage:        1 bytes
  1932 ;; Hardware stack levels required when called:    6
  1933 ;; This function calls:
  1934 ;;		_Charging_handler
  1935 ;;		_DelayMs
  1936 ;;		___lwmod
  1937 ;;		_blink_GREEN_LED_and_RED_LED_and_BUZZER
  1938 ;;		_display_voltage
  1939 ;;		_eeprom_data_refresh
  1940 ;;		_error_stat_hendler
  1941 ;;		_init_USART
  1942 ;;		_init_system
  1943 ;;		_load_int_from_eeprom
  1944 ;;		_long_test_stat_hendler
  1945 ;;		_output_hendler
  1946 ;;		_printf
  1947 ;;		_readA2D
  1948 ;;		_save_int_to_eeprom
  1949 ;;		_short_test_stat_hendler
  1950 ;;		_sleep_stat_hendler
  1951 ;;		_stby_stat_hendler
  1952 ;;		_test_stat_hendler
  1953 ;;		_vbat_check
  1954 ;;		_work_stat_hendler
  1955 ;; This function is called by:
  1956 ;;		Startup code after reset
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           	psect	text0
  1961  000B28                     __ptext0:
  1962                           	opt stack 0
  1963  000B28                     _main:
  1964                           	opt stack 25
  1965                           
  1966                           ;main.c: 95: OSCCON = 0b01010000;
  1967                           
  1968                           ;incstack = 0
  1969  000B28  0E50               	movlw	80
  1970  000B2A  6ED3               	movwf	4051,c	;volatile
  1971                           
  1972                           ;main.c: 96: init_system( );
  1973  000B2C  EC97  F00B         	call	_init_system	;wreg free
  1974                           
  1975                           ;main.c: 99: init_USART( );
  1976  000B30  ECA6  F00D         	call	_init_USART	;wreg free
  1977                           
  1978                           ;main.c: 106: test_sw_count = 0;
  1979  000B34  0E00               	movlw	0
  1980  000B36  0100               	movlb	0	; () banked
  1981  000B38  6FBB               	movwf	(_test_sw_count+1)& (0+255),b
  1982  000B3A  0E00               	movlw	0
  1983  000B3C  6FBA               	movwf	_test_sw_count& (0+255),b
  1984                           
  1985                           ;main.c: 107: GRID_Voltage_ADC_val = 0;
  1986  000B3E  0E00               	movlw	0
  1987  000B40  6E2A               	movwf	_GRID_Voltage_ADC_val+1,c
  1988  000B42  0E00               	movlw	0
  1989  000B44  6E29               	movwf	_GRID_Voltage_ADC_val,c
  1990                           
  1991                           ;main.c: 108: Vbat_ADC_val = 0;
  1992  000B46  0E00               	movlw	0
  1993  000B48  6E2C               	movwf	_Vbat_ADC_val+1,c
  1994  000B4A  0E00               	movlw	0
  1995  000B4C  6E2B               	movwf	_Vbat_ADC_val,c
  1996                           
  1997                           ;main.c: 109: test_faild_flag = 0;
  1998  000B4E  0E00               	movlw	0
  1999  000B50  0100               	movlb	0	; () banked
  2000  000B52  6FF0               	movwf	(globals@test_faild_flag+1)& (0+255),b
  2001  000B54  0E00               	movlw	0
  2002  000B56  6FEF               	movwf	globals@test_faild_flag& (0+255),b
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;main.c: 110: LATCbits.LATC1 = 1;
  2006  000B58  828B               	bsf	3979,1,c	;volatile
  2007                           
  2008                           ; BSR set to: 0
  2009                           ;main.c: 114: printf( "\n\r~~Sys Started~~~" );
  2010  000B5A  0E04               	movlw	low STR_43
  2011  000B5C  6E1C               	movwf	printf@f,c
  2012  000B5E  0E1F               	movlw	high STR_43
  2013  000B60  6E1D               	movwf	printf@f+1,c
  2014  000B62  ECE7  F000         	call	_printf	;wreg free
  2015                           
  2016                           ;main.c: 115: printf( "\n\rRCON = %x " ,RCON );
  2017  000B66  0EDD               	movlw	low STR_44
  2018  000B68  6E1C               	movwf	printf@f,c
  2019  000B6A  0E1F               	movlw	high STR_44
  2020  000B6C  6E1D               	movwf	printf@f+1,c
  2021  000B6E  CFD0 F01E          	movff	4048,?_printf+2	;volatile
  2022  000B72  6A1F               	clrf	?_printf+3,c
  2023  000B74  ECE7  F000         	call	_printf	;wreg free
  2024                           
  2025                           ;main.c: 117: eeprom_data_refresh( );
  2026  000B78  ECBD  F007         	call	_eeprom_data_refresh	;wreg free
  2027                           
  2028                           ;main.c: 119: sw_stat = SLEEP;
  2029  000B7C  0E01               	movlw	1
  2030  000B7E  6E49               	movwf	_sw_stat,c
  2031                           
  2032                           ;main.c: 120: TRISC0 = 1;
  2033  000B80  8094               	bsf	3988,0,c	;volatile
  2034                           
  2035                           ;main.c: 121: PEIE = 1;
  2036  000B82  8CF2               	bsf	intcon,6,c	;volatile
  2037                           
  2038                           ;main.c: 122: GIE = 1;
  2039  000B84  8EF2               	bsf	intcon,7,c	;volatile
  2040                           
  2041                           ;main.c: 125: blink_GREEN_LED_and_RED_LED_and_BUZZER( 3, 40 );
  2042  000B86  0E00               	movlw	0
  2043  000B88  6E20               	movwf	blink_GREEN_LED_and_RED_LED_and_BUZZER@timeMs+1,c
  2044  000B8A  0E28               	movlw	40
  2045  000B8C  6E1F               	movwf	blink_GREEN_LED_and_RED_LED_and_BUZZER@timeMs,c
  2046  000B8E  0E03               	movlw	3
  2047  000B90  ECF6  F00C         	call	_blink_GREEN_LED_and_RED_LED_and_BUZZER
  2048                           
  2049                           ;main.c: 134: start_sampling_flag = 1;
  2050  000B94  0E01               	movlw	1
  2051  000B96  6E48               	movwf	_start_sampling_flag,c
  2052  000B98  D000               	goto	l5135
  2053  000B9A                     l5135:
  2054                           
  2055                           ;main.c: 150: {
  2056                           ;main.c: 152: if ( stat.msec5 )
  2057  000B9A  A033               	btfss	_stat,0,c
  2058  000B9C  D055               	goto	l5165
  2059                           
  2060                           ;main.c: 153: {
  2061                           ;main.c: 154: stat.msec5 = 0;
  2062  000B9E  9033               	bcf	_stat,0,c
  2063  000BA0  0004               	clrwdt		;# 
  2064                           
  2065                           ;main.c: 156: if ( start_sampling_flag )
  2066  000BA2  5048               	movf	_start_sampling_flag,w,c
  2067  000BA4  B4D8               	btfsc	status,2,c
  2068  000BA6  D050               	goto	l5165
  2069                           
  2070                           ;main.c: 157: {
  2071                           ;main.c: 158: start_sampling_flag = 0;
  2072  000BA8  0E00               	movlw	0
  2073  000BAA  6E48               	movwf	_start_sampling_flag,c
  2074                           
  2075                           ;main.c: 159: GRID_Voltage_ADC_val = 0;
  2076  000BAC  0E00               	movlw	0
  2077  000BAE  6E2A               	movwf	_GRID_Voltage_ADC_val+1,c
  2078  000BB0  0E00               	movlw	0
  2079  000BB2  6E29               	movwf	_GRID_Voltage_ADC_val,c
  2080                           
  2081                           ;main.c: 160: Vbat_ADC_val = 0;
  2082  000BB4  0E00               	movlw	0
  2083  000BB6  6E2C               	movwf	_Vbat_ADC_val+1,c
  2084  000BB8  0E00               	movlw	0
  2085  000BBA  6E2B               	movwf	_Vbat_ADC_val,c
  2086                           
  2087                           ;main.c: 163: DelayMs(1);
  2088  000BBC  0E01               	movlw	1
  2089  000BBE  EC65  F00D         	call	_DelayMs
  2090                           
  2091                           ;main.c: 165: while ( second_sample_count < 40 )
  2092  000BC2  D02E               	goto	l5161
  2093  000BC4                     l5145:
  2094                           
  2095                           ;main.c: 166: {
  2096                           ;main.c: 167: Vin_ADC_accum = readA2D( 1 );
  2097  000BC4  0E01               	movlw	1
  2098  000BC6  ECD4  F00A         	call	_readA2D
  2099  000BCA  C010  F084         	movff	?_readA2D,_Vin_ADC_accum
  2100  000BCE  C011  F085         	movff	?_readA2D+1,_Vin_ADC_accum+1
  2101                           
  2102                           ;main.c: 168: if ( Vin_ADC_accum > GRID_Voltage_ADC_val )
  2103  000BD2  0100               	movlb	0	; () banked
  2104  000BD4  5184               	movf	_Vin_ADC_accum& (0+255),w,b
  2105  000BD6  5C29               	subwf	_GRID_Voltage_ADC_val,w,c
  2106  000BD8  0100               	movlb	0	; () banked
  2107  000BDA  5185               	movf	(_Vin_ADC_accum+1)& (0+255),w,b
  2108  000BDC  582A               	subwfb	_GRID_Voltage_ADC_val+1,w,c
  2109  000BDE  B0D8               	btfsc	status,0,c
  2110  000BE0  D005               	goto	l5151
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;main.c: 169: GRID_Voltage_ADC_val = Vin_ADC_accum;
  2114  000BE2  C084  F029         	movff	_Vin_ADC_accum,_GRID_Voltage_ADC_val
  2115  000BE6  C085  F02A         	movff	_Vin_ADC_accum+1,_GRID_Voltage_ADC_val+1
  2116  000BEA  D000               	goto	l5151
  2117  000BEC                     l5151:
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;main.c: 171: Vbat_ADC_val_accum = readA2D( 0 );
  2121  000BEC  0E00               	movlw	0
  2122  000BEE  ECD4  F00A         	call	_readA2D
  2123  000BF2  C010  F082         	movff	?_readA2D,_Vbat_ADC_val_accum
  2124  000BF6  C011  F083         	movff	?_readA2D+1,_Vbat_ADC_val_accum+1
  2125                           
  2126                           ;main.c: 172: if ( Vbat_ADC_val_accum > Vbat_ADC_val )
  2127  000BFA  0100               	movlb	0	; () banked
  2128  000BFC  5182               	movf	_Vbat_ADC_val_accum& (0+255),w,b
  2129  000BFE  5C2B               	subwf	_Vbat_ADC_val,w,c
  2130  000C00  0100               	movlb	0	; () banked
  2131  000C02  5183               	movf	(_Vbat_ADC_val_accum+1)& (0+255),w,b
  2132  000C04  582C               	subwfb	_Vbat_ADC_val+1,w,c
  2133  000C06  B0D8               	btfsc	status,0,c
  2134  000C08  D005               	goto	l5157
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;main.c: 173: Vbat_ADC_val = Vbat_ADC_val_accum;
  2138  000C0A  C082  F02B         	movff	_Vbat_ADC_val_accum,_Vbat_ADC_val
  2139  000C0E  C083  F02C         	movff	_Vbat_ADC_val_accum+1,_Vbat_ADC_val+1
  2140  000C12  D000               	goto	l5157
  2141  000C14                     l5157:
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;main.c: 174: DelayMs( 1 );
  2145  000C14  0E01               	movlw	1
  2146  000C16  EC65  F00D         	call	_DelayMs
  2147                           
  2148                           ;main.c: 175: second_sample_count++;
  2149  000C1A  0100               	movlb	0	; () banked
  2150  000C1C  2BE7               	incf	_second_sample_count& (0+255),f,b
  2151  000C1E  D000               	goto	l5161
  2152  000C20                     l5161:
  2153  000C20  0E27               	movlw	39
  2154  000C22  0100               	movlb	0	; () banked
  2155  000C24  65E7               	cpfsgt	_second_sample_count& (0+255),b
  2156  000C26  D7CE               	goto	l5145
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;main.c: 176: }
  2160                           ;main.c: 180: LATCbits.LATC2 = previous_charge_stat;
  2161  000C28  0100               	movlb	0	; () banked
  2162  000C2A  B1A6               	btfsc	_previous_charge_stat& (0+255),0,b
  2163  000C2C  D002               	bra	u4835
  2164  000C2E  948B               	bcf	3979,2,c	;volatile
  2165  000C30  D001               	bra	u4836
  2166  000C32                     u4835:
  2167  000C32  848B               	bsf	3979,2,c	;volatile
  2168  000C34                     u4836:
  2169                           
  2170                           ;main.c: 182: LATCbits.LATC4 = previous_trickle_stat;
  2171  000C34  0100               	movlb	0	; () banked
  2172  000C36  B1A8               	btfsc	_previous_trickle_stat& (0+255),0,b
  2173  000C38  D002               	bra	u4845
  2174  000C3A  988B               	bcf	3979,4,c	;volatile
  2175  000C3C  D001               	bra	u4846
  2176  000C3E                     u4845:
  2177  000C3E  888B               	bsf	3979,4,c	;volatile
  2178  000C40                     u4846:
  2179                           
  2180                           ;main.c: 183: second_sample_count = 0;
  2181  000C40  0E00               	movlw	0
  2182  000C42  0100               	movlb	0	; () banked
  2183  000C44  6FE7               	movwf	_second_sample_count& (0+255),b
  2184                           
  2185                           ; BSR set to: 0
  2186  000C46  D000               	goto	l5165
  2187  000C48                     l5165:
  2188                           
  2189                           ;main.c: 184: }
  2190                           ;main.c: 185: }
  2191                           ;main.c: 190: if ( stat.msec10 )
  2192  000C48  A233               	btfss	_stat,1,c
  2193  000C4A  D03E               	goto	l5199
  2194                           
  2195                           ;main.c: 191: {
  2196                           ;main.c: 192: stat.msec10 = 0;
  2197  000C4C  9233               	bcf	_stat,1,c
  2198                           
  2199                           ;main.c: 194: if ( start_analog_sequence_flag )
  2200  000C4E  5047               	movf	_start_analog_sequence_flag,w,c
  2201  000C50  B4D8               	btfsc	status,2,c
  2202  000C52  D00C               	goto	l5177
  2203                           
  2204                           ;main.c: 195: {
  2205                           ;main.c: 196: if ( analog_delay_count < 6 )
  2206  000C54  0E06               	movlw	6
  2207  000C56  6040               	cpfslt	_analog_delay_count,c
  2208  000C58  D002               	goto	l5175
  2209                           
  2210                           ;main.c: 197: analog_delay_count++;
  2211  000C5A  2A40               	incf	_analog_delay_count,f,c
  2212  000C5C  D007               	goto	l5177
  2213  000C5E                     l5175:
  2214                           
  2215                           ;main.c: 198: else
  2216                           ;main.c: 199: {
  2217                           ;main.c: 200: start_analog_sequence_flag = 0;
  2218  000C5E  0E00               	movlw	0
  2219  000C60  6E47               	movwf	_start_analog_sequence_flag,c
  2220                           
  2221                           ;main.c: 201: analog_delay_count = 0;
  2222  000C62  0E00               	movlw	0
  2223  000C64  6E40               	movwf	_analog_delay_count,c
  2224                           
  2225                           ;main.c: 202: start_sampling_flag = 1;
  2226  000C66  0E01               	movlw	1
  2227  000C68  6E48               	movwf	_start_sampling_flag,c
  2228  000C6A  D000               	goto	l5177
  2229  000C6C                     l5177:
  2230                           
  2231                           ;main.c: 203: }
  2232                           ;main.c: 204: }
  2233                           ;main.c: 206: if( !PORTBbits.RB0 )
  2234  000C6C  B081               	btfsc	3969,0,c	;volatile
  2235  000C6E  D019               	goto	l5191
  2236                           
  2237                           ;main.c: 207: {
  2238                           ;main.c: 209: test_sw_count++;
  2239  000C70  0100               	movlb	0	; () banked
  2240  000C72  4BBA               	infsnz	_test_sw_count& (0+255),f,b
  2241  000C74  2BBB               	incf	(_test_sw_count+1)& (0+255),f,b
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;main.c: 210: if( test_sw_count >= short_press_time_min )
  2245  000C76  0100               	movlb	0	; () banked
  2246  000C78  51AE               	movf	_short_press_time_min& (0+255),w,b
  2247  000C7A  0100               	movlb	0	; () banked
  2248  000C7C  5DBA               	subwf	_test_sw_count& (0+255),w,b
  2249  000C7E  0100               	movlb	0	; () banked
  2250  000C80  51AF               	movf	(_short_press_time_min+1)& (0+255),w,b
  2251  000C82  0100               	movlb	0	; () banked
  2252  000C84  59BB               	subwfb	(_test_sw_count+1)& (0+255),w,b
  2253  000C86  A0D8               	btfss	status,0,c
  2254  000C88  D01F               	goto	l5199
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;main.c: 211: {
  2258                           ;main.c: 212: if(Switch_stat == SW_RELEASED)
  2259  000C8A  503F               	movf	_Switch_stat,w,c
  2260  000C8C  A4D8               	btfss	status,2,c
  2261  000C8E  D002               	goto	l5187
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;main.c: 213: stat.msec500 = 1;
  2265  000C90  8633               	bsf	_stat,3,c
  2266  000C92  D000               	goto	l5187
  2267  000C94                     l5187:
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;main.c: 215: Switch_stat = SHORT_PRESS_DETECTED;
  2271  000C94  0E01               	movlw	1
  2272  000C96  6E3F               	movwf	_Switch_stat,c
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;main.c: 216: test_sw_count = short_press_time_min;
  2276  000C98  C0AE  F0BA         	movff	_short_press_time_min,_test_sw_count
  2277  000C9C  C0AF  F0BB         	movff	_short_press_time_min+1,_test_sw_count+1
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;main.c: 217: }
  2281                           ;main.c: 218: }
  2282  000CA0  D013               	goto	l5199
  2283  000CA2                     l5191:
  2284                           
  2285                           ;main.c: 219: else
  2286                           ;main.c: 220: {
  2287                           ;main.c: 221: if( test_sw_count )
  2288  000CA2  0100               	movlb	0	; () banked
  2289  000CA4  51BA               	movf	_test_sw_count& (0+255),w,b
  2290  000CA6  0100               	movlb	0	; () banked
  2291  000CA8  11BB               	iorwf	(_test_sw_count+1)& (0+255),w,b
  2292  000CAA  B4D8               	btfsc	status,2,c
  2293  000CAC  D00D               	goto	l5199
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;main.c: 222: {
  2297                           ;main.c: 223: test_sw_count--;
  2298  000CAE  0100               	movlb	0	; () banked
  2299  000CB0  07BA               	decf	_test_sw_count& (0+255),f,b
  2300  000CB2  A0D8               	btfss	status,0,c
  2301  000CB4  07BB               	decf	(_test_sw_count+1)& (0+255),f,b
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;main.c: 224: {
  2305                           ;main.c: 225: if( !test_sw_count )
  2306  000CB6  0100               	movlb	0	; () banked
  2307  000CB8  51BA               	movf	_test_sw_count& (0+255),w,b
  2308  000CBA  0100               	movlb	0	; () banked
  2309  000CBC  11BB               	iorwf	(_test_sw_count+1)& (0+255),w,b
  2310  000CBE  A4D8               	btfss	status,2,c
  2311  000CC0  D003               	goto	l5199
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;main.c: 226: {
  2315                           ;main.c: 227: Switch_stat = SW_RELEASED;
  2316  000CC2  0E00               	movlw	0
  2317  000CC4  6E3F               	movwf	_Switch_stat,c
  2318                           
  2319                           ; BSR set to: 0
  2320                           
  2321                           ; BSR set to: 0
  2322                           
  2323                           ; BSR set to: 0
  2324  000CC6  D000               	goto	l5199
  2325  000CC8                     l5199:
  2326                           
  2327                           ;main.c: 228: }
  2328                           ;main.c: 229: }
  2329                           ;main.c: 230: }
  2330                           ;main.c: 231: }
  2331                           ;main.c: 253: }
  2332                           ;main.c: 255: if ( stat.msec100 )
  2333  000CC8  B433               	btfsc	_stat,2,c
  2334                           
  2335                           ;main.c: 256: {
  2336                           ;main.c: 257: stat.msec100 = 0;
  2337  000CCA  9433               	bcf	_stat,2,c
  2338                           
  2339                           ;main.c: 261: }
  2340                           ;main.c: 263: if ( stat.msec500 )
  2341  000CCC  A633               	btfss	_stat,3,c
  2342  000CCE  D04F               	goto	l5237
  2343                           
  2344                           ;main.c: 264: {
  2345                           ;main.c: 265: stat.msec500 = 0;
  2346  000CD0  9633               	bcf	_stat,3,c
  2347                           
  2348                           ;main.c: 267: previous_charge_stat = LATCbits.LATC2 ;
  2349  000CD2  A48B               	btfss	3979,2,c	;volatile
  2350  000CD4  D003               	goto	u4950
  2351  000CD6  6A28               	clrf	??_main& (0+255),c
  2352  000CD8  2A28               	incf	??_main& (0+255),f,c
  2353  000CDA  D001               	goto	u4958
  2354  000CDC                     u4950:
  2355  000CDC  6A28               	clrf	??_main& (0+255),c
  2356  000CDE                     u4958:
  2357  000CDE  5028               	movf	??_main,w,c
  2358  000CE0  0100               	movlb	0	; () banked
  2359  000CE2  6FA6               	movwf	_previous_charge_stat& (0+255),b
  2360  000CE4  6BA7               	clrf	(_previous_charge_stat+1)& (0+255),b
  2361                           
  2362                           ;main.c: 268: previous_trickle_stat = LATCbits.LATC4;
  2363  000CE6  A88B               	btfss	3979,4,c	;volatile
  2364  000CE8  D003               	goto	u4960
  2365  000CEA  6A28               	clrf	??_main& (0+255),c
  2366  000CEC  2A28               	incf	??_main& (0+255),f,c
  2367  000CEE  D001               	goto	u4968
  2368  000CF0                     u4960:
  2369  000CF0  6A28               	clrf	??_main& (0+255),c
  2370  000CF2                     u4968:
  2371  000CF2  5028               	movf	??_main,w,c
  2372  000CF4  0100               	movlb	0	; () banked
  2373  000CF6  6FA8               	movwf	_previous_trickle_stat& (0+255),b
  2374  000CF8  6BA9               	clrf	(_previous_trickle_stat+1)& (0+255),b
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;main.c: 269: LATCbits.LATC2 = 0;
  2378  000CFA  948B               	bcf	3979,2,c	;volatile
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;main.c: 270: LATCbits.LATC4 = 0;
  2382  000CFC  988B               	bcf	3979,4,c	;volatile
  2383                           
  2384                           ;main.c: 271: start_analog_sequence_flag = 1;
  2385  000CFE  0E01               	movlw	1
  2386  000D00  6E47               	movwf	_start_analog_sequence_flag,c
  2387                           
  2388                           ; BSR set to: 0
  2389                           ;main.c: 274: vbat_check();
  2390  000D02  EC89  F00A         	call	_vbat_check	;wreg free
  2391                           
  2392                           ;main.c: 275: Charging_handler();
  2393  000D06  EC39  F00A         	call	_Charging_handler	;wreg free
  2394                           
  2395                           ;main.c: 276: display_voltage();
  2396  000D0A  EC97  F00D         	call	_display_voltage	;wreg free
  2397                           
  2398                           ;main.c: 277: switch ( sw_stat )
  2399  000D0E  D015               	goto	l5233
  2400  000D10                     l5217:
  2401                           
  2402                           ;main.c: 280: sleep_stat_hendler( );
  2403  000D10  ECF5  F006         	call	_sleep_stat_hendler	;wreg free
  2404                           
  2405                           ;main.c: 281: break;
  2406  000D14  D029               	goto	l5235
  2407  000D16                     l5219:
  2408                           
  2409                           ;main.c: 283: stby_stat_hendler( );
  2410  000D16  EC1A  F00B         	call	_stby_stat_hendler	;wreg free
  2411                           
  2412                           ;main.c: 284: break;
  2413  000D1A  D026               	goto	l5235
  2414  000D1C                     l5221:
  2415                           
  2416                           ;main.c: 286: work_stat_hendler( );
  2417  000D1C  ECE2  F009         	call	_work_stat_hendler	;wreg free
  2418                           
  2419                           ;main.c: 287: break;
  2420  000D20  D023               	goto	l5235
  2421  000D22                     l5223:
  2422                           
  2423                           ;main.c: 289: test_stat_hendler( );
  2424  000D22  EC5B  F00B         	call	_test_stat_hendler	;wreg free
  2425                           
  2426                           ;main.c: 290: break;
  2427  000D26  D020               	goto	l5235
  2428  000D28                     l5225:
  2429                           
  2430                           ;main.c: 292: error_stat_hendler( );
  2431  000D28  EC88  F009         	call	_error_stat_hendler	;wreg free
  2432                           
  2433                           ;main.c: 293: break;
  2434  000D2C  D01D               	goto	l5235
  2435  000D2E                     l5227:
  2436                           
  2437                           ;main.c: 295: long_test_stat_hendler( );
  2438  000D2E  EC6B  F008         	call	_long_test_stat_hendler	;wreg free
  2439                           
  2440                           ;main.c: 296: break;
  2441  000D32  D01A               	goto	l5235
  2442  000D34                     l5229:
  2443                           
  2444                           ;main.c: 298: short_test_stat_hendler( );
  2445  000D34  ECFF  F008         	call	_short_test_stat_hendler	;wreg free
  2446                           
  2447                           ;main.c: 302: }
  2448                           
  2449                           ;main.c: 301: break;
  2450                           
  2451                           ;main.c: 300: default:
  2452                           
  2453                           ;main.c: 299: break;
  2454  000D38  D017               	goto	l5235
  2455  000D3A                     l5233:
  2456  000D3A  5049               	movf	_sw_stat,w,c
  2457                           
  2458                           ; Switch size 1, requested type "space"
  2459                           ; Number of cases is 7, Range of values is 1 to 7
  2460                           ; switch strategies available:
  2461                           ; Name         Instructions Cycles
  2462                           ; simple_byte           22    12 (average)
  2463                           ;	Chosen strategy is simple_byte
  2464  000D3C  0A01               	xorlw	1	; case 1
  2465  000D3E  B4D8               	btfsc	status,2,c
  2466  000D40  D7E7               	goto	l5217
  2467  000D42  0A03               	xorlw	3	; case 2
  2468  000D44  B4D8               	btfsc	status,2,c
  2469  000D46  D7E7               	goto	l5219
  2470  000D48  0A01               	xorlw	1	; case 3
  2471  000D4A  B4D8               	btfsc	status,2,c
  2472  000D4C  D7E7               	goto	l5221
  2473  000D4E  0A07               	xorlw	7	; case 4
  2474  000D50  B4D8               	btfsc	status,2,c
  2475  000D52  D7E7               	goto	l5223
  2476  000D54  0A01               	xorlw	1	; case 5
  2477  000D56  B4D8               	btfsc	status,2,c
  2478  000D58  D7E7               	goto	l5225
  2479  000D5A  0A03               	xorlw	3	; case 6
  2480  000D5C  B4D8               	btfsc	status,2,c
  2481  000D5E  D7E7               	goto	l5227
  2482  000D60  0A01               	xorlw	1	; case 7
  2483  000D62  B4D8               	btfsc	status,2,c
  2484  000D64  D7E7               	goto	l5229
  2485  000D66  D000               	goto	l5235
  2486  000D68                     l5235:
  2487                           
  2488                           ;main.c: 303: output_hendler( );
  2489  000D68  EC2D  F00C         	call	_output_hendler	;wreg free
  2490  000D6C  D000               	goto	l5237
  2491  000D6E                     l5237:
  2492                           
  2493                           ;main.c: 304: }
  2494                           ;main.c: 306: if ( stat.msec1000 )
  2495  000D6E  B833               	btfsc	_stat,4,c
  2496                           
  2497                           ;main.c: 307: {
  2498                           ;main.c: 308: stat.msec1000 = 0;
  2499  000D70  9833               	bcf	_stat,4,c
  2500                           
  2501                           ;main.c: 311: }
  2502                           ;main.c: 314: if ( stat.sec10 )
  2503  000D72  BA33               	btfsc	_stat,5,c
  2504                           
  2505                           ;main.c: 315: {
  2506                           ;main.c: 316: stat.sec10 = 0;
  2507  000D74  9A33               	bcf	_stat,5,c
  2508                           
  2509                           ;main.c: 318: void eeprom_data_refresh( );
  2510                           ;main.c: 319: }
  2511                           ;main.c: 322: if ( stat.min1 )
  2512  000D76  BC33               	btfsc	_stat,6,c
  2513                           
  2514                           ;main.c: 323: {
  2515                           ;main.c: 324: stat.min1 = 0;
  2516  000D78  9C33               	bcf	_stat,6,c
  2517                           
  2518                           ;main.c: 329: }
  2519                           ;main.c: 330: if ( stat.min10 )
  2520  000D7A  BE33               	btfsc	_stat,7,c
  2521                           
  2522                           ;main.c: 331: {
  2523                           ;main.c: 332: stat.min10 = 0;
  2524  000D7C  9E33               	bcf	_stat,7,c
  2525                           
  2526                           ;main.c: 333: }
  2527                           ;main.c: 335: if ( stat.hour1 )
  2528  000D7E  A034               	btfss	_stat+1,0,c
  2529  000D80  D70C               	goto	l5135
  2530                           
  2531                           ;main.c: 336: {
  2532                           ;main.c: 337: stat.hour1 = 0;
  2533  000D82  9034               	bcf	_stat+1,0,c
  2534                           
  2535                           ;main.c: 338: saved_hours_counter = load_int_from_eeprom( SAVED_TIME_FOR_TEST_EE_ADD );
  2536  000D84  0E12               	movlw	18
  2537  000D86  EC7F  F00C         	call	_load_int_from_eeprom
  2538  000D8A  C012  F031         	movff	?_load_int_from_eeprom,_saved_hours_counter
  2539  000D8E  C013  F032         	movff	?_load_int_from_eeprom+1,_saved_hours_counter+1
  2540                           
  2541                           ;main.c: 340: if ( !( saved_hours_counter % week_in_houres ) )
  2542  000D92  C031  F017         	movff	_saved_hours_counter,___lwmod@dividend
  2543  000D96  C032  F018         	movff	_saved_hours_counter+1,___lwmod@dividend+1
  2544  000D9A  C0CE  F019         	movff	_week_in_houres,___lwmod@divisor
  2545  000D9E  C0CF  F01A         	movff	_week_in_houres+1,___lwmod@divisor+1
  2546  000DA2  EC59  F00C         	call	___lwmod	;wreg free
  2547  000DA6  5017               	movf	?___lwmod,w,c
  2548  000DA8  1018               	iorwf	?___lwmod+1,w,c
  2549  000DAA  A4D8               	btfss	status,2,c
  2550  000DAC  D003               	goto	l5253
  2551                           
  2552                           ;main.c: 341: {
  2553                           ;main.c: 342: sw_stat = SHORT_TEST;
  2554  000DAE  0E07               	movlw	7
  2555  000DB0  6E49               	movwf	_sw_stat,c
  2556  000DB2  D000               	goto	l5253
  2557  000DB4                     l5253:
  2558                           
  2559                           ;main.c: 343: }
  2560                           ;main.c: 344: if ( sw_stat != LONG_TEST )
  2561  000DB4  0E06               	movlw	6
  2562  000DB6  1849               	xorwf	_sw_stat,w,c
  2563  000DB8  B4D8               	btfsc	status,2,c
  2564  000DBA  D6EF               	goto	l5135
  2565                           
  2566                           ;main.c: 345: {
  2567                           ;main.c: 346: if ( saved_hours_counter >= year_time )
  2568  000DBC  0100               	movlb	0	; () banked
  2569  000DBE  51D0               	movf	_year_time& (0+255),w,b
  2570  000DC0  5C31               	subwf	_saved_hours_counter,w,c
  2571  000DC2  0100               	movlb	0	; () banked
  2572  000DC4  51D1               	movf	(_year_time+1)& (0+255),w,b
  2573  000DC6  5832               	subwfb	_saved_hours_counter+1,w,c
  2574  000DC8  A0D8               	btfss	status,0,c
  2575  000DCA  D003               	goto	l5259
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;main.c: 347: {
  2579                           ;main.c: 348: sw_stat = LONG_TEST;
  2580  000DCC  0E06               	movlw	6
  2581  000DCE  6E49               	movwf	_sw_stat,c
  2582                           
  2583                           ;main.c: 349: }
  2584  000DD0  D6E4               	goto	l5135
  2585  000DD2                     l5259:
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;main.c: 350: else
  2589                           ;main.c: 351: {
  2590                           ;main.c: 352: saved_hours_counter++;
  2591  000DD2  4A31               	infsnz	_saved_hours_counter,f,c
  2592  000DD4  2A32               	incf	_saved_hours_counter+1,f,c
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;main.c: 353: save_int_to_eeprom( SAVED_TIME_FOR_TEST_EE_ADD, saved_hours_counter );
  2596  000DD6  C031  F014         	movff	_saved_hours_counter,save_int_to_eeprom@data
  2597  000DDA  C032  F015         	movff	_saved_hours_counter+1,save_int_to_eeprom@data+1
  2598  000DDE  0E12               	movlw	18
  2599  000DE0  ECBC  F00C         	call	_save_int_to_eeprom
  2600  000DE4  D6DA               	goto	l5135
  2601  000DE6  EFE5  F000         	goto	start
  2602  000DEA                     __end_of_main:
  2603                           	opt stack 0
  2604                           tblptru	equ	0xFF8
  2605                           intcon	equ	0xFF2
  2606                           postinc0	equ	0xFEE
  2607                           wreg	equ	0xFE8
  2608                           status	equ	0xFD8
  2609                           
  2610 ;; *************** function _work_stat_hendler *****************
  2611 ;; Defined at:
  2612 ;;		line 400 in file "../func.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;		None
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;		None
  2617 ;; Return value:  Size  Location     Type
  2618 ;;		None               void
  2619 ;; Registers used:
  2620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2621 ;; Tracked objects:
  2622 ;;		On entry : 0/0
  2623 ;;		On exit  : 0/0
  2624 ;;		Unchanged: 0/0
  2625 ;; Data sizes:     COMRAM   BANK0   BANK1
  2626 ;;      Params:         0       0       0
  2627 ;;      Locals:         0       0       0
  2628 ;;      Temps:          2       0       0
  2629 ;;      Totals:         2       0       0
  2630 ;;Total ram usage:        2 bytes
  2631 ;; Hardware stack levels used:    1
  2632 ;; Hardware stack levels required when called:    3
  2633 ;; This function calls:
  2634 ;;		_printf
  2635 ;; This function is called by:
  2636 ;;		_main
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639                           
  2640                           	psect	text1
  2641  0013C4                     __ptext1:
  2642                           	opt stack 0
  2643  0013C4                     _work_stat_hendler:
  2644                           	opt stack 27
  2645                           
  2646                           ;func.c: 402: red_led = 1;
  2647                           
  2648                           ;incstack = 0
  2649  0013C4  0E01               	movlw	1
  2650  0013C6  6E45               	movwf	_red_led,c
  2651                           
  2652                           ;func.c: 403: green_led = 0;
  2653  0013C8  0E00               	movlw	0
  2654  0013CA  0100               	movlb	0	; () banked
  2655  0013CC  6FDE               	movwf	_green_led& (0+255),b
  2656                           
  2657                           ;func.c: 404: main_led_stat = MAIN_LED_ON;
  2658  0013CE  0E01               	movlw	1
  2659  0013D0  6E43               	movwf	_main_led_stat,c
  2660                           
  2661                           ;func.c: 405: normal_charging = 0;
  2662  0013D2  0E00               	movlw	0
  2663  0013D4  0100               	movlb	0	; () banked
  2664  0013D6  6FE3               	movwf	_normal_charging& (0+255),b
  2665                           
  2666                           ;func.c: 406: trickl_charging = 0;
  2667  0013D8  0E00               	movlw	0
  2668  0013DA  0100               	movlb	0	; () banked
  2669  0013DC  6FE9               	movwf	_trickl_charging& (0+255),b
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;func.c: 408: if ( last_sw_stat != WORK )
  2673  0013DE  0E03               	movlw	3
  2674  0013E0  1842               	xorwf	_last_sw_stat,w,c
  2675  0013E2  B4D8               	btfsc	status,2,c
  2676  0013E4  D009               	goto	l4843
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;func.c: 409: {
  2680                           ;func.c: 410: printf( "\n\rTO WORK MODE" );
  2681  0013E6  0EBF               	movlw	low STR_16
  2682  0013E8  6E1C               	movwf	printf@f,c
  2683  0013EA  0E1F               	movlw	high STR_16
  2684  0013EC  6E1D               	movwf	printf@f+1,c
  2685  0013EE  ECE7  F000         	call	_printf	;wreg free
  2686                           
  2687                           ;func.c: 411: last_sw_stat = WORK;
  2688  0013F2  0E03               	movlw	3
  2689  0013F4  6E42               	movwf	_last_sw_stat,c
  2690                           
  2691                           ;func.c: 416: }
  2692  0013F6  0012               	return	
  2693  0013F8                     l4843:
  2694                           
  2695                           ;func.c: 417: else
  2696                           ;func.c: 418: {
  2697                           ;func.c: 420: printf( "\n\r\n\r sw_stat = WORK;" );
  2698  0013F8  0EDA               	movlw	low STR_17
  2699  0013FA  6E1C               	movwf	printf@f,c
  2700  0013FC  0E1E               	movlw	high STR_17
  2701  0013FE  6E1D               	movwf	printf@f+1,c
  2702  001400  ECE7  F000         	call	_printf	;wreg free
  2703                           
  2704                           ;func.c: 427: if(GRID_Voltage_ADC_val>60)
  2705  001404  502A               	movf	_GRID_Voltage_ADC_val+1,w,c
  2706  001406  E104               	bnz	u4400
  2707  001408  0E3D               	movlw	61
  2708  00140A  5C29               	subwf	_GRID_Voltage_ADC_val,w,c
  2709  00140C  A0D8               	btfss	status,0,c
  2710  00140E  D004               	goto	l561
  2711  001410                     u4400:
  2712                           
  2713                           ;func.c: 428: GRID_Voltage_ADC_val-=60;
  2714  001410  0E3C               	movlw	60
  2715  001412  5E29               	subwf	_GRID_Voltage_ADC_val,f,c
  2716  001414  0E00               	movlw	0
  2717  001416  5A2A               	subwfb	_GRID_Voltage_ADC_val+1,f,c
  2718  001418                     l561:
  2719                           
  2720                           ;func.c: 429: if ( GRID_Voltage_ADC_val >= (grid_power_high_voltage+25) )
  2721  001418  0E19               	movlw	25
  2722  00141A  0100               	movlb	0	; () banked
  2723  00141C  2596               	addwf	_grid_power_high_voltage& (0+255),w,b
  2724  00141E  6E26               	movwf	??_work_stat_hendler& (0+255),c
  2725  001420  0E00               	movlw	0
  2726  001422  0100               	movlb	0	; () banked
  2727  001424  2197               	addwfc	(_grid_power_high_voltage+1)& (0+255),w,b
  2728  001426  6E27               	movwf	(??_work_stat_hendler+1)& (0+255),c
  2729  001428  5026               	movf	??_work_stat_hendler,w,c
  2730  00142A  5C29               	subwf	_GRID_Voltage_ADC_val,w,c
  2731  00142C  5027               	movf	??_work_stat_hendler+1,w,c
  2732  00142E  582A               	subwfb	_GRID_Voltage_ADC_val+1,w,c
  2733  001430  A0D8               	btfss	status,0,c
  2734  001432  D00C               	goto	l4857
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;func.c: 430: {
  2738                           ;func.c: 431: main_led_stat = MAIN_LED_OFF;
  2739  001434  0E00               	movlw	0
  2740  001436  6E43               	movwf	_main_led_stat,c
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;func.c: 432: printf( "\n\rPOWER IS BACK" );
  2744  001438  0E90               	movlw	low STR_18
  2745  00143A  6E1C               	movwf	printf@f,c
  2746  00143C  0E1F               	movlw	high STR_18
  2747  00143E  6E1D               	movwf	printf@f+1,c
  2748  001440  ECE7  F000         	call	_printf	;wreg free
  2749                           
  2750                           ;func.c: 433: sw_stat = ST_BY;
  2751  001444  0E02               	movlw	2
  2752  001446  6E49               	movwf	_sw_stat,c
  2753                           
  2754                           ;func.c: 434: stat.msec500 = 1;
  2755  001448  8633               	bsf	_stat,3,c
  2756  00144A  D000               	goto	l4857
  2757  00144C                     l4857:
  2758                           
  2759                           ;func.c: 435: }
  2760                           ;func.c: 437: if(Vbat_ADC_val <total_led_off_bat_voltage)
  2761  00144C  0100               	movlb	0	; () banked
  2762  00144E  51C4               	movf	_total_led_off_bat_voltage& (0+255),w,b
  2763  001450  5C2B               	subwf	_Vbat_ADC_val,w,c
  2764  001452  0100               	movlb	0	; () banked
  2765  001454  51C5               	movf	(_total_led_off_bat_voltage+1)& (0+255),w,b
  2766  001456  582C               	subwfb	_Vbat_ADC_val+1,w,c
  2767  001458  B0D8               	btfsc	status,0,c
  2768  00145A  0012               	return	
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;func.c: 438: {
  2772                           ;func.c: 439: sw_stat = SLEEP;
  2773  00145C  0E01               	movlw	1
  2774  00145E  6E49               	movwf	_sw_stat,c
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;func.c: 440: printf( "\n\rBATT US VERY LOW SO GOING TO SLEEP" );
  2778  001460  0E66               	movlw	low STR_19
  2779  001462  6E1C               	movwf	printf@f,c
  2780  001464  0E1C               	movlw	high STR_19
  2781  001466  6E1D               	movwf	printf@f+1,c
  2782  001468  ECE7  F000         	call	_printf	;wreg free
  2783                           
  2784                           ;func.c: 441: stat.msec500 = 1;
  2785  00146C  8633               	bsf	_stat,3,c
  2786  00146E  0012               	return	
  2787  001470  0012               	return		;funcret
  2788  001472                     __end_of_work_stat_hendler:
  2789                           	opt stack 0
  2790                           tblptru	equ	0xFF8
  2791                           intcon	equ	0xFF2
  2792                           postinc0	equ	0xFEE
  2793                           wreg	equ	0xFE8
  2794                           status	equ	0xFD8
  2795                           
  2796 ;; *************** function _vbat_check *****************
  2797 ;; Defined at:
  2798 ;;		line 207 in file "../func.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;		None
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;		None
  2803 ;; Return value:  Size  Location     Type
  2804 ;;		None               void
  2805 ;; Registers used:
  2806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1
  2812 ;;      Params:         0       0       0
  2813 ;;      Locals:         0       0       0
  2814 ;;      Temps:          0       0       0
  2815 ;;      Totals:         0       0       0
  2816 ;;Total ram usage:        0 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    3
  2819 ;; This function calls:
  2820 ;;		_printf
  2821 ;; This function is called by:
  2822 ;;		_main
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text2
  2827  001512                     __ptext2:
  2828                           	opt stack 0
  2829  001512                     _vbat_check:
  2830                           	opt stack 27
  2831                           
  2832                           ;func.c: 209: printf( "\n\r\n\r Vbat ADC = %d", Vbat_ADC_val );
  2833                           
  2834                           ;incstack = 0
  2835  001512  0E2A               	movlw	low STR_1
  2836  001514  6E1C               	movwf	printf@f,c
  2837  001516  0E1F               	movlw	high STR_1
  2838  001518  6E1D               	movwf	printf@f+1,c
  2839  00151A  C02B  F01E         	movff	_Vbat_ADC_val,?_printf+2
  2840  00151E  C02C  F01F         	movff	_Vbat_ADC_val+1,?_printf+3
  2841  001522  ECE7  F000         	call	_printf	;wreg free
  2842                           
  2843                           ;func.c: 220: if ( Vbat_ADC_val >= total_bat_is_disconnected_voltage )
  2844  001526  0100               	movlb	0	; () banked
  2845  001528  51C0               	movf	_total_bat_is_disconnected_voltage& (0+255),w,b
  2846  00152A  5C2B               	subwf	_Vbat_ADC_val,w,c
  2847  00152C  0100               	movlb	0	; () banked
  2848  00152E  51C1               	movf	(_total_bat_is_disconnected_voltage+1)& (0+255),w,b
  2849  001530  582C               	subwfb	_Vbat_ADC_val+1,w,c
  2850  001532  A0D8               	btfss	status,0,c
  2851  001534  D00B               	goto	l4743
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;func.c: 221: {
  2855                           ;func.c: 222: printf( "\n\rbatt_stat = DISCONNECTED" );
  2856  001536  0EDB               	movlw	low STR_2
  2857  001538  6E1C               	movwf	printf@f,c
  2858  00153A  0E1D               	movlw	high STR_2
  2859  00153C  6E1D               	movwf	printf@f+1,c
  2860  00153E  ECE7  F000         	call	_printf	;wreg free
  2861                           
  2862                           ;func.c: 223: batt_stat = DISSCONECTED;
  2863  001542  0E03               	movlw	3
  2864  001544  6E41               	movwf	_batt_stat,c
  2865                           
  2866                           ;func.c: 224: sw_stat = ERROR;
  2867  001546  0E05               	movlw	5
  2868  001548  6E49               	movwf	_sw_stat,c
  2869                           
  2870                           ;func.c: 225: }else
  2871  00154A  0012               	return	
  2872  00154C                     l4743:
  2873                           
  2874                           ;func.c: 226: if( Vbat_ADC_val >= total_batt_full_voltage )
  2875  00154C  0100               	movlb	0	; () banked
  2876  00154E  51C2               	movf	_total_batt_full_voltage& (0+255),w,b
  2877  001550  5C2B               	subwf	_Vbat_ADC_val,w,c
  2878  001552  0100               	movlb	0	; () banked
  2879  001554  51C3               	movf	(_total_batt_full_voltage+1)& (0+255),w,b
  2880  001556  582C               	subwfb	_Vbat_ADC_val+1,w,c
  2881  001558  A0D8               	btfss	status,0,c
  2882  00155A  D009               	goto	l4749
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;func.c: 227: {
  2886                           ;func.c: 228: batt_stat = FULL_CHARGED;
  2887  00155C  0E02               	movlw	2
  2888  00155E  6E41               	movwf	_batt_stat,c
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;func.c: 229: printf( "\n\rbatt_stat = FULL_CHARGED" );
  2892  001560  0EC0               	movlw	low STR_3
  2893  001562  6E1C               	movwf	printf@f,c
  2894  001564  0E1D               	movlw	high STR_3
  2895  001566  6E1D               	movwf	printf@f+1,c
  2896  001568  ECE7  F000         	call	_printf	;wreg free
  2897                           
  2898                           ;func.c: 230: }else
  2899  00156C  0012               	return	
  2900  00156E                     l4749:
  2901                           
  2902                           ;func.c: 231: if( Vbat_ADC_val >= total_shorted_bat_voltage )
  2903  00156E  0100               	movlb	0	; () banked
  2904  001570  51CA               	movf	_total_shorted_bat_voltage& (0+255),w,b
  2905  001572  5C2B               	subwf	_Vbat_ADC_val,w,c
  2906  001574  0100               	movlb	0	; () banked
  2907  001576  51CB               	movf	(_total_shorted_bat_voltage+1)& (0+255),w,b
  2908  001578  582C               	subwfb	_Vbat_ADC_val+1,w,c
  2909  00157A  A0D8               	btfss	status,0,c
  2910  00157C  D009               	goto	l4755
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;func.c: 232: {
  2914                           ;func.c: 233: batt_stat = NEED_CHARGING;
  2915  00157E  0E01               	movlw	1
  2916  001580  6E41               	movwf	_batt_stat,c
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;func.c: 234: printf( "\n\rbatt_stat = NEED_CHARGING" );
  2920  001582  0E88               	movlw	low STR_4
  2921  001584  6E1C               	movwf	printf@f,c
  2922  001586  0E1D               	movlw	high STR_4
  2923  001588  6E1D               	movwf	printf@f+1,c
  2924  00158A  ECE7  F000         	call	_printf	;wreg free
  2925                           
  2926                           ;func.c: 235: }else
  2927  00158E  0012               	return	
  2928  001590                     l4755:
  2929                           
  2930                           ;func.c: 236: {
  2931                           ;func.c: 237: printf( "\n\rATT!!! batt_stat = SHORTED !!!" );
  2932  001590  0ED0               	movlw	low STR_5
  2933  001592  6E1C               	movwf	printf@f,c
  2934  001594  0E1C               	movlw	high STR_5
  2935  001596  6E1D               	movwf	printf@f+1,c
  2936  001598  ECE7  F000         	call	_printf	;wreg free
  2937                           
  2938                           ;func.c: 238: batt_stat = SHORTED;
  2939  00159C  0E00               	movlw	0
  2940  00159E  6E41               	movwf	_batt_stat,c
  2941                           
  2942                           ;func.c: 239: sw_stat = ERROR;
  2943  0015A0  0E05               	movlw	5
  2944  0015A2  6E49               	movwf	_sw_stat,c
  2945  0015A4  0012               	return	
  2946  0015A6  0012               	return		;funcret
  2947  0015A8                     __end_of_vbat_check:
  2948                           	opt stack 0
  2949                           tblptru	equ	0xFF8
  2950                           intcon	equ	0xFF2
  2951                           postinc0	equ	0xFEE
  2952                           wreg	equ	0xFE8
  2953                           status	equ	0xFD8
  2954                           
  2955 ;; *************** function _test_stat_hendler *****************
  2956 ;; Defined at:
  2957 ;;		line 451 in file "../func.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;		None
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;		None
  2962 ;; Return value:  Size  Location     Type
  2963 ;;		None               void
  2964 ;; Registers used:
  2965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1
  2971 ;;      Params:         0       0       0
  2972 ;;      Locals:         0       0       0
  2973 ;;      Temps:          1       0       0
  2974 ;;      Totals:         1       0       0
  2975 ;;Total ram usage:        1 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:    3
  2978 ;; This function calls:
  2979 ;;		_printf
  2980 ;; This function is called by:
  2981 ;;		_main
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           	psect	text3
  2986  0016B6                     __ptext3:
  2987                           	opt stack 0
  2988  0016B6                     _test_stat_hendler:
  2989                           	opt stack 27
  2990                           
  2991                           ;func.c: 453: main_led_stat = MAIN_LED_ON;
  2992                           
  2993                           ;incstack = 0
  2994  0016B6  0E01               	movlw	1
  2995  0016B8  6E43               	movwf	_main_led_stat,c
  2996                           
  2997                           ;func.c: 456: if ( last_sw_stat != TEST )
  2998  0016BA  0E04               	movlw	4
  2999  0016BC  1842               	xorwf	_last_sw_stat,w,c
  3000  0016BE  B4D8               	btfsc	status,2,c
  3001  0016C0  D00E               	goto	l4877
  3002                           
  3003                           ;func.c: 457: {
  3004                           ;func.c: 458: printf( "\n\rMOVING TO TEST MODE" );
  3005  0016C2  0EC4               	movlw	low STR_20
  3006  0016C4  6E1C               	movwf	printf@f,c
  3007  0016C6  0E1E               	movlw	high STR_20
  3008  0016C8  6E1D               	movwf	printf@f+1,c
  3009  0016CA  ECE7  F000         	call	_printf	;wreg free
  3010                           
  3011                           ;func.c: 459: last_sw_stat = TEST;
  3012  0016CE  0E04               	movlw	4
  3013  0016D0  6E42               	movwf	_last_sw_stat,c
  3014                           
  3015                           ;func.c: 460: red_led = 1 ;
  3016  0016D2  0E01               	movlw	1
  3017  0016D4  6E45               	movwf	_red_led,c
  3018                           
  3019                           ;func.c: 461: green_led = 0;
  3020  0016D6  0E00               	movlw	0
  3021  0016D8  0100               	movlb	0	; () banked
  3022  0016DA  6FDE               	movwf	_green_led& (0+255),b
  3023                           
  3024                           ;func.c: 462: }
  3025  0016DC  0012               	return	
  3026  0016DE                     l4877:
  3027                           
  3028                           ;func.c: 463: else
  3029                           ;func.c: 464: {
  3030                           ;func.c: 465: red_led = 1 - LATAbits.LATA7;
  3031  0016DE  AE89               	btfss	3977,7,c	;volatile
  3032  0016E0  D002               	goto	u4440
  3033  0016E2  0E01               	movlw	1
  3034  0016E4  D001               	goto	u4446
  3035  0016E6                     u4440:
  3036  0016E6  0E00               	movlw	0
  3037  0016E8                     u4446:
  3038  0016E8  0800               	sublw	0
  3039  0016EA  6E26               	movwf	??_test_stat_hendler& (0+255),c
  3040  0016EC  2826               	incf	??_test_stat_hendler,w,c
  3041  0016EE  6E45               	movwf	_red_led,c
  3042                           
  3043                           ;func.c: 466: green_led = 1 - red_led;
  3044  0016F0  5045               	movf	_red_led,w,c
  3045  0016F2  0800               	sublw	0
  3046  0016F4  6E26               	movwf	??_test_stat_hendler& (0+255),c
  3047  0016F6  2826               	incf	??_test_stat_hendler,w,c
  3048  0016F8  0100               	movlb	0	; () banked
  3049  0016FA  6FDE               	movwf	_green_led& (0+255),b
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;func.c: 468: printf( "\n\r\n\r sw_stat = TEST;" );
  3053  0016FC  0EEF               	movlw	low STR_21
  3054  0016FE  6E1C               	movwf	printf@f,c
  3055  001700  0E1E               	movlw	high STR_21
  3056  001702  6E1D               	movwf	printf@f+1,c
  3057  001704  ECE7  F000         	call	_printf	;wreg free
  3058                           
  3059                           ;func.c: 470: if ( Switch_stat == SW_RELEASED )
  3060  001708  503F               	movf	_Switch_stat,w,c
  3061  00170A  A4D8               	btfss	status,2,c
  3062  00170C  0012               	return	
  3063                           
  3064                           ;func.c: 471: {
  3065                           ;func.c: 472: sw_stat = ST_BY;
  3066  00170E  0E02               	movlw	2
  3067  001710  6E49               	movwf	_sw_stat,c
  3068                           
  3069                           ;func.c: 473: printf( "\n\rTEST IS DONE" );
  3070  001712  0ECE               	movlw	low STR_22
  3071  001714  6E1C               	movwf	printf@f,c
  3072  001716  0E1F               	movlw	high STR_22
  3073  001718  6E1D               	movwf	printf@f+1,c
  3074  00171A  ECE7  F000         	call	_printf	;wreg free
  3075                           
  3076                           ;func.c: 474: printf( "\n\rgoing to ST_BY" );
  3077  00171E  0E5F               	movlw	low STR_23
  3078  001720  6E1C               	movwf	printf@f,c
  3079  001722  0E1F               	movlw	high STR_23
  3080  001724  6E1D               	movwf	printf@f+1,c
  3081  001726  ECE7  F000         	call	_printf	;wreg free
  3082  00172A  0012               	return	
  3083  00172C  0012               	return		;funcret
  3084  00172E                     __end_of_test_stat_hendler:
  3085                           	opt stack 0
  3086                           tblptru	equ	0xFF8
  3087                           intcon	equ	0xFF2
  3088                           postinc0	equ	0xFEE
  3089                           wreg	equ	0xFE8
  3090                           status	equ	0xFD8
  3091                           
  3092 ;; *************** function _stby_stat_hendler *****************
  3093 ;; Defined at:
  3094 ;;		line 352 in file "../func.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;		None
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;		None
  3099 ;; Return value:  Size  Location     Type
  3100 ;;		None               void
  3101 ;; Registers used:
  3102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMRAM   BANK0   BANK1
  3108 ;;      Params:         0       0       0
  3109 ;;      Locals:         0       0       0
  3110 ;;      Temps:          2       0       0
  3111 ;;      Totals:         2       0       0
  3112 ;;Total ram usage:        2 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; Hardware stack levels required when called:    3
  3115 ;; This function calls:
  3116 ;;		_printf
  3117 ;; This function is called by:
  3118 ;;		_main
  3119 ;; This function uses a non-reentrant model
  3120 ;;
  3121                           
  3122                           	psect	text4
  3123  001634                     __ptext4:
  3124                           	opt stack 0
  3125  001634                     _stby_stat_hendler:
  3126                           	opt stack 27
  3127                           
  3128                           ;func.c: 354: red_led = 0;
  3129                           
  3130                           ;incstack = 0
  3131  001634  0E00               	movlw	0
  3132  001636  6E45               	movwf	_red_led,c
  3133                           
  3134                           ;func.c: 355: green_led = 1;
  3135  001638  0E01               	movlw	1
  3136  00163A  0100               	movlb	0	; () banked
  3137  00163C  6FDE               	movwf	_green_led& (0+255),b
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;func.c: 356: if ( last_sw_stat != ST_BY )
  3141  00163E  0E02               	movlw	2
  3142  001640  1842               	xorwf	_last_sw_stat,w,c
  3143  001642  B4D8               	btfsc	status,2,c
  3144  001644  D009               	goto	l4815
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;func.c: 357: {
  3148                           ;func.c: 358: printf( "\n\r MOVING TO ST_BY MODE" );
  3149  001646  0E27               	movlw	low STR_11
  3150  001648  6E1C               	movwf	printf@f,c
  3151  00164A  0E1E               	movlw	high STR_11
  3152  00164C  6E1D               	movwf	printf@f+1,c
  3153  00164E  ECE7  F000         	call	_printf	;wreg free
  3154                           
  3155                           ;func.c: 359: last_sw_stat = ST_BY;
  3156  001652  0E02               	movlw	2
  3157  001654  6E42               	movwf	_last_sw_stat,c
  3158                           
  3159                           ;func.c: 364: }
  3160  001656  0012               	return	
  3161  001658                     l4815:
  3162                           
  3163                           ;func.c: 365: else
  3164                           ;func.c: 366: {
  3165                           ;func.c: 368: printf( "\n\r\n\r sw_stat = ST_BY;" );
  3166  001658  0E82               	movlw	low STR_12
  3167  00165A  6E1C               	movwf	printf@f,c
  3168  00165C  0E1E               	movlw	high STR_12
  3169  00165E  6E1D               	movwf	printf@f+1,c
  3170  001660  ECE7  F000         	call	_printf	;wreg free
  3171                           
  3172                           ;func.c: 370: if ( GRID_Voltage_ADC_val < grid_power_low_voltage+20 )
  3173  001664  0E14               	movlw	20
  3174  001666  242D               	addwf	_grid_power_low_voltage,w,c
  3175  001668  6E26               	movwf	??_stby_stat_hendler& (0+255),c
  3176  00166A  0E00               	movlw	0
  3177  00166C  202E               	addwfc	_grid_power_low_voltage+1,w,c
  3178  00166E  6E27               	movwf	(??_stby_stat_hendler+1)& (0+255),c
  3179  001670  5026               	movf	??_stby_stat_hendler,w,c
  3180  001672  5C29               	subwf	_GRID_Voltage_ADC_val,w,c
  3181  001674  5027               	movf	??_stby_stat_hendler+1,w,c
  3182  001676  582A               	subwfb	_GRID_Voltage_ADC_val+1,w,c
  3183  001678  B0D8               	btfsc	status,0,c
  3184  00167A  D00D               	goto	l4825
  3185                           
  3186                           ;func.c: 372: {
  3187                           ;func.c: 373: printf( "\n\r GRID_POWER FAIL DETECTED \n\r", power_fail_count );
  3188  00167C  0E11               	movlw	low STR_13
  3189  00167E  6E1C               	movwf	printf@f,c
  3190  001680  0E1D               	movlw	high STR_13
  3191  001682  6E1D               	movwf	printf@f+1,c
  3192  001684  C0E4  F01E         	movff	_power_fail_count,?_printf+2
  3193  001688  6A1F               	clrf	?_printf+3,c
  3194  00168A  ECE7  F000         	call	_printf	;wreg free
  3195                           
  3196                           ;func.c: 376: sw_stat = WORK;
  3197  00168E  0E03               	movlw	3
  3198  001690  6E49               	movwf	_sw_stat,c
  3199                           
  3200                           ;func.c: 377: stat.msec500 = 1;
  3201  001692  8633               	bsf	_stat,3,c
  3202                           
  3203                           ;func.c: 378: }
  3204  001694  D009               	goto	l4829
  3205  001696                     l4825:
  3206                           
  3207                           ;func.c: 379: else
  3208                           ;func.c: 380: {
  3209                           ;func.c: 381: main_led_stat = MAIN_LED_OFF;
  3210  001696  0E00               	movlw	0
  3211  001698  6E43               	movwf	_main_led_stat,c
  3212                           
  3213                           ;func.c: 383: printf( "\n\rGRID_POWER IS OK" );
  3214  00169A  0E17               	movlw	low STR_14
  3215  00169C  6E1C               	movwf	printf@f,c
  3216  00169E  0E1F               	movlw	high STR_14
  3217  0016A0  6E1D               	movwf	printf@f+1,c
  3218  0016A2  ECE7  F000         	call	_printf	;wreg free
  3219  0016A6  D000               	goto	l4829
  3220  0016A8                     l4829:
  3221                           
  3222                           ;func.c: 384: }
  3223                           ;func.c: 386: if ( Switch_stat == SHORT_PRESS_DETECTED )
  3224  0016A8  043F               	decf	_Switch_stat,w,c
  3225  0016AA  A4D8               	btfss	status,2,c
  3226  0016AC  0012               	return	
  3227                           
  3228                           ;func.c: 387: {
  3229                           ;func.c: 388: sw_stat = TEST;
  3230  0016AE  0E04               	movlw	4
  3231  0016B0  6E49               	movwf	_sw_stat,c
  3232  0016B2  0012               	return	
  3233  0016B4  0012               	return		;funcret
  3234  0016B6                     __end_of_stby_stat_hendler:
  3235                           	opt stack 0
  3236                           tblptru	equ	0xFF8
  3237                           intcon	equ	0xFF2
  3238                           postinc0	equ	0xFEE
  3239                           wreg	equ	0xFE8
  3240                           status	equ	0xFD8
  3241                           
  3242 ;; *************** function _sleep_stat_hendler *****************
  3243 ;; Defined at:
  3244 ;;		line 517 in file "../func.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;		None
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;		None
  3249 ;; Return value:  Size  Location     Type
  3250 ;;		None               void
  3251 ;; Registers used:
  3252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMRAM   BANK0   BANK1
  3258 ;;      Params:         0       0       0
  3259 ;;      Locals:         0       0       0
  3260 ;;      Temps:          0       0       0
  3261 ;;      Totals:         0       0       0
  3262 ;;Total ram usage:        0 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; Hardware stack levels required when called:    5
  3265 ;; This function calls:
  3266 ;;		_DelayMs
  3267 ;;		_blink_GREEN_LED_and_RED_LED_and_BUZZER
  3268 ;;		_init_USART
  3269 ;;		_init_system
  3270 ;;		_printf
  3271 ;;		_readA2D
  3272 ;; This function is called by:
  3273 ;;		_main
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text5
  3278  000DEA                     __ptext5:
  3279                           	opt stack 0
  3280  000DEA                     _sleep_stat_hendler:
  3281                           	opt stack 25
  3282                           
  3283                           ;func.c: 531: printf( "\n\r\n\r\n\r sw_stat = SLEEP" );
  3284                           
  3285                           ;incstack = 0
  3286  000DEA  0E3F               	movlw	low STR_28
  3287  000DEC  6E1C               	movwf	printf@f,c
  3288  000DEE  0E1E               	movlw	high STR_28
  3289  000DF0  6E1D               	movwf	printf@f+1,c
  3290  000DF2  ECE7  F000         	call	_printf	;wreg free
  3291                           
  3292                           ;func.c: 534: FVRCONbits.FVREN = 0;
  3293  000DF6  010F               	movlb	15	; () banked
  3294  000DF8  9F42               	bcf	66,7,b	;volatile
  3295                           
  3296                           ; BSR set to: 15
  3297                           ;func.c: 536: WDT_cnter = 156;
  3298  000DFA  0E00               	movlw	0
  3299  000DFC  0100               	movlb	0	; () banked
  3300  000DFE  6F87               	movwf	(_WDT_cnter+1)& (0+255),b
  3301  000E00  0E9C               	movlw	156
  3302  000E02  6F86               	movwf	_WDT_cnter& (0+255),b
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;func.c: 537: blink_GREEN_LED_and_RED_LED_and_BUZZER( 6, 40 );
  3306  000E04  0E00               	movlw	0
  3307  000E06  6E20               	movwf	blink_GREEN_LED_and_RED_LED_and_BUZZER@timeMs+1,c
  3308  000E08  0E28               	movlw	40
  3309  000E0A  6E1F               	movwf	blink_GREEN_LED_and_RED_LED_and_BUZZER@timeMs,c
  3310  000E0C  0E06               	movlw	6
  3311  000E0E  ECF6  F00C         	call	_blink_GREEN_LED_and_RED_LED_and_BUZZER
  3312                           
  3313                           ;func.c: 539: while ( !PORTBbits.RB0 )
  3314  000E12  D004               	goto	l4929
  3315  000E14                     l4927:
  3316                           
  3317                           ;func.c: 541: DelayMs( 255 );
  3318  000E14  0EFF               	movlw	255
  3319  000E16  EC65  F00D         	call	_DelayMs
  3320  000E1A  D000               	goto	l4929
  3321  000E1C                     l4929:
  3322  000E1C  A081               	btfss	3969,0,c	;volatile
  3323  000E1E  D7FA               	goto	l4927
  3324                           
  3325                           ;func.c: 542: DelayMs( 255 );
  3326  000E20  0EFF               	movlw	255
  3327  000E22  EC65  F00D         	call	_DelayMs
  3328                           
  3329                           ;func.c: 543: while ( !PORTBbits.RB0 )
  3330  000E26  D008               	goto	l4935
  3331  000E28                     l4933:
  3332                           
  3333                           ;func.c: 544: blink_GREEN_LED_and_RED_LED_and_BUZZER( 1, 40 );
  3334  000E28  0E00               	movlw	0
  3335  000E2A  6E20               	movwf	blink_GREEN_LED_and_RED_LED_and_BUZZER@timeMs+1,c
  3336  000E2C  0E28               	movlw	40
  3337  000E2E  6E1F               	movwf	blink_GREEN_LED_and_RED_LED_and_BUZZER@timeMs,c
  3338  000E30  0E01               	movlw	1
  3339  000E32  ECF6  F00C         	call	_blink_GREEN_LED_and_RED_LED_and_BUZZER
  3340  000E36  D000               	goto	l4935
  3341  000E38                     l4935:
  3342  000E38  A081               	btfss	3969,0,c	;volatile
  3343  000E3A  D7F6               	goto	l4933
  3344                           
  3345                           ;func.c: 550: TRISA = 0b00000010;;
  3346  000E3C  0E02               	movlw	2
  3347  000E3E  6E92               	movwf	3986,c	;volatile
  3348                           
  3349                           ;func.c: 551: TRISB = 0b00000001;;
  3350  000E40  0E01               	movlw	1
  3351  000E42  6E93               	movwf	3987,c	;volatile
  3352                           
  3353                           ;func.c: 552: TRISC = 0b00000000;;
  3354  000E44  0E00               	movlw	0
  3355  000E46  6E94               	movwf	3988,c	;volatile
  3356                           
  3357                           ;func.c: 553: LATA = 0x00;
  3358  000E48  0E00               	movlw	0
  3359  000E4A  6E89               	movwf	3977,c	;volatile
  3360                           
  3361                           ;func.c: 554: LATB = 0x00;
  3362  000E4C  0E00               	movlw	0
  3363  000E4E  6E8A               	movwf	3978,c	;volatile
  3364                           
  3365                           ;func.c: 555: LATC = 0x00;
  3366  000E50  0E00               	movlw	0
  3367  000E52  6E8B               	movwf	3979,c	;volatile
  3368  000E54  D088               	goto	l4991
  3369  000E56                     l588:
  3370  000E56  0003               	sleep		;# 
  3371                           
  3372                           ;func.c: 573: if ( LATAbits.LATA6 )
  3373  000E58  AC89               	btfss	3977,6,c	;volatile
  3374  000E5A  D002               	goto	l4941
  3375                           
  3376                           ;func.c: 574: LATAbits.LATA6 = 0;
  3377  000E5C  9C89               	bcf	3977,6,c	;volatile
  3378  000E5E  D000               	goto	l4941
  3379  000E60                     l4941:
  3380                           
  3381                           ;func.c: 575: WDT_cnter--;
  3382  000E60  0100               	movlb	0	; () banked
  3383  000E62  0786               	decf	_WDT_cnter& (0+255),f,b
  3384  000E64  A0D8               	btfss	status,0,c
  3385  000E66  0787               	decf	(_WDT_cnter+1)& (0+255),f,b
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;func.c: 576: if ( !WDT_cnter )
  3389  000E68  0100               	movlb	0	; () banked
  3390  000E6A  5186               	movf	_WDT_cnter& (0+255),w,b
  3391  000E6C  0100               	movlb	0	; () banked
  3392  000E6E  1187               	iorwf	(_WDT_cnter+1)& (0+255),w,b
  3393  000E70  A4D8               	btfss	status,2,c
  3394  000E72  D057               	goto	l590
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;func.c: 577: {
  3398                           ;func.c: 578: FVRCONbits.FVRS = 2;
  3399  000E74  010F               	movlb	15	; () banked
  3400  000E76  5142               	movf	66,w,b	;volatile
  3401  000E78  0BCF               	andlw	-49
  3402  000E7A  0920               	iorlw	32
  3403  000E7C  6F42               	movwf	66,b	;volatile
  3404                           
  3405                           ; BSR set to: 15
  3406                           ;func.c: 579: FVRCONbits.FVREN = 1;
  3407  000E7E  010F               	movlb	15	; () banked
  3408  000E80  8F42               	bsf	66,7,b	;volatile
  3409                           
  3410                           ; BSR set to: 15
  3411                           ;func.c: 580: LATAbits.LATA6 = 1;
  3412  000E82  8C89               	bsf	3977,6,c	;volatile
  3413                           
  3414                           ;func.c: 581: WDT_cnter = 156;
  3415  000E84  0E00               	movlw	0
  3416  000E86  0100               	movlb	0	; () banked
  3417  000E88  6F87               	movwf	(_WDT_cnter+1)& (0+255),b
  3418  000E8A  0E9C               	movlw	156
  3419  000E8C  6F86               	movwf	_WDT_cnter& (0+255),b
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;func.c: 583: GRID_Voltage_ADC_val = readA2D( 1 );
  3423  000E8E  0E01               	movlw	1
  3424  000E90  ECD4  F00A         	call	_readA2D
  3425  000E94  C010  F029         	movff	?_readA2D,_GRID_Voltage_ADC_val
  3426  000E98  C011  F02A         	movff	?_readA2D+1,_GRID_Voltage_ADC_val+1
  3427                           
  3428                           ;func.c: 584: if ( GRID_Voltage_ADC_val > grid_power_low_voltage )
  3429  000E9C  5029               	movf	_GRID_Voltage_ADC_val,w,c
  3430  000E9E  5C2D               	subwf	_grid_power_low_voltage,w,c
  3431  000EA0  502A               	movf	_GRID_Voltage_ADC_val+1,w,c
  3432  000EA2  582E               	subwfb	_grid_power_low_voltage+1,w,c
  3433  000EA4  B0D8               	btfsc	status,0,c
  3434  000EA6  D037               	goto	l4975
  3435                           
  3436                           ;func.c: 585: {
  3437                           ;func.c: 586: DelayMs(30);
  3438  000EA8  0E1E               	movlw	30
  3439  000EAA  EC65  F00D         	call	_DelayMs
  3440                           
  3441                           ;func.c: 587: GRID_Voltage_ADC_val = readA2D( 1 );
  3442  000EAE  0E01               	movlw	1
  3443  000EB0  ECD4  F00A         	call	_readA2D
  3444  000EB4  C010  F029         	movff	?_readA2D,_GRID_Voltage_ADC_val
  3445  000EB8  C011  F02A         	movff	?_readA2D+1,_GRID_Voltage_ADC_val+1
  3446                           
  3447                           ;func.c: 589: if ( GRID_Voltage_ADC_val > grid_power_low_voltage )
  3448  000EBC  5029               	movf	_GRID_Voltage_ADC_val,w,c
  3449  000EBE  5C2D               	subwf	_grid_power_low_voltage,w,c
  3450  000EC0  502A               	movf	_GRID_Voltage_ADC_val+1,w,c
  3451  000EC2  582E               	subwfb	_grid_power_low_voltage+1,w,c
  3452  000EC4  B0D8               	btfsc	status,0,c
  3453  000EC6  D027               	goto	l4975
  3454                           
  3455                           ;func.c: 590: {
  3456                           ;func.c: 591: DelayMs(30);
  3457  000EC8  0E1E               	movlw	30
  3458  000ECA  EC65  F00D         	call	_DelayMs
  3459                           
  3460                           ;func.c: 592: GRID_Voltage_ADC_val = readA2D( 1 );
  3461  000ECE  0E01               	movlw	1
  3462  000ED0  ECD4  F00A         	call	_readA2D
  3463  000ED4  C010  F029         	movff	?_readA2D,_GRID_Voltage_ADC_val
  3464  000ED8  C011  F02A         	movff	?_readA2D+1,_GRID_Voltage_ADC_val+1
  3465                           
  3466                           ;func.c: 594: if ( GRID_Voltage_ADC_val > grid_power_low_voltage )
  3467  000EDC  5029               	movf	_GRID_Voltage_ADC_val,w,c
  3468  000EDE  5C2D               	subwf	_grid_power_low_voltage,w,c
  3469  000EE0  502A               	movf	_GRID_Voltage_ADC_val+1,w,c
  3470  000EE2  582E               	subwfb	_grid_power_low_voltage+1,w,c
  3471  000EE4  B0D8               	btfsc	status,0,c
  3472  000EE6  D017               	goto	l4975
  3473                           
  3474                           ;func.c: 595: {
  3475                           ;func.c: 596: init_system( );
  3476  000EE8  EC97  F00B         	call	_init_system	;wreg free
  3477                           
  3478                           ;func.c: 597: init_USART( );
  3479  000EEC  ECA6  F00D         	call	_init_USART	;wreg free
  3480                           
  3481                           ;func.c: 598: printf( "\n\r Vin ADC = %d", GRID_Voltage_ADC_val );
  3482  000EF0  0EA0               	movlw	low STR_29
  3483  000EF2  6E1C               	movwf	printf@f,c
  3484  000EF4  0E1F               	movlw	high STR_29
  3485  000EF6  6E1D               	movwf	printf@f+1,c
  3486  000EF8  C029  F01E         	movff	_GRID_Voltage_ADC_val,?_printf+2
  3487  000EFC  C02A  F01F         	movff	_GRID_Voltage_ADC_val+1,?_printf+3
  3488  000F00  ECE7  F000         	call	_printf	;wreg free
  3489                           
  3490                           ;func.c: 599: printf( " GRID POWER DETECTED so WAKING UP" );
  3491  000F04  0EAE               	movlw	low STR_30
  3492  000F06  6E1C               	movwf	printf@f,c
  3493  000F08  0E1C               	movlw	high STR_30
  3494  000F0A  6E1D               	movwf	printf@f+1,c
  3495  000F0C  ECE7  F000         	call	_printf	;wreg free
  3496                           
  3497                           ;func.c: 600: sw_stat = ST_BY;
  3498  000F10  0E02               	movlw	2
  3499  000F12  6E49               	movwf	_sw_stat,c
  3500  000F14  D000               	goto	l4975
  3501  000F16                     l4975:
  3502                           
  3503                           ;func.c: 601: }
  3504                           ;func.c: 602: }
  3505                           ;func.c: 603: }
  3506                           ;func.c: 604: if (sw_stat == SLEEP)
  3507  000F16  0449               	decf	_sw_stat,w,c
  3508  000F18  A4D8               	btfss	status,2,c
  3509  000F1A  D003               	goto	l590
  3510                           
  3511                           ;func.c: 605: FVRCONbits.FVREN = 0;
  3512  000F1C  010F               	movlb	15	; () banked
  3513  000F1E  9F42               	bcf	66,7,b	;volatile
  3514  000F20  D000               	goto	l590
  3515  000F22                     l590:
  3516                           
  3517                           ;func.c: 606: }
  3518                           ;func.c: 609: if( !PORTBbits.RB0 )
  3519  000F22  B081               	btfsc	3969,0,c	;volatile
  3520  000F24  D020               	goto	l4991
  3521                           
  3522                           ;func.c: 610: {
  3523                           ;func.c: 611: exit_sleep_count++;
  3524  000F26  0100               	movlb	0	; () banked
  3525  000F28  4B92               	infsnz	_exit_sleep_count& (0+255),f,b
  3526  000F2A  2B93               	incf	(_exit_sleep_count+1)& (0+255),f,b
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;func.c: 612: if ( exit_sleep_count >= exit_sleep_press )
  3530  000F2C  0100               	movlb	0	; () banked
  3531  000F2E  51EB               	movf	_exit_sleep_press& (0+255),w,b
  3532  000F30  0100               	movlb	0	; () banked
  3533  000F32  5D92               	subwf	_exit_sleep_count& (0+255),w,b
  3534  000F34  0100               	movlb	0	; () banked
  3535  000F36  51EC               	movf	(_exit_sleep_press+1)& (0+255),w,b
  3536  000F38  0100               	movlb	0	; () banked
  3537  000F3A  5993               	subwfb	(_exit_sleep_count+1)& (0+255),w,b
  3538  000F3C  A0D8               	btfss	status,0,c
  3539  000F3E  D019               	goto	l4993
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;func.c: 613: {
  3543                           ;func.c: 615: init_system( );
  3544  000F40  EC97  F00B         	call	_init_system	;wreg free
  3545                           
  3546                           ;func.c: 616: init_USART( );
  3547  000F44  ECA6  F00D         	call	_init_USART	;wreg free
  3548                           
  3549                           ;func.c: 617: printf( "\n\rTEST_SW press detected so" );
  3550  000F48  0EA4               	movlw	low STR_31
  3551  000F4A  6E1C               	movwf	printf@f,c
  3552  000F4C  0E1D               	movlw	high STR_31
  3553  000F4E  6E1D               	movwf	printf@f+1,c
  3554  000F50  ECE7  F000         	call	_printf	;wreg free
  3555                           
  3556                           ;func.c: 618: printf( "WAKING UP" );
  3557  000F54  0EC6               	movlw	low (STR_30+24)
  3558  000F56  6E1C               	movwf	printf@f,c
  3559  000F58  0E1C               	movlw	high (STR_30+24)
  3560  000F5A  6E1D               	movwf	printf@f+1,c
  3561  000F5C  ECE7  F000         	call	_printf	;wreg free
  3562                           
  3563                           ;func.c: 619: sw_stat = ST_BY;
  3564  000F60  0E02               	movlw	2
  3565  000F62  6E49               	movwf	_sw_stat,c
  3566                           
  3567                           ;func.c: 620: }
  3568                           ;func.c: 621: }
  3569  000F64  D006               	goto	l4993
  3570  000F66                     l4991:
  3571                           
  3572                           ;func.c: 622: else
  3573                           ;func.c: 623: exit_sleep_count = 0;
  3574  000F66  0E00               	movlw	0
  3575  000F68  0100               	movlb	0	; () banked
  3576  000F6A  6F93               	movwf	(_exit_sleep_count+1)& (0+255),b
  3577  000F6C  0E00               	movlw	0
  3578  000F6E  6F92               	movwf	_exit_sleep_count& (0+255),b
  3579                           
  3580                           ; BSR set to: 0
  3581  000F70  D000               	goto	l4993
  3582  000F72                     l4993:
  3583  000F72  0449               	decf	_sw_stat,w,c
  3584  000F74  B4D8               	btfsc	status,2,c
  3585  000F76  D76F               	goto	l588
  3586  000F78  0012               	return		;funcret
  3587  000F7A                     __end_of_sleep_stat_hendler:
  3588                           	opt stack 0
  3589                           tblptru	equ	0xFF8
  3590                           intcon	equ	0xFF2
  3591                           postinc0	equ	0xFEE
  3592                           wreg	equ	0xFE8
  3593                           status	equ	0xFD8
  3594                           
  3595 ;; *************** function _readA2D *****************
  3596 ;; Defined at:
  3597 ;;		line 14 in file "../a2d.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;  channel         1    wreg     unsigned char 
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;  channel         1   19[COMRAM] unsigned char 
  3602 ;;  _dcnt           1   21[COMRAM] unsigned char 
  3603 ;;  _dcnt           1   20[COMRAM] unsigned char 
  3604 ;;  A2D_Result      2   23[COMRAM] unsigned int 
  3605 ;;  i               1   22[COMRAM] unsigned char 
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  2   15[COMRAM] unsigned int 
  3608 ;; Registers used:
  3609 ;;		wreg, status,2, status,0
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMRAM   BANK0   BANK1
  3615 ;;      Params:         2       0       0
  3616 ;;      Locals:         6       0       0
  3617 ;;      Temps:          2       0       0
  3618 ;;      Totals:        10       0       0
  3619 ;;Total ram usage:       10 bytes
  3620 ;; Hardware stack levels used:    1
  3621 ;; Hardware stack levels required when called:    1
  3622 ;; This function calls:
  3623 ;;		Nothing
  3624 ;; This function is called by:
  3625 ;;		_sleep_stat_hendler
  3626 ;;		_main
  3627 ;; This function uses a non-reentrant model
  3628 ;;
  3629                           
  3630                           	psect	text6
  3631  0015A8                     __ptext6:
  3632                           	opt stack 0
  3633  0015A8                     _readA2D:
  3634                           	opt stack 28
  3635                           
  3636                           ;incstack = 0
  3637                           ;readA2D@channel stored from wreg
  3638  0015A8  6E14               	movwf	readA2D@channel,c
  3639                           
  3640                           ;a2d.c: 17: unsigned char i;
  3641                           ;a2d.c: 18: unsigned int A2D_Result;
  3642                           ;a2d.c: 20: ADCON0 = (channel << 2) + 0x01;
  3643  0015AA  C014  F012         	movff	readA2D@channel,??_readA2D
  3644  0015AE  90D8               	bcf	status,0,c
  3645  0015B0  3612               	rlcf	??_readA2D,f,c
  3646  0015B2  90D8               	bcf	status,0,c
  3647  0015B4  3612               	rlcf	??_readA2D,f,c
  3648  0015B6  2812               	incf	??_readA2D,w,c
  3649  0015B8  6EC2               	movwf	4034,c	;volatile
  3650                           
  3651                           ;a2d.c: 21: ADCON1=0b00000000;
  3652  0015BA  0E00               	movlw	0
  3653  0015BC  6EC1               	movwf	4033,c	;volatile
  3654                           
  3655                           ;a2d.c: 22: ADCON1bits.PVCFG = 2;
  3656  0015BE  50C1               	movf	4033,w,c	;volatile
  3657  0015C0  0BF3               	andlw	-13
  3658  0015C2  0908               	iorlw	8
  3659  0015C4  6EC1               	movwf	4033,c	;volatile
  3660                           
  3661                           ;a2d.c: 23: ADCON2=0b10101111;
  3662  0015C6  0EAF               	movlw	175
  3663  0015C8  6EC0               	movwf	4032,c	;volatile
  3664                           
  3665                           ;a2d.c: 27: { unsigned char _dcnt; _dcnt = (10)*((16*1000L)/(12*1000L)); while(--_dcnt !
      +                          = 0) continue; };
  3666  0015CA  0E0A               	movlw	10
  3667  0015CC  6E15               	movwf	readA2D@_dcnt,c
  3668  0015CE  D000               	goto	l169
  3669  0015D0                     l169:
  3670  0015D0  2E15               	decfsz	readA2D@_dcnt,f,c
  3671  0015D2  D7FE               	goto	l169
  3672  0015D4  D000               	goto	l3259
  3673  0015D6                     l3259:
  3674                           
  3675                           ;a2d.c: 29: A2D_Result=0;
  3676  0015D6  0E00               	movlw	0
  3677  0015D8  6E19               	movwf	readA2D@A2D_Result+1,c
  3678  0015DA  0E00               	movlw	0
  3679  0015DC  6E18               	movwf	readA2D@A2D_Result,c
  3680                           
  3681                           ;a2d.c: 30: for(i=0;i<4;i++)
  3682  0015DE  0E00               	movlw	0
  3683  0015E0  6E17               	movwf	readA2D@i,c
  3684  0015E2                     l3261:
  3685  0015E2  0E03               	movlw	3
  3686  0015E4  6417               	cpfsgt	readA2D@i,c
  3687  0015E6  D001               	goto	l3265
  3688  0015E8  D011               	goto	l3275
  3689  0015EA                     l3265:
  3690                           
  3691                           ;a2d.c: 31: {
  3692                           ;a2d.c: 32: { unsigned char _dcnt; _dcnt = (10)*((16*1000L)/(12*1000L)); while(--_dcnt !
      +                          = 0) continue; };
  3693  0015EA  0E0A               	movlw	10
  3694  0015EC  6E16               	movwf	readA2D@_dcnt_180,c
  3695  0015EE  D000               	goto	l174
  3696  0015F0                     l174:
  3697  0015F0  2E16               	decfsz	readA2D@_dcnt_180,f,c
  3698  0015F2  D7FE               	goto	l174
  3699                           
  3700                           ;a2d.c: 33: GODONE=1;
  3701  0015F4  82C2               	bsf	4034,1,c	;volatile
  3702                           
  3703                           ;a2d.c: 34: while(GODONE)
  3704  0015F6  D000               	goto	l177
  3705  0015F8                     l177:
  3706  0015F8  B2C2               	btfsc	4034,1,c	;volatile
  3707  0015FA  D7FE               	goto	l177
  3708                           
  3709                           ;a2d.c: 36: A2D_Result+=ADRESH<<8;
  3710  0015FC  50C4               	movf	4036,w,c	;volatile
  3711  0015FE  2619               	addwf	readA2D@A2D_Result+1,f,c
  3712                           
  3713                           ;a2d.c: 37: A2D_Result+=ADRESL;
  3714  001600  50C3               	movf	4035,w,c	;volatile
  3715  001602  2618               	addwf	readA2D@A2D_Result,f,c
  3716  001604  0E00               	movlw	0
  3717  001606  2219               	addwfc	readA2D@A2D_Result+1,f,c
  3718  001608  2A17               	incf	readA2D@i,f,c
  3719  00160A  D7EB               	goto	l3261
  3720  00160C                     l3275:
  3721                           
  3722                           ;a2d.c: 38: }
  3723                           ;a2d.c: 39: A2D_Result=A2D_Result/4;
  3724  00160C  C018  F012         	movff	readA2D@A2D_Result,??_readA2D
  3725  001610  C019  F013         	movff	readA2D@A2D_Result+1,??_readA2D+1
  3726  001614  90D8               	bcf	status,0,c
  3727  001616  3213               	rrcf	??_readA2D+1,f,c
  3728  001618  3212               	rrcf	??_readA2D,f,c
  3729  00161A  90D8               	bcf	status,0,c
  3730  00161C  3213               	rrcf	??_readA2D+1,f,c
  3731  00161E  3212               	rrcf	??_readA2D,f,c
  3732  001620  C012  F018         	movff	??_readA2D,readA2D@A2D_Result
  3733  001624  C013  F019         	movff	??_readA2D+1,readA2D@A2D_Result+1
  3734                           
  3735                           ;a2d.c: 44: return A2D_Result;
  3736  001628  C018  F010         	movff	readA2D@A2D_Result,?_readA2D
  3737  00162C  C019  F011         	movff	readA2D@A2D_Result+1,?_readA2D+1
  3738  001630  0012               	return	
  3739  001632  0012               	return		;funcret
  3740  001634                     __end_of_readA2D:
  3741                           	opt stack 0
  3742                           tblptru	equ	0xFF8
  3743                           intcon	equ	0xFF2
  3744                           postinc0	equ	0xFEE
  3745                           wreg	equ	0xFE8
  3746                           status	equ	0xFD8
  3747                           
  3748 ;; *************** function _init_system *****************
  3749 ;; Defined at:
  3750 ;;		line 36 in file "../func.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;		None
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;		None
  3755 ;; Return value:  Size  Location     Type
  3756 ;;		None               void
  3757 ;; Registers used:
  3758 ;;		wreg, status,2
  3759 ;; Tracked objects:
  3760 ;;		On entry : 0/0
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:     COMRAM   BANK0   BANK1
  3764 ;;      Params:         0       0       0
  3765 ;;      Locals:         0       0       0
  3766 ;;      Temps:          0       0       0
  3767 ;;      Totals:         0       0       0
  3768 ;;Total ram usage:        0 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; Hardware stack levels required when called:    1
  3771 ;; This function calls:
  3772 ;;		Nothing
  3773 ;; This function is called by:
  3774 ;;		_sleep_stat_hendler
  3775 ;;		_main
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           	psect	text7
  3780  00172E                     __ptext7:
  3781                           	opt stack 0
  3782  00172E                     _init_system:
  3783                           	opt stack 28
  3784                           
  3785                           ;func.c: 38: LATA = 0b00000000;;
  3786                           
  3787                           ;incstack = 0
  3788  00172E  0E00               	movlw	0
  3789  001730  6E89               	movwf	3977,c	;volatile
  3790                           
  3791                           ;func.c: 39: LATB = 0b00000000;;
  3792  001732  0E00               	movlw	0
  3793  001734  6E8A               	movwf	3978,c	;volatile
  3794                           
  3795                           ;func.c: 40: LATC = 0b00000010;;
  3796  001736  0E02               	movlw	2
  3797  001738  6E8B               	movwf	3979,c	;volatile
  3798                           
  3799                           ;func.c: 43: TRISA = 0b00001011;;
  3800  00173A  0E0B               	movlw	11
  3801  00173C  6E92               	movwf	3986,c	;volatile
  3802                           
  3803                           ;func.c: 44: TRISB = 0b10110111;;
  3804  00173E  0EB7               	movlw	183
  3805  001740  6E93               	movwf	3987,c	;volatile
  3806                           
  3807                           ;func.c: 45: TRISC = 0b10000001;;
  3808  001742  0E81               	movlw	129
  3809  001744  6E94               	movwf	3988,c	;volatile
  3810                           
  3811                           ;func.c: 49: ANSELA = 0b00001011;;
  3812  001746  0E0B               	movlw	11
  3813  001748  010F               	movlb	15	; () banked
  3814  00174A  6F38               	movwf	56,b	;volatile
  3815                           
  3816                           ;func.c: 50: ANSELB = 0b00000000;;
  3817  00174C  0E00               	movlw	0
  3818  00174E  010F               	movlb	15	; () banked
  3819  001750  6F39               	movwf	57,b	;volatile
  3820                           
  3821                           ;func.c: 51: ANSELC = 0b00000000;;
  3822  001752  0E00               	movlw	0
  3823  001754  010F               	movlb	15	; () banked
  3824  001756  6F3A               	movwf	58,b	;volatile
  3825                           
  3826                           ;func.c: 53: WPUB = 0b00000001;
  3827  001758  0E01               	movlw	1
  3828  00175A  6E61               	movwf	3937,c	;volatile
  3829                           
  3830                           ; BSR set to: 15
  3831                           ;func.c: 54: nRBPU = 0;
  3832  00175C  9EF1               	bcf	intcon2,7,c	;volatile
  3833                           
  3834                           ;func.c: 58: T1CON = 0b00000001;
  3835  00175E  0E01               	movlw	1
  3836  001760  6ECD               	movwf	4045,c	;volatile
  3837                           
  3838                           ; BSR set to: 15
  3839                           ;func.c: 59: TMR1IF = 0;
  3840  001762  909E               	bcf	3998,0,c	;volatile
  3841                           
  3842                           ; BSR set to: 15
  3843                           ;func.c: 60: TMR1IE = 1;
  3844  001764  809D               	bsf	3997,0,c	;volatile
  3845                           
  3846                           ;func.c: 64: FVRCONbits.FVRS = 2;
  3847  001766  010F               	movlb	15	; () banked
  3848  001768  5142               	movf	66,w,b	;volatile
  3849  00176A  0BCF               	andlw	-49
  3850  00176C  0920               	iorlw	32
  3851  00176E  6F42               	movwf	66,b	;volatile
  3852                           
  3853                           ; BSR set to: 15
  3854                           ;func.c: 65: FVRCONbits.FVREN = 1;
  3855  001770  010F               	movlb	15	; () banked
  3856  001772  8F42               	bsf	66,7,b	;volatile
  3857                           
  3858                           ;func.c: 67: Count_10m = 0;
  3859  001774  0E00               	movlw	0
  3860  001776  6E3A               	movwf	_Count_10m,c
  3861                           
  3862                           ; BSR set to: 15
  3863                           ;func.c: 68: stat.msec5 = 0;
  3864  001778  9033               	bcf	_stat,0,c
  3865                           
  3866                           ; BSR set to: 15
  3867                           ;func.c: 69: stat.msec100 = 0;
  3868  00177A  9433               	bcf	_stat,2,c
  3869                           
  3870                           ; BSR set to: 15
  3871                           ;func.c: 70: stat.msec1000 = 0;
  3872  00177C  9833               	bcf	_stat,4,c
  3873                           
  3874                           ;func.c: 72: Count_100m = 0;
  3875  00177E  0E00               	movlw	0
  3876  001780  6E38               	movwf	_Count_100m,c
  3877                           
  3878                           ;func.c: 73: Count_1000m = 0;
  3879  001782  0E00               	movlw	0
  3880  001784  6E37               	movwf	_Count_1000m,c
  3881                           
  3882                           ;func.c: 75: test_led_time_count = 0;
  3883  001786  0E00               	movlw	0
  3884  001788  0100               	movlb	0	; () banked
  3885  00178A  6FB9               	movwf	(_test_led_time_count+1)& (0+255),b
  3886  00178C  0E00               	movlw	0
  3887  00178E  6FB8               	movwf	_test_led_time_count& (0+255),b
  3888                           
  3889                           ;func.c: 76: exit_sleep_press = 4;
  3890  001790  0E00               	movlw	0
  3891  001792  0100               	movlb	0	; () banked
  3892  001794  6FEC               	movwf	(_exit_sleep_press+1)& (0+255),b
  3893  001796  0E04               	movlw	4
  3894  001798  6FEB               	movwf	_exit_sleep_press& (0+255),b
  3895                           
  3896                           ; BSR set to: 0
  3897  00179A  0012               	return		;funcret
  3898  00179C                     __end_of_init_system:
  3899                           	opt stack 0
  3900                           tblptru	equ	0xFF8
  3901                           intcon	equ	0xFF2
  3902                           intcon2	equ	0xFF1
  3903                           postinc0	equ	0xFEE
  3904                           wreg	equ	0xFE8
  3905                           status	equ	0xFD8
  3906                           
  3907 ;; *************** function _init_USART *****************
  3908 ;; Defined at:
  3909 ;;		line 22 in file "../usart.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;		None
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;		None
  3914 ;; Return value:  Size  Location     Type
  3915 ;;		None               void
  3916 ;; Registers used:
  3917 ;;		wreg, status,2
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1
  3923 ;;      Params:         0       0       0
  3924 ;;      Locals:         0       0       0
  3925 ;;      Temps:          0       0       0
  3926 ;;      Totals:         0       0       0
  3927 ;;Total ram usage:        0 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    1
  3930 ;; This function calls:
  3931 ;;		Nothing
  3932 ;; This function is called by:
  3933 ;;		_sleep_stat_hendler
  3934 ;;		_main
  3935 ;; This function uses a non-reentrant model
  3936 ;;
  3937                           
  3938                           	psect	text8
  3939  001B4C                     __ptext8:
  3940                           	opt stack 0
  3941  001B4C                     _init_USART:
  3942                           	opt stack 28
  3943                           
  3944                           ;usart.c: 25: TRISC7=1;
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;incstack = 0
  3948  001B4C  8E94               	bsf	3988,7,c	;volatile
  3949                           
  3950                           ;usart.c: 26: TRISC6=1;
  3951  001B4E  8C94               	bsf	3988,6,c	;volatile
  3952                           
  3953                           ;usart.c: 34: TXSTA = 0b00100100;
  3954  001B50  0E24               	movlw	36
  3955  001B52  6EAC               	movwf	4012,c	;volatile
  3956                           
  3957                           ;usart.c: 35: RCSTA = 0b10010000;
  3958  001B54  0E90               	movlw	144
  3959  001B56  6EAB               	movwf	4011,c	;volatile
  3960                           
  3961                           ;usart.c: 43: SPBRG =8;
  3962  001B58  0E08               	movlw	8
  3963  001B5A  6EAF               	movwf	4015,c	;volatile
  3964                           
  3965                           ;usart.c: 44: BAUDCON1bits.BRG16 = 1;
  3966  001B5C  86B8               	bsf	4024,3,c	;volatile
  3967                           
  3968                           ;usart.c: 47: RCIF=0;
  3969  001B5E  9A9E               	bcf	3998,5,c	;volatile
  3970                           
  3971                           ;usart.c: 48: RCIE=1;
  3972  001B60  8A9D               	bsf	3997,5,c	;volatile
  3973  001B62  0012               	return		;funcret
  3974  001B64                     __end_of_init_USART:
  3975                           	opt stack 0
  3976                           tblptru	equ	0xFF8
  3977                           intcon	equ	0xFF2
  3978                           intcon2	equ	0xFF1
  3979                           postinc0	equ	0xFEE
  3980                           wreg	equ	0xFE8
  3981                           status	equ	0xFD8
  3982                           
  3983 ;; *************** function _blink_GREEN_LED_and_RED_LED_and_BUZZER *****************
  3984 ;; Defined at:
  3985 ;;		line 191 in file "../func.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;  blinks          1    wreg     unsigned char 
  3988 ;;  timeMs          2   30[COMRAM] unsigned int 
  3989 ;; Auto vars:     Size  Location     Type
  3990 ;;  blinks          1   32[COMRAM] unsigned char 
  3991 ;;  i               1   33[COMRAM] unsigned char 
  3992 ;; Return value:  Size  Location     Type
  3993 ;;		None               void
  3994 ;; Registers used:
  3995 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMRAM   BANK0   BANK1
  4001 ;;      Params:         2       0       0
  4002 ;;      Locals:         2       0       0
  4003 ;;      Temps:          0       0       0
  4004 ;;      Totals:         4       0       0
  4005 ;;Total ram usage:        4 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; Hardware stack levels required when called:    4
  4008 ;; This function calls:
  4009 ;;		_DelayMs
  4010 ;;		_activate_buzzer
  4011 ;; This function is called by:
  4012 ;;		_sleep_stat_hendler
  4013 ;;		_main
  4014 ;; This function uses a non-reentrant model
  4015 ;;
  4016                           
  4017                           	psect	text9
  4018  0019EC                     __ptext9:
  4019                           	opt stack 0
  4020  0019EC                     _blink_GREEN_LED_and_RED_LED_and_BUZZER:
  4021                           	opt stack 25
  4022                           
  4023                           ;incstack = 0
  4024                           ;blink_GREEN_LED_and_RED_LED_and_BUZZER@blinks stored from wreg
  4025  0019EC  6E21               	movwf	blink_GREEN_LED_and_RED_LED_and_BUZZER@blinks,c
  4026                           
  4027                           ;func.c: 193: unsigned char i;
  4028                           ;func.c: 194: for ( i = 0; i < blinks; i++ )
  4029  0019EE  0E00               	movlw	0
  4030  0019F0  6E22               	movwf	blink_GREEN_LED_and_RED_LED_and_BUZZER@i,c
  4031  0019F2  D013               	goto	l4421
  4032  0019F4                     l513:
  4033                           
  4034                           ;func.c: 195: {
  4035                           ;func.c: 196: LATAbits.LATA7 = 1;
  4036  0019F4  8E89               	bsf	3977,7,c	;volatile
  4037                           
  4038                           ;func.c: 197: LATAbits.LATA6 = 1;
  4039  0019F6  8C89               	bsf	3977,6,c	;volatile
  4040                           
  4041                           ;func.c: 198: activate_buzzer( 1, 1, 2 );
  4042  0019F8  0E01               	movlw	1
  4043  0019FA  6E1C               	movwf	activate_buzzer@On_duration,c
  4044  0019FC  0E02               	movlw	2
  4045  0019FE  6E1D               	movwf	activate_buzzer@Off_duration,c
  4046  001A00  0E01               	movlw	1
  4047  001A02  EC87  F00D         	call	_activate_buzzer
  4048                           
  4049                           ;func.c: 199: DelayMs( timeMs );
  4050  001A06  501F               	movf	blink_GREEN_LED_and_RED_LED_and_BUZZER@timeMs,w,c
  4051  001A08  EC65  F00D         	call	_DelayMs
  4052                           
  4053                           ;func.c: 200: LATAbits.LATA6 = 0;
  4054  001A0C  9C89               	bcf	3977,6,c	;volatile
  4055                           
  4056                           ;func.c: 201: LATAbits.LATA7 = 0;
  4057  001A0E  9E89               	bcf	3977,7,c	;volatile
  4058                           
  4059                           ;func.c: 202: DelayMs( timeMs );
  4060  001A10  501F               	movf	blink_GREEN_LED_and_RED_LED_and_BUZZER@timeMs,w,c
  4061  001A12  EC65  F00D         	call	_DelayMs
  4062  001A16  2A22               	incf	blink_GREEN_LED_and_RED_LED_and_BUZZER@i,f,c
  4063  001A18  D000               	goto	l4421
  4064  001A1A                     l4421:
  4065  001A1A  5021               	movf	blink_GREEN_LED_and_RED_LED_and_BUZZER@blinks,w,c
  4066  001A1C  5C22               	subwf	blink_GREEN_LED_and_RED_LED_and_BUZZER@i,w,c
  4067  001A1E  A0D8               	btfss	status,0,c
  4068  001A20  D7E9               	goto	l513
  4069  001A22  0012               	return		;funcret
  4070  001A24                     __end_of_blink_GREEN_LED_and_RED_LED_and_BUZZER:
  4071                           	opt stack 0
  4072                           tblptru	equ	0xFF8
  4073                           intcon	equ	0xFF2
  4074                           intcon2	equ	0xFF1
  4075                           postinc0	equ	0xFEE
  4076                           wreg	equ	0xFE8
  4077                           status	equ	0xFD8
  4078                           
  4079 ;; *************** function _short_test_stat_hendler *****************
  4080 ;; Defined at:
  4081 ;;		line 695 in file "../func.c"
  4082 ;; Parameters:    Size  Location     Type
  4083 ;;		None
  4084 ;; Auto vars:     Size  Location     Type
  4085 ;;		None
  4086 ;; Return value:  Size  Location     Type
  4087 ;;		None               void
  4088 ;; Registers used:
  4089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4090 ;; Tracked objects:
  4091 ;;		On entry : 0/0
  4092 ;;		On exit  : 0/0
  4093 ;;		Unchanged: 0/0
  4094 ;; Data sizes:     COMRAM   BANK0   BANK1
  4095 ;;      Params:         0       0       0
  4096 ;;      Locals:         0       0       0
  4097 ;;      Temps:          0       0       0
  4098 ;;      Totals:         0       0       0
  4099 ;;Total ram usage:        0 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:    4
  4102 ;; This function calls:
  4103 ;;		_eeprom_time_delay
  4104 ;;		_printf
  4105 ;; This function is called by:
  4106 ;;		_main
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           	psect	text10
  4111  0011FE                     __ptext10:
  4112                           	opt stack 0
  4113  0011FE                     _short_test_stat_hendler:
  4114                           	opt stack 26
  4115                           
  4116                           ;func.c: 697: if ( last_sw_stat != SHORT_TEST )
  4117                           
  4118                           ;incstack = 0
  4119  0011FE  0E07               	movlw	7
  4120  001200  1842               	xorwf	_last_sw_stat,w,c
  4121  001202  B4D8               	btfsc	status,2,c
  4122  001204  D020               	goto	l5065
  4123                           
  4124                           ;func.c: 698: {
  4125                           ;func.c: 699: printf( "\n\rENTERING SHORT TEST MODE\n\r " );
  4126  001206  0E30               	movlw	low STR_38
  4127  001208  6E1C               	movwf	printf@f,c
  4128  00120A  0E1D               	movlw	high STR_38
  4129  00120C  6E1D               	movwf	printf@f+1,c
  4130  00120E  ECE7  F000         	call	_printf	;wreg free
  4131                           
  4132                           ;func.c: 700: if ( last_sw_stat == WORK )
  4133  001212  0E03               	movlw	3
  4134  001214  1842               	xorwf	_last_sw_stat,w,c
  4135  001216  A4D8               	btfss	status,2,c
  4136  001218  D00F               	goto	l5063
  4137                           
  4138                           ;func.c: 701: {
  4139                           ;func.c: 702: printf( "\n\rWE ARE IN WORK MODE" );
  4140  00121A  0E98               	movlw	low STR_39
  4141  00121C  6E1C               	movwf	printf@f,c
  4142  00121E  0E1E               	movlw	high STR_39
  4143  001220  6E1D               	movwf	printf@f+1,c
  4144  001222  ECE7  F000         	call	_printf	;wreg free
  4145                           
  4146                           ;func.c: 703: eeprom_time_delay( 24 );
  4147  001226  0E00               	movlw	0
  4148  001228  6E19               	movwf	eeprom_time_delay@houres+1,c
  4149  00122A  0E18               	movlw	24
  4150  00122C  6E18               	movwf	eeprom_time_delay@houres,c
  4151  00122E  EC9F  F00C         	call	_eeprom_time_delay	;wreg free
  4152                           
  4153                           ;func.c: 704: sw_stat = WORK;
  4154  001232  0E03               	movlw	3
  4155  001234  6E49               	movwf	_sw_stat,c
  4156                           
  4157                           ;func.c: 705: }
  4158  001236  0012               	return	
  4159  001238                     l5063:
  4160                           
  4161                           ;func.c: 706: else
  4162                           ;func.c: 707: {
  4163                           ;func.c: 708: last_sw_stat = SHORT_TEST;
  4164  001238  0E07               	movlw	7
  4165  00123A  6E42               	movwf	_last_sw_stat,c
  4166                           
  4167                           ;func.c: 709: test_time_count = 0;
  4168  00123C  0E00               	movlw	0
  4169  00123E  6E36               	movwf	_test_time_count+1,c
  4170  001240  0E00               	movlw	0
  4171  001242  6E35               	movwf	_test_time_count,c
  4172                           
  4173                           ;func.c: 710: }
  4174                           ;func.c: 711: }
  4175  001244  0012               	return	
  4176  001246                     l5065:
  4177                           
  4178                           ;func.c: 712: else
  4179                           ;func.c: 713: {
  4180                           ;func.c: 714: if ( GRID_Voltage_ADC_val < grid_power_low_voltage )
  4181  001246  502D               	movf	_grid_power_low_voltage,w,c
  4182  001248  5C29               	subwf	_GRID_Voltage_ADC_val,w,c
  4183  00124A  502E               	movf	_grid_power_low_voltage+1,w,c
  4184  00124C  582A               	subwfb	_GRID_Voltage_ADC_val+1,w,c
  4185  00124E  B0D8               	btfsc	status,0,c
  4186  001250  D00E               	goto	l5075
  4187                           
  4188                           ;func.c: 715: {
  4189                           ;func.c: 716: eeprom_time_delay( 24 );
  4190  001252  0E00               	movlw	0
  4191  001254  6E19               	movwf	eeprom_time_delay@houres+1,c
  4192  001256  0E18               	movlw	24
  4193  001258  6E18               	movwf	eeprom_time_delay@houres,c
  4194  00125A  EC9F  F00C         	call	_eeprom_time_delay	;wreg free
  4195                           
  4196                           ;func.c: 717: charging_stat = 0;
  4197  00125E  0E00               	movlw	0
  4198  001260  0100               	movlb	0	; () banked
  4199  001262  6FD8               	movwf	_charging_stat& (0+255),b
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;func.c: 718: power_stat = POWER_FAIL;
  4203  001264  0E01               	movlw	1
  4204  001266  0100               	movlb	0	; () banked
  4205  001268  6FE5               	movwf	_power_stat& (0+255),b
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;func.c: 720: sw_stat = WORK;
  4209  00126A  0E03               	movlw	3
  4210  00126C  D03C               	goto	L1
  4211  00126E                     l5075:
  4212                           
  4213                           ;func.c: 722: else
  4214                           ;func.c: 723: {
  4215                           ;func.c: 724: if ( test_time_count >= short_time_test_pass )
  4216  00126E  0100               	movlb	0	; () banked
  4217  001270  51B0               	movf	_short_time_test_pass& (0+255),w,b
  4218  001272  5C35               	subwf	_test_time_count,w,c
  4219  001274  0100               	movlb	0	; () banked
  4220  001276  51B1               	movf	(_short_time_test_pass+1)& (0+255),w,b
  4221  001278  5836               	subwfb	_test_time_count+1,w,c
  4222  00127A  A0D8               	btfss	status,0,c
  4223  00127C  D00D               	goto	l5083
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;func.c: 725: {
  4227                           ;func.c: 726: printf( "\n\r SYSTEM TEST HAS BEEN SUCCSEFULL!!\n\r " );
  4228  00127E  0E19               	movlw	low STR_40
  4229  001280  6E1C               	movwf	printf@f,c
  4230  001282  0E1C               	movlw	high STR_40
  4231  001284  6E1D               	movwf	printf@f+1,c
  4232  001286  ECE7  F000         	call	_printf	;wreg free
  4233                           
  4234                           ;func.c: 727: sw_stat = ST_BY;
  4235  00128A  0E02               	movlw	2
  4236  00128C  6E49               	movwf	_sw_stat,c
  4237                           
  4238                           ;func.c: 728: test_time_count = 0;
  4239  00128E  0E00               	movlw	0
  4240  001290  6E36               	movwf	_test_time_count+1,c
  4241  001292  0E00               	movlw	0
  4242  001294  6E35               	movwf	_test_time_count,c
  4243                           
  4244                           ;func.c: 729: }
  4245  001296  D029               	goto	l5099
  4246  001298                     l5083:
  4247                           
  4248                           ;func.c: 730: else
  4249                           ;func.c: 731: {
  4250                           ;func.c: 732: if ( Vbat_ADC_val > min_bat_voltage_for_test )
  4251  001298  502B               	movf	_Vbat_ADC_val,w,c
  4252  00129A  0100               	movlb	0	; () banked
  4253  00129C  5DA2               	subwf	_min_bat_voltage_for_test& (0+255),w,b
  4254  00129E  502C               	movf	_Vbat_ADC_val+1,w,c
  4255  0012A0  0100               	movlb	0	; () banked
  4256  0012A2  59A3               	subwfb	(_min_bat_voltage_for_test+1)& (0+255),w,b
  4257  0012A4  B0D8               	btfsc	status,0,c
  4258  0012A6  D00F               	goto	l5091
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;func.c: 733: {
  4262                           ;func.c: 734: sw_stat = SHORT_TEST;
  4263  0012A8  0E07               	movlw	7
  4264  0012AA  6E49               	movwf	_sw_stat,c
  4265                           
  4266                           ; BSR set to: 0
  4267                           ;func.c: 735: test_time_count++;
  4268  0012AC  4A35               	infsnz	_test_time_count,f,c
  4269  0012AE  2A36               	incf	_test_time_count+1,f,c
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;func.c: 736: printf( "\n\rTEST_COUNT IS %d seconds\n\r", test_time_count );
  4273  0012B0  0E4E               	movlw	low STR_41
  4274  0012B2  6E1C               	movwf	printf@f,c
  4275  0012B4  0E1D               	movlw	high STR_41
  4276  0012B6  6E1D               	movwf	printf@f+1,c
  4277  0012B8  C035  F01E         	movff	_test_time_count,?_printf+2
  4278  0012BC  C036  F01F         	movff	_test_time_count+1,?_printf+3
  4279  0012C0  ECE7  F000         	call	_printf	;wreg free
  4280                           
  4281                           ;func.c: 737: }
  4282  0012C4  D012               	goto	l5099
  4283  0012C6                     l5091:
  4284                           
  4285                           ;func.c: 738: else
  4286                           ;func.c: 739: {
  4287                           ;func.c: 740: printf( "\n\r SYSTEM TEST HAS BEEN FAILD! \n\r " );
  4288  0012C6  0E8B               	movlw	low STR_42
  4289  0012C8  6E1C               	movwf	printf@f,c
  4290  0012CA  0E1C               	movlw	high STR_42
  4291  0012CC  6E1D               	movwf	printf@f+1,c
  4292  0012CE  ECE7  F000         	call	_printf	;wreg free
  4293                           
  4294                           ;func.c: 741: test_time_count = 0;
  4295  0012D2  0E00               	movlw	0
  4296  0012D4  6E36               	movwf	_test_time_count+1,c
  4297  0012D6  0E00               	movlw	0
  4298  0012D8  6E35               	movwf	_test_time_count,c
  4299                           
  4300                           ;func.c: 742: test_faild_flag = 1;
  4301  0012DA  0E00               	movlw	0
  4302  0012DC  0100               	movlb	0	; () banked
  4303  0012DE  6FEE               	movwf	(_test_faild_flag+1)& (0+255),b
  4304  0012E0  0E01               	movlw	1
  4305  0012E2  6FED               	movwf	_test_faild_flag& (0+255),b
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;func.c: 743: sw_stat = ERROR;
  4309  0012E4  0E05               	movlw	5
  4310  0012E6                     L1:
  4311  0012E6  6E49               	movwf	_sw_stat,c
  4312                           
  4313                           ; BSR set to: 0
  4314                           
  4315                           ; BSR set to: 0
  4316  0012E8  D000               	goto	l5099
  4317  0012EA                     l5099:
  4318                           
  4319                           ;func.c: 744: }
  4320                           ;func.c: 745: }
  4321                           ;func.c: 746: }
  4322                           ;func.c: 747: if ( sw_stat == SHORT_TEST )
  4323  0012EA  0E07               	movlw	7
  4324  0012EC  1849               	xorwf	_sw_stat,w,c
  4325  0012EE  A4D8               	btfss	status,2,c
  4326  0012F0  0012               	return	
  4327                           
  4328                           ;func.c: 748: {
  4329                           ;func.c: 749: normal_charging = 0;
  4330  0012F2  0E00               	movlw	0
  4331  0012F4  0100               	movlb	0	; () banked
  4332  0012F6  6FE3               	movwf	_normal_charging& (0+255),b
  4333                           
  4334                           ;func.c: 750: trickl_charging = 0;
  4335  0012F8  0E00               	movlw	0
  4336  0012FA  0100               	movlb	0	; () banked
  4337  0012FC  6FE9               	movwf	_trickl_charging& (0+255),b
  4338                           
  4339                           ;func.c: 751: red_led = 0;
  4340  0012FE  0E00               	movlw	0
  4341  001300  6E45               	movwf	_red_led,c
  4342                           
  4343                           ;func.c: 752: green_led = 0;
  4344  001302  0E00               	movlw	0
  4345  001304  0100               	movlb	0	; () banked
  4346  001306  6FDE               	movwf	_green_led& (0+255),b
  4347                           
  4348                           ;func.c: 753: main_led_stat = 1;
  4349  001308  0E01               	movlw	1
  4350  00130A  6E43               	movwf	_main_led_stat,c
  4351                           
  4352                           ; BSR set to: 0
  4353  00130C  0012               	return	
  4354                           
  4355                           ; BSR set to: 0
  4356  00130E  0012               	return		;funcret
  4357  001310                     __end_of_short_test_stat_hendler:
  4358                           	opt stack 0
  4359                           tblptru	equ	0xFF8
  4360                           intcon	equ	0xFF2
  4361                           intcon2	equ	0xFF1
  4362                           postinc0	equ	0xFEE
  4363                           wreg	equ	0xFE8
  4364                           status	equ	0xFD8
  4365                           
  4366 ;; *************** function _output_hendler *****************
  4367 ;; Defined at:
  4368 ;;		line 758 in file "../func.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;		None
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;		None
  4373 ;; Return value:  Size  Location     Type
  4374 ;;		None               void
  4375 ;; Registers used:
  4376 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMRAM   BANK0   BANK1
  4382 ;;      Params:         0       0       0
  4383 ;;      Locals:         0       0       0
  4384 ;;      Temps:          0       0       0
  4385 ;;      Totals:         0       0       0
  4386 ;;Total ram usage:        0 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; Hardware stack levels required when called:    4
  4389 ;; This function calls:
  4390 ;;		_activate_buzzer
  4391 ;; This function is called by:
  4392 ;;		_main
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           	psect	text11
  4397  00185A                     __ptext11:
  4398                           	opt stack 0
  4399  00185A                     _output_hendler:
  4400                           	opt stack 26
  4401                           
  4402                           ;func.c: 760: LATCbits.LATC2 = normal_charging;
  4403                           
  4404                           ;incstack = 0
  4405  00185A  0100               	movlb	0	; () banked
  4406  00185C  B1E3               	btfsc	_normal_charging& (0+255),0,b
  4407  00185E  D002               	bra	u4725
  4408  001860  948B               	bcf	3979,2,c	;volatile
  4409  001862  D001               	bra	u4726
  4410  001864                     u4725:
  4411  001864  848B               	bsf	3979,2,c	;volatile
  4412  001866                     u4726:
  4413                           
  4414                           ;func.c: 761: LATCbits.LATC4 = trickl_charging;
  4415  001866  0100               	movlb	0	; () banked
  4416  001868  B1E9               	btfsc	_trickl_charging& (0+255),0,b
  4417  00186A  D002               	bra	u4735
  4418  00186C  988B               	bcf	3979,4,c	;volatile
  4419  00186E  D001               	bra	u4736
  4420  001870                     u4735:
  4421  001870  888B               	bsf	3979,4,c	;volatile
  4422  001872                     u4736:
  4423                           
  4424                           ;func.c: 762: LATAbits.LATA7 = red_led;
  4425  001872  B045               	btfsc	_red_led,0,c
  4426  001874  D002               	bra	u4745
  4427  001876  9E89               	bcf	3977,7,c	;volatile
  4428  001878  D001               	bra	u4746
  4429  00187A                     u4745:
  4430  00187A  8E89               	bsf	3977,7,c	;volatile
  4431  00187C                     u4746:
  4432                           
  4433                           ;func.c: 763: LATAbits.LATA6 = green_led;
  4434  00187C  0100               	movlb	0	; () banked
  4435  00187E  B1DE               	btfsc	_green_led& (0+255),0,b
  4436  001880  D002               	bra	u4755
  4437  001882  9C89               	bcf	3977,6,c	;volatile
  4438  001884  D001               	bra	u4756
  4439  001886                     u4755:
  4440  001886  8C89               	bsf	3977,6,c	;volatile
  4441  001888                     u4756:
  4442                           
  4443                           ;func.c: 764: LATBbits.LATB3 = main_led_stat;
  4444  001888  B043               	btfsc	_main_led_stat,0,c
  4445  00188A  D002               	bra	u4765
  4446  00188C  968A               	bcf	3978,3,c	;volatile
  4447  00188E  D001               	bra	u4766
  4448  001890                     u4765:
  4449  001890  868A               	bsf	3978,3,c	;volatile
  4450  001892                     u4766:
  4451                           
  4452                           ;func.c: 765: if( last_main_led_stat != main_led_stat )
  4453  001892  5043               	movf	_main_led_stat,w,c
  4454  001894  0100               	movlb	0	; () banked
  4455  001896  19E0               	xorwf	_last_main_led_stat& (0+255),w,b
  4456  001898  B4D8               	btfsc	status,2,c
  4457  00189A  D008               	goto	l5109
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;func.c: 766: activate_buzzer( 1, 1, 2 );
  4461  00189C  0E01               	movlw	1
  4462  00189E  6E1C               	movwf	activate_buzzer@On_duration,c
  4463  0018A0  0E02               	movlw	2
  4464  0018A2  6E1D               	movwf	activate_buzzer@Off_duration,c
  4465  0018A4  0E01               	movlw	1
  4466  0018A6  EC87  F00D         	call	_activate_buzzer
  4467  0018AA  D000               	goto	l5109
  4468  0018AC                     l5109:
  4469                           
  4470                           ;func.c: 767: last_main_led_stat = main_led_stat;
  4471  0018AC  C043  F0E0         	movff	_main_led_stat,_last_main_led_stat
  4472  0018B0  0012               	return		;funcret
  4473  0018B2                     __end_of_output_hendler:
  4474                           	opt stack 0
  4475                           tblptru	equ	0xFF8
  4476                           intcon	equ	0xFF2
  4477                           intcon2	equ	0xFF1
  4478                           postinc0	equ	0xFEE
  4479                           wreg	equ	0xFE8
  4480                           status	equ	0xFD8
  4481                           
  4482 ;; *************** function _long_test_stat_hendler *****************
  4483 ;; Defined at:
  4484 ;;		line 628 in file "../func.c"
  4485 ;; Parameters:    Size  Location     Type
  4486 ;;		None
  4487 ;; Auto vars:     Size  Location     Type
  4488 ;;		None
  4489 ;; Return value:  Size  Location     Type
  4490 ;;		None               void
  4491 ;; Registers used:
  4492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMRAM   BANK0   BANK1
  4498 ;;      Params:         0       0       0
  4499 ;;      Locals:         0       0       0
  4500 ;;      Temps:          0       0       0
  4501 ;;      Totals:         0       0       0
  4502 ;;Total ram usage:        0 bytes
  4503 ;; Hardware stack levels used:    1
  4504 ;; Hardware stack levels required when called:    4
  4505 ;; This function calls:
  4506 ;;		_eeprom_time_delay
  4507 ;;		_printf
  4508 ;;		_save_int_to_eeprom
  4509 ;; This function is called by:
  4510 ;;		_main
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514                           	psect	text12
  4515  0010D6                     __ptext12:
  4516                           	opt stack 0
  4517  0010D6                     _long_test_stat_hendler:
  4518                           	opt stack 26
  4519                           
  4520                           ;func.c: 630: if ( last_sw_stat != LONG_TEST )
  4521                           
  4522                           ;incstack = 0
  4523  0010D6  0E06               	movlw	6
  4524  0010D8  1842               	xorwf	_last_sw_stat,w,c
  4525  0010DA  B4D8               	btfsc	status,2,c
  4526  0010DC  D020               	goto	l5009
  4527                           
  4528                           ;func.c: 631: {
  4529                           ;func.c: 632: printf( "\n\rENTERING LONG TEST MODE\n\r " );
  4530  0010DE  0E6B               	movlw	low STR_33
  4531  0010E0  6E1C               	movwf	printf@f,c
  4532  0010E2  0E1D               	movlw	high STR_33
  4533  0010E4  6E1D               	movwf	printf@f+1,c
  4534  0010E6  ECE7  F000         	call	_printf	;wreg free
  4535                           
  4536                           ;func.c: 633: if ( last_sw_stat == WORK )
  4537  0010EA  0E03               	movlw	3
  4538  0010EC  1842               	xorwf	_last_sw_stat,w,c
  4539  0010EE  A4D8               	btfss	status,2,c
  4540  0010F0  D00F               	goto	l5007
  4541                           
  4542                           ;func.c: 634: {
  4543                           ;func.c: 635: printf( "\n\rTEST DELAYED" );
  4544  0010F2  0EB0               	movlw	low STR_34
  4545  0010F4  6E1C               	movwf	printf@f,c
  4546  0010F6  0E1F               	movlw	high STR_34
  4547  0010F8  6E1D               	movwf	printf@f+1,c
  4548  0010FA  ECE7  F000         	call	_printf	;wreg free
  4549                           
  4550                           ;func.c: 636: eeprom_time_delay( 24 );
  4551  0010FE  0E00               	movlw	0
  4552  001100  6E19               	movwf	eeprom_time_delay@houres+1,c
  4553  001102  0E18               	movlw	24
  4554  001104  6E18               	movwf	eeprom_time_delay@houres,c
  4555  001106  EC9F  F00C         	call	_eeprom_time_delay	;wreg free
  4556                           
  4557                           ;func.c: 637: sw_stat = WORK;
  4558  00110A  0E03               	movlw	3
  4559  00110C  6E49               	movwf	_sw_stat,c
  4560                           
  4561                           ;func.c: 638: }
  4562  00110E  0012               	return	
  4563  001110                     l5007:
  4564                           
  4565                           ;func.c: 639: else
  4566                           ;func.c: 640: {
  4567                           ;func.c: 642: last_sw_stat = LONG_TEST;
  4568  001110  0E06               	movlw	6
  4569  001112  6E42               	movwf	_last_sw_stat,c
  4570                           
  4571                           ;func.c: 644: test_time_count = 0;
  4572  001114  0E00               	movlw	0
  4573  001116  6E36               	movwf	_test_time_count+1,c
  4574  001118  0E00               	movlw	0
  4575  00111A  6E35               	movwf	_test_time_count,c
  4576                           
  4577                           ;func.c: 645: }
  4578                           ;func.c: 646: }
  4579  00111C  0012               	return	
  4580  00111E                     l5009:
  4581                           
  4582                           ;func.c: 647: else
  4583                           ;func.c: 648: {
  4584                           ;func.c: 649: if ( GRID_Voltage_ADC_val < grid_power_low_voltage )
  4585  00111E  502D               	movf	_grid_power_low_voltage,w,c
  4586  001120  5C29               	subwf	_GRID_Voltage_ADC_val,w,c
  4587  001122  502E               	movf	_grid_power_low_voltage+1,w,c
  4588  001124  582A               	subwfb	_GRID_Voltage_ADC_val+1,w,c
  4589  001126  B0D8               	btfsc	status,0,c
  4590  001128  D00E               	goto	l5019
  4591                           
  4592                           ;func.c: 650: {
  4593                           ;func.c: 651: eeprom_time_delay( 24 );
  4594  00112A  0E00               	movlw	0
  4595  00112C  6E19               	movwf	eeprom_time_delay@houres+1,c
  4596  00112E  0E18               	movlw	24
  4597  001130  6E18               	movwf	eeprom_time_delay@houres,c
  4598  001132  EC9F  F00C         	call	_eeprom_time_delay	;wreg free
  4599                           
  4600                           ;func.c: 652: charging_stat = 0;
  4601  001136  0E00               	movlw	0
  4602  001138  0100               	movlb	0	; () banked
  4603  00113A  6FD8               	movwf	_charging_stat& (0+255),b
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;func.c: 653: power_stat = POWER_FAIL;
  4607  00113C  0E01               	movlw	1
  4608  00113E  0100               	movlb	0	; () banked
  4609  001140  6FE5               	movwf	_power_stat& (0+255),b
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;func.c: 655: sw_stat = WORK;
  4613  001142  0E03               	movlw	3
  4614  001144  D047               	goto	L2
  4615  001146                     l5019:
  4616                           
  4617                           ;func.c: 657: else
  4618                           ;func.c: 658: {
  4619                           ;func.c: 659: if ( Vbat_ADC_val > min_bat_voltage_for_test )
  4620  001146  502B               	movf	_Vbat_ADC_val,w,c
  4621  001148  0100               	movlb	0	; () banked
  4622  00114A  5DA2               	subwf	_min_bat_voltage_for_test& (0+255),w,b
  4623  00114C  502C               	movf	_Vbat_ADC_val+1,w,c
  4624  00114E  0100               	movlb	0	; () banked
  4625  001150  59A3               	subwfb	(_min_bat_voltage_for_test+1)& (0+255),w,b
  4626  001152  B0D8               	btfsc	status,0,c
  4627  001154  D00F               	goto	l5027
  4628                           
  4629                           ; BSR set to: 0
  4630                           ;func.c: 660: {
  4631                           ;func.c: 661: sw_stat = LONG_TEST;
  4632  001156  0E06               	movlw	6
  4633  001158  6E49               	movwf	_sw_stat,c
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;func.c: 662: test_time_count++;
  4637  00115A  4A35               	infsnz	_test_time_count,f,c
  4638  00115C  2A36               	incf	_test_time_count+1,f,c
  4639                           
  4640                           ; BSR set to: 0
  4641                           ;func.c: 663: printf( "\n\rTEST IS %d seconds\n\r ", test_time_count );
  4642  00115E  0E0F               	movlw	low STR_35
  4643  001160  6E1C               	movwf	printf@f,c
  4644  001162  0E1E               	movlw	high STR_35
  4645  001164  6E1D               	movwf	printf@f+1,c
  4646  001166  C035  F01E         	movff	_test_time_count,?_printf+2
  4647  00116A  C036  F01F         	movff	_test_time_count+1,?_printf+3
  4648  00116E  ECE7  F000         	call	_printf	;wreg free
  4649                           
  4650                           ;func.c: 664: }
  4651  001172  D032               	goto	l5047
  4652  001174                     l5027:
  4653                           
  4654                           ;func.c: 665: else
  4655                           ;func.c: 666: if ( test_time_count >= long_time_test_pass )
  4656  001174  0100               	movlb	0	; () banked
  4657  001176  51A0               	movf	_long_time_test_pass& (0+255),w,b
  4658  001178  5C35               	subwf	_test_time_count,w,c
  4659  00117A  0100               	movlb	0	; () banked
  4660  00117C  51A1               	movf	(_long_time_test_pass+1)& (0+255),w,b
  4661  00117E  5836               	subwfb	_test_time_count+1,w,c
  4662  001180  A0D8               	btfss	status,0,c
  4663  001182  D018               	goto	l5039
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;func.c: 667: {
  4667                           ;func.c: 668: printf( "\n\rSYSTEM TEST HAS BEEN SUCCSEFULL\n\r " );
  4668  001184  0E41               	movlw	low STR_36
  4669  001186  6E1C               	movwf	printf@f,c
  4670  001188  0E1C               	movlw	high STR_36
  4671  00118A  6E1D               	movwf	printf@f+1,c
  4672  00118C  ECE7  F000         	call	_printf	;wreg free
  4673                           
  4674                           ;func.c: 670: sw_stat = ST_BY;
  4675  001190  0E02               	movlw	2
  4676  001192  6E49               	movwf	_sw_stat,c
  4677                           
  4678                           ;func.c: 671: test_time_count = 0;
  4679  001194  0E00               	movlw	0
  4680  001196  6E36               	movwf	_test_time_count+1,c
  4681  001198  0E00               	movlw	0
  4682  00119A  6E35               	movwf	_test_time_count,c
  4683                           
  4684                           ;func.c: 672: saved_hours_counter = 0;
  4685  00119C  0E00               	movlw	0
  4686  00119E  6E32               	movwf	_saved_hours_counter+1,c
  4687  0011A0  0E00               	movlw	0
  4688  0011A2  6E31               	movwf	_saved_hours_counter,c
  4689                           
  4690                           ;func.c: 673: save_int_to_eeprom( SAVED_TIME_FOR_TEST_EE_ADD, saved_hours_counter );
  4691  0011A4  C031  F014         	movff	_saved_hours_counter,save_int_to_eeprom@data
  4692  0011A8  C032  F015         	movff	_saved_hours_counter+1,save_int_to_eeprom@data+1
  4693  0011AC  0E12               	movlw	18
  4694  0011AE  ECBC  F00C         	call	_save_int_to_eeprom
  4695                           
  4696                           ;func.c: 674: }
  4697  0011B2  D012               	goto	l5047
  4698  0011B4                     l5039:
  4699                           
  4700                           ;func.c: 675: else
  4701                           ;func.c: 676: {
  4702                           ;func.c: 677: printf( "\n\rSYSTEM TEST HAS BEEN FAILD\n\r " );
  4703  0011B4  0EF1               	movlw	low STR_37
  4704  0011B6  6E1C               	movwf	printf@f,c
  4705  0011B8  0E1C               	movlw	high STR_37
  4706  0011BA  6E1D               	movwf	printf@f+1,c
  4707  0011BC  ECE7  F000         	call	_printf	;wreg free
  4708                           
  4709                           ;func.c: 679: test_time_count = 0;
  4710  0011C0  0E00               	movlw	0
  4711  0011C2  6E36               	movwf	_test_time_count+1,c
  4712  0011C4  0E00               	movlw	0
  4713  0011C6  6E35               	movwf	_test_time_count,c
  4714                           
  4715                           ;func.c: 680: test_faild_flag = 1;
  4716  0011C8  0E00               	movlw	0
  4717  0011CA  0100               	movlb	0	; () banked
  4718  0011CC  6FEE               	movwf	(_test_faild_flag+1)& (0+255),b
  4719  0011CE  0E01               	movlw	1
  4720  0011D0  6FED               	movwf	_test_faild_flag& (0+255),b
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;func.c: 681: sw_stat = ERROR;
  4724  0011D2  0E05               	movlw	5
  4725  0011D4                     L2:
  4726  0011D4  6E49               	movwf	_sw_stat,c
  4727                           
  4728                           ; BSR set to: 0
  4729                           
  4730                           ; BSR set to: 0
  4731  0011D6  D000               	goto	l5047
  4732  0011D8                     l5047:
  4733                           
  4734                           ;func.c: 682: }
  4735                           ;func.c: 683: }
  4736                           ;func.c: 684: if ( sw_stat == LONG_TEST )
  4737  0011D8  0E06               	movlw	6
  4738  0011DA  1849               	xorwf	_sw_stat,w,c
  4739  0011DC  A4D8               	btfss	status,2,c
  4740  0011DE  0012               	return	
  4741                           
  4742                           ;func.c: 685: {
  4743                           ;func.c: 686: normal_charging = 0;
  4744  0011E0  0E00               	movlw	0
  4745  0011E2  0100               	movlb	0	; () banked
  4746  0011E4  6FE3               	movwf	_normal_charging& (0+255),b
  4747                           
  4748                           ;func.c: 687: trickl_charging = 0;
  4749  0011E6  0E00               	movlw	0
  4750  0011E8  0100               	movlb	0	; () banked
  4751  0011EA  6FE9               	movwf	_trickl_charging& (0+255),b
  4752                           
  4753                           ;func.c: 688: red_led = 0;
  4754  0011EC  0E00               	movlw	0
  4755  0011EE  6E45               	movwf	_red_led,c
  4756                           
  4757                           ;func.c: 689: green_led = 0;
  4758  0011F0  0E00               	movlw	0
  4759  0011F2  0100               	movlb	0	; () banked
  4760  0011F4  6FDE               	movwf	_green_led& (0+255),b
  4761                           
  4762                           ;func.c: 690: main_led_stat = 1;
  4763  0011F6  0E01               	movlw	1
  4764  0011F8  6E43               	movwf	_main_led_stat,c
  4765                           
  4766                           ; BSR set to: 0
  4767  0011FA  0012               	return	
  4768                           
  4769                           ; BSR set to: 0
  4770  0011FC  0012               	return		;funcret
  4771  0011FE                     __end_of_long_test_stat_hendler:
  4772                           	opt stack 0
  4773                           tblptru	equ	0xFF8
  4774                           intcon	equ	0xFF2
  4775                           intcon2	equ	0xFF1
  4776                           postinc0	equ	0xFEE
  4777                           wreg	equ	0xFE8
  4778                           status	equ	0xFD8
  4779                           
  4780 ;; *************** function _eeprom_time_delay *****************
  4781 ;; Defined at:
  4782 ;;		line 342 in file "../func.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;  houres          2   23[COMRAM] unsigned int 
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;  temp            2   27[COMRAM] unsigned int 
  4787 ;; Return value:  Size  Location     Type
  4788 ;;		None               void
  4789 ;; Registers used:
  4790 ;;		wreg, status,2, status,0, cstack
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMRAM   BANK0   BANK1
  4796 ;;      Params:         2       0       0
  4797 ;;      Locals:         2       0       0
  4798 ;;      Temps:          2       0       0
  4799 ;;      Totals:         6       0       0
  4800 ;;Total ram usage:        6 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; Hardware stack levels required when called:    3
  4803 ;; This function calls:
  4804 ;;		_load_int_from_eeprom
  4805 ;;		_save_int_to_eeprom
  4806 ;; This function is called by:
  4807 ;;		_long_test_stat_hendler
  4808 ;;		_short_test_stat_hendler
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           	psect	text13
  4813  00193E                     __ptext13:
  4814                           	opt stack 0
  4815  00193E                     _eeprom_time_delay:
  4816                           	opt stack 26
  4817                           
  4818                           ;func.c: 344: unsigned int temp;
  4819                           ;func.c: 345: temp = load_int_from_eeprom( SAVED_TIME_FOR_TEST_EE_ADD );
  4820                           
  4821                           ;incstack = 0
  4822  00193E  0E12               	movlw	18
  4823  001940  EC7F  F00C         	call	_load_int_from_eeprom
  4824  001944  C012  F01C         	movff	?_load_int_from_eeprom,eeprom_time_delay@temp
  4825  001948  C013  F01D         	movff	?_load_int_from_eeprom+1,eeprom_time_delay@temp+1
  4826                           
  4827                           ;func.c: 346: temp = temp - houres;
  4828  00194C  C018  F01A         	movff	eeprom_time_delay@houres,??_eeprom_time_delay
  4829  001950  C019  F01B         	movff	eeprom_time_delay@houres+1,??_eeprom_time_delay+1
  4830  001954  1E1A               	comf	??_eeprom_time_delay,f,c
  4831  001956  1E1B               	comf	??_eeprom_time_delay+1,f,c
  4832  001958  4A1A               	infsnz	??_eeprom_time_delay,f,c
  4833  00195A  2A1B               	incf	??_eeprom_time_delay+1,f,c
  4834  00195C  501C               	movf	eeprom_time_delay@temp,w,c
  4835  00195E  241A               	addwf	??_eeprom_time_delay,w,c
  4836  001960  6E1C               	movwf	eeprom_time_delay@temp,c
  4837  001962  501D               	movf	eeprom_time_delay@temp+1,w,c
  4838  001964  201B               	addwfc	??_eeprom_time_delay+1,w,c
  4839  001966  6E1D               	movwf	eeprom_time_delay@temp+1,c
  4840                           
  4841                           ;func.c: 347: save_int_to_eeprom( SAVED_TIME_FOR_TEST_EE_ADD, temp );
  4842  001968  C01C  F014         	movff	eeprom_time_delay@temp,save_int_to_eeprom@data
  4843  00196C  C01D  F015         	movff	eeprom_time_delay@temp+1,save_int_to_eeprom@data+1
  4844  001970  0E12               	movlw	18
  4845  001972  ECBC  F00C         	call	_save_int_to_eeprom
  4846  001976  0012               	return		;funcret
  4847  001978                     __end_of_eeprom_time_delay:
  4848                           	opt stack 0
  4849                           tblptru	equ	0xFF8
  4850                           intcon	equ	0xFF2
  4851                           intcon2	equ	0xFF1
  4852                           postinc0	equ	0xFEE
  4853                           wreg	equ	0xFE8
  4854                           status	equ	0xFD8
  4855                           
  4856 ;; *************** function _save_int_to_eeprom *****************
  4857 ;; Defined at:
  4858 ;;		line 288 in file "../func.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;  add             1    wreg     unsigned char 
  4861 ;;  data            2   19[COMRAM] unsigned int 
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;  add             1   21[COMRAM] unsigned char 
  4864 ;; Return value:  Size  Location     Type
  4865 ;;		None               void
  4866 ;; Registers used:
  4867 ;;		wreg, status,2, status,0, cstack
  4868 ;; Tracked objects:
  4869 ;;		On entry : 0/0
  4870 ;;		On exit  : 0/0
  4871 ;;		Unchanged: 0/0
  4872 ;; Data sizes:     COMRAM   BANK0   BANK1
  4873 ;;      Params:         2       0       0
  4874 ;;      Locals:         1       0       0
  4875 ;;      Temps:          0       0       0
  4876 ;;      Totals:         3       0       0
  4877 ;;Total ram usage:        3 bytes
  4878 ;; Hardware stack levels used:    1
  4879 ;; Hardware stack levels required when called:    2
  4880 ;; This function calls:
  4881 ;;		_Busy_eep
  4882 ;;		_DelayMs
  4883 ;;		_Write_b_eep
  4884 ;; This function is called by:
  4885 ;;		_eeprom_time_delay
  4886 ;;		_long_test_stat_hendler
  4887 ;;		_main
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891                           	psect	text14
  4892  001978                     __ptext14:
  4893                           	opt stack 0
  4894  001978                     _save_int_to_eeprom:
  4895                           	opt stack 26
  4896                           
  4897                           ;incstack = 0
  4898                           ;save_int_to_eeprom@add stored from wreg
  4899  001978  6E16               	movwf	save_int_to_eeprom@add,c
  4900                           
  4901                           ;func.c: 290: (Busy_eep(), Write_b_eep(add,(unsigned char)((data>>8)&0x00ff)));
  4902  00197A  ECC3  F00D         	call	_Busy_eep	;wreg free
  4903  00197E  C016  F010         	movff	save_int_to_eeprom@add,Write_b_eep@badd
  4904  001982  6A11               	clrf	Write_b_eep@badd+1,c
  4905  001984  5015               	movf	save_int_to_eeprom@data+1,w,c
  4906  001986  6E12               	movwf	Write_b_eep@bdat,c
  4907  001988  ECD9  F00C         	call	_Write_b_eep	;wreg free
  4908                           
  4909                           ;func.c: 291: DelayMs( 10 );
  4910  00198C  0E0A               	movlw	10
  4911  00198E  EC65  F00D         	call	_DelayMs
  4912                           
  4913                           ;func.c: 292: (Busy_eep(), Write_b_eep(add + 1,(unsigned char)(data&0x00ff)));
  4914  001992  ECC3  F00D         	call	_Busy_eep	;wreg free
  4915  001996  0E01               	movlw	1
  4916  001998  2416               	addwf	save_int_to_eeprom@add,w,c
  4917  00199A  6E10               	movwf	Write_b_eep@badd,c
  4918  00199C  6A11               	clrf	Write_b_eep@badd+1,c
  4919  00199E  0E00               	movlw	0
  4920  0019A0  2211               	addwfc	Write_b_eep@badd+1,f,c
  4921  0019A2  C014  F012         	movff	save_int_to_eeprom@data,Write_b_eep@bdat
  4922  0019A6  ECD9  F00C         	call	_Write_b_eep	;wreg free
  4923                           
  4924                           ;func.c: 293: DelayMs( 10 );
  4925  0019AA  0E0A               	movlw	10
  4926  0019AC  EC65  F00D         	call	_DelayMs
  4927  0019B0  0012               	return		;funcret
  4928  0019B2                     __end_of_save_int_to_eeprom:
  4929                           	opt stack 0
  4930                           tblptru	equ	0xFF8
  4931                           intcon	equ	0xFF2
  4932                           intcon2	equ	0xFF1
  4933                           postinc0	equ	0xFEE
  4934                           wreg	equ	0xFE8
  4935                           status	equ	0xFD8
  4936                           
  4937 ;; *************** function _Write_b_eep *****************
  4938 ;; Defined at:
  4939 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\write_B.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;  badd            2   15[COMRAM] unsigned int 
  4942 ;;  bdat            1   17[COMRAM] unsigned char 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;  GIE_BIT_VAL     1   18[COMRAM] unsigned char 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;		None               void
  4947 ;; Registers used:
  4948 ;;		wreg, status,2
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMRAM   BANK0   BANK1
  4954 ;;      Params:         3       0       0
  4955 ;;      Locals:         1       0       0
  4956 ;;      Temps:          0       0       0
  4957 ;;      Totals:         4       0       0
  4958 ;;Total ram usage:        4 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:    1
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_save_int_to_eeprom
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           	psect	text15
  4969  0019B2                     __ptext15:
  4970                           	opt stack 0
  4971  0019B2                     _Write_b_eep:
  4972                           	opt stack 26
  4973                           
  4974                           ;incstack = 0
  4975  0019B2  0E00               	movlw	0
  4976  0019B4  6E13               	movwf	Write_b_eep@GIE_BIT_VAL,c
  4977  0019B6  C010  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  4978  0019BA  C012  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  4979  0019BE  9EA6               	bcf	4006,7,c	;volatile
  4980  0019C0  9CA6               	bcf	4006,6,c	;volatile
  4981  0019C2  84A6               	bsf	4006,2,c	;volatile
  4982  0019C4  0E00               	movlw	0
  4983  0019C6  BEF2               	btfsc	intcon,7,c	;volatile
  4984  0019C8  0E01               	movlw	1
  4985  0019CA  6E13               	movwf	Write_b_eep@GIE_BIT_VAL,c
  4986  0019CC  9EF2               	bcf	intcon,7,c	;volatile
  4987  0019CE  0E55               	movlw	85
  4988  0019D0  6EA7               	movwf	4007,c	;volatile
  4989  0019D2  0EAA               	movlw	170
  4990  0019D4  6EA7               	movwf	4007,c	;volatile
  4991  0019D6  82A6               	bsf	4006,1,c	;volatile
  4992  0019D8  D000               	goto	l1179
  4993  0019DA                     l1179:
  4994  0019DA  B2A6               	btfsc	4006,1,c	;volatile
  4995  0019DC  D7FE               	goto	l1179
  4996  0019DE  B013               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  4997  0019E0  D002               	bra	u1895
  4998  0019E2  9EF2               	bcf	intcon,7,c	;volatile
  4999  0019E4  D001               	bra	u1896
  5000  0019E6                     u1895:
  5001  0019E6  8EF2               	bsf	intcon,7,c	;volatile
  5002  0019E8                     u1896:
  5003  0019E8  94A6               	bcf	4006,2,c	;volatile
  5004  0019EA  0012               	return		;funcret
  5005  0019EC                     __end_of_Write_b_eep:
  5006                           	opt stack 0
  5007                           tblptru	equ	0xFF8
  5008                           intcon	equ	0xFF2
  5009                           intcon2	equ	0xFF1
  5010                           postinc0	equ	0xFEE
  5011                           wreg	equ	0xFE8
  5012                           status	equ	0xFD8
  5013                           
  5014 ;; *************** function _Busy_eep *****************
  5015 ;; Defined at:
  5016 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\busy_eep.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;		None
  5019 ;; Auto vars:     Size  Location     Type
  5020 ;;		None
  5021 ;; Return value:  Size  Location     Type
  5022 ;;		None               void
  5023 ;; Registers used:
  5024 ;;		None
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMRAM   BANK0   BANK1
  5030 ;;      Params:         0       0       0
  5031 ;;      Locals:         0       0       0
  5032 ;;      Temps:          0       0       0
  5033 ;;      Totals:         0       0       0
  5034 ;;Total ram usage:        0 bytes
  5035 ;; Hardware stack levels used:    1
  5036 ;; Hardware stack levels required when called:    1
  5037 ;; This function calls:
  5038 ;;		Nothing
  5039 ;; This function is called by:
  5040 ;;		_save_int_to_eeprom
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           	psect	text16
  5045  001B86                     __ptext16:
  5046                           	opt stack 0
  5047  001B86                     _Busy_eep:
  5048                           	opt stack 26
  5049                           
  5050                           ;incstack = 0
  5051  001B86  D000               	goto	l1152
  5052  001B88                     l1152:
  5053  001B88  B2A6               	btfsc	4006,1,c	;volatile
  5054  001B8A  D7FE               	goto	l1152
  5055  001B8C  0012               	return		;funcret
  5056  001B8E                     __end_of_Busy_eep:
  5057                           	opt stack 0
  5058                           tblptru	equ	0xFF8
  5059                           intcon	equ	0xFF2
  5060                           intcon2	equ	0xFF1
  5061                           postinc0	equ	0xFEE
  5062                           wreg	equ	0xFE8
  5063                           status	equ	0xFD8
  5064                           
  5065 ;; *************** function _error_stat_hendler *****************
  5066 ;; Defined at:
  5067 ;;		line 482 in file "../func.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;		None
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;		None
  5072 ;; Return value:  Size  Location     Type
  5073 ;;		None               void
  5074 ;; Registers used:
  5075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMRAM   BANK0   BANK1
  5081 ;;      Params:         0       0       0
  5082 ;;      Locals:         0       0       0
  5083 ;;      Temps:          2       0       0
  5084 ;;      Totals:         2       0       0
  5085 ;;Total ram usage:        2 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    4
  5088 ;; This function calls:
  5089 ;;		_activate_buzzer
  5090 ;;		_blink_RED_LED
  5091 ;;		_load_int_from_eeprom
  5092 ;;		_printf
  5093 ;; This function is called by:
  5094 ;;		_main
  5095 ;; This function uses a non-reentrant model
  5096 ;;
  5097                           
  5098                           	psect	text17
  5099  001310                     __ptext17:
  5100                           	opt stack 0
  5101  001310                     _error_stat_hendler:
  5102                           	opt stack 26
  5103                           
  5104                           ;func.c: 484: red_led = 0;
  5105                           
  5106                           ;incstack = 0
  5107  001310  0E00               	movlw	0
  5108  001312  6E45               	movwf	_red_led,c
  5109                           
  5110                           ;func.c: 485: green_led = 0;
  5111  001314  0E00               	movlw	0
  5112  001316  0100               	movlb	0	; () banked
  5113  001318  6FDE               	movwf	_green_led& (0+255),b
  5114                           
  5115                           ;func.c: 486: main_led_stat = 0;
  5116  00131A  0E00               	movlw	0
  5117  00131C  6E43               	movwf	_main_led_stat,c
  5118                           
  5119                           ; BSR set to: 0
  5120                           ;func.c: 488: if ( last_sw_stat != ERROR )
  5121  00131E  0E05               	movlw	5
  5122  001320  1842               	xorwf	_last_sw_stat,w,c
  5123  001322  B4D8               	btfsc	status,2,c
  5124  001324  D009               	goto	l4897
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;func.c: 489: {
  5128                           ;func.c: 490: printf( "\n\rTO ERROR MODE" );
  5129  001326  0E80               	movlw	low STR_24
  5130  001328  6E1C               	movwf	printf@f,c
  5131  00132A  0E1F               	movlw	high STR_24
  5132  00132C  6E1D               	movwf	printf@f+1,c
  5133  00132E  ECE7  F000         	call	_printf	;wreg free
  5134                           
  5135                           ;func.c: 491: last_sw_stat = ERROR;
  5136  001332  0E05               	movlw	5
  5137  001334  6E42               	movwf	_last_sw_stat,c
  5138                           
  5139                           ;func.c: 492: }
  5140  001336  0012               	return	
  5141  001338                     l4897:
  5142                           
  5143                           ;func.c: 493: else
  5144                           ;func.c: 494: {
  5145                           ;func.c: 495: printf( "\n\r\n\r sw_stat = ERROR;" );
  5146  001338  0E6C               	movlw	low STR_25
  5147  00133A  6E1C               	movwf	printf@f,c
  5148  00133C  0E1E               	movlw	high STR_25
  5149  00133E  6E1D               	movwf	printf@f+1,c
  5150  001340  ECE7  F000         	call	_printf	;wreg free
  5151                           
  5152                           ;func.c: 497: saved_error_buzzer_count = load_int_from_eeprom( ERROR_BUZER_COUNT_EE_ADD 
      +                          );
  5153  001344  0E16               	movlw	22
  5154  001346  EC7F  F00C         	call	_load_int_from_eeprom
  5155  00134A  C012  F0AA         	movff	?_load_int_from_eeprom,_saved_error_buzzer_count
  5156  00134E  C013  F0AB         	movff	?_load_int_from_eeprom+1,_saved_error_buzzer_count+1
  5157                           
  5158                           ;func.c: 498: if ( error_buzzer_count >= saved_error_buzzer_count )
  5159  001352  0100               	movlb	0	; () banked
  5160  001354  51DD               	movf	_error_buzzer_count& (0+255),w,b
  5161  001356  6E26               	movwf	??_error_stat_hendler& (0+255),c
  5162  001358  6A27               	clrf	(??_error_stat_hendler+1)& (0+255),c
  5163  00135A  0100               	movlb	0	; () banked
  5164  00135C  51AA               	movf	_saved_error_buzzer_count& (0+255),w,b
  5165  00135E  5C26               	subwf	??_error_stat_hendler,w,c
  5166  001360  0100               	movlb	0	; () banked
  5167  001362  51AB               	movf	(_saved_error_buzzer_count+1)& (0+255),w,b
  5168  001364  5827               	subwfb	??_error_stat_hendler+1,w,c
  5169  001366  A0D8               	btfss	status,0,c
  5170  001368  D00B               	goto	l4907
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;func.c: 499: {
  5174                           ;func.c: 500: error_buzzer_count = 0;
  5175  00136A  0E00               	movlw	0
  5176  00136C  0100               	movlb	0	; () banked
  5177  00136E  6FDD               	movwf	_error_buzzer_count& (0+255),b
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;func.c: 501: activate_buzzer( 1, 1, 2 );
  5181  001370  0E01               	movlw	1
  5182  001372  6E1C               	movwf	activate_buzzer@On_duration,c
  5183  001374  0E02               	movlw	2
  5184  001376  6E1D               	movwf	activate_buzzer@Off_duration,c
  5185  001378  0E01               	movlw	1
  5186  00137A  EC87  F00D         	call	_activate_buzzer
  5187                           
  5188                           ;func.c: 502: }
  5189  00137E  D003               	goto	l4909
  5190  001380                     l4907:
  5191                           
  5192                           ;func.c: 503: else
  5193                           ;func.c: 504: error_buzzer_count++;
  5194  001380  0100               	movlb	0	; () banked
  5195  001382  2BDD               	incf	_error_buzzer_count& (0+255),f,b
  5196  001384  D000               	goto	l4909
  5197  001386                     l4909:
  5198                           
  5199                           ;func.c: 506: blink_RED_LED( 2, 50 );
  5200  001386  0E00               	movlw	0
  5201  001388  6E14               	movwf	blink_RED_LED@timeMs+1,c
  5202  00138A  0E32               	movlw	50
  5203  00138C  6E13               	movwf	blink_RED_LED@timeMs,c
  5204  00138E  0E02               	movlw	2
  5205  001390  EC2A  F00D         	call	_blink_RED_LED
  5206                           
  5207                           ;func.c: 508: if( Vbat_ADC_val >= total_shorted_bat_voltage )
  5208  001394  0100               	movlb	0	; () banked
  5209  001396  51CA               	movf	_total_shorted_bat_voltage& (0+255),w,b
  5210  001398  5C2B               	subwf	_Vbat_ADC_val,w,c
  5211  00139A  0100               	movlb	0	; () banked
  5212  00139C  51CB               	movf	(_total_shorted_bat_voltage+1)& (0+255),w,b
  5213  00139E  582C               	subwfb	_Vbat_ADC_val+1,w,c
  5214  0013A0  A0D8               	btfss	status,0,c
  5215  0013A2  0012               	return	
  5216                           
  5217                           ; BSR set to: 0
  5218                           ;func.c: 509: {
  5219                           ;func.c: 510: sw_stat = ST_BY;
  5220  0013A4  0E02               	movlw	2
  5221  0013A6  6E49               	movwf	_sw_stat,c
  5222                           
  5223                           ; BSR set to: 0
  5224                           ;func.c: 511: printf( "\n\r BAT VOLTAGE IS GOOD! " );
  5225  0013A8  0EF6               	movlw	low STR_26
  5226  0013AA  6E1C               	movwf	printf@f,c
  5227  0013AC  0E1D               	movlw	high STR_26
  5228  0013AE  6E1D               	movwf	printf@f+1,c
  5229  0013B0  ECE7  F000         	call	_printf	;wreg free
  5230                           
  5231                           ;func.c: 512: printf( "\n\r EXITING ERROR MODE" );
  5232  0013B4  0EAE               	movlw	low STR_27
  5233  0013B6  6E1C               	movwf	printf@f,c
  5234  0013B8  0E1E               	movlw	high STR_27
  5235  0013BA  6E1D               	movwf	printf@f+1,c
  5236  0013BC  ECE7  F000         	call	_printf	;wreg free
  5237  0013C0  0012               	return	
  5238  0013C2  0012               	return		;funcret
  5239  0013C4                     __end_of_error_stat_hendler:
  5240                           	opt stack 0
  5241                           tblptru	equ	0xFF8
  5242                           intcon	equ	0xFF2
  5243                           intcon2	equ	0xFF1
  5244                           postinc0	equ	0xFEE
  5245                           wreg	equ	0xFE8
  5246                           status	equ	0xFD8
  5247                           
  5248 ;; *************** function _blink_RED_LED *****************
  5249 ;; Defined at:
  5250 ;;		line 93 in file "../func.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;  blinks          1    wreg     unsigned char 
  5253 ;;  timeMs          2   18[COMRAM] unsigned int 
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;  blinks          1   20[COMRAM] unsigned char 
  5256 ;;  i               1   21[COMRAM] unsigned char 
  5257 ;; Return value:  Size  Location     Type
  5258 ;;		None               void
  5259 ;; Registers used:
  5260 ;;		wreg, status,2, status,0, cstack
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMRAM   BANK0   BANK1
  5266 ;;      Params:         2       0       0
  5267 ;;      Locals:         2       0       0
  5268 ;;      Temps:          0       0       0
  5269 ;;      Totals:         4       0       0
  5270 ;;Total ram usage:        4 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:    2
  5273 ;; This function calls:
  5274 ;;		_DelayMs
  5275 ;; This function is called by:
  5276 ;;		_error_stat_hendler
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           	psect	text18
  5281  001A54                     __ptext18:
  5282                           	opt stack 0
  5283  001A54                     _blink_RED_LED:
  5284                           	opt stack 27
  5285                           
  5286                           ;incstack = 0
  5287                           ;blink_RED_LED@blinks stored from wreg
  5288  001A54  6E15               	movwf	blink_RED_LED@blinks,c
  5289                           
  5290                           ;func.c: 95: unsigned char i;
  5291                           ;func.c: 96: for ( i = 0; i < blinks; i++ )
  5292  001A56  0E00               	movlw	0
  5293  001A58  6E16               	movwf	blink_RED_LED@i,c
  5294  001A5A  D00A               	goto	l3305
  5295  001A5C                     l470:
  5296                           
  5297                           ;func.c: 97: {
  5298                           ;func.c: 98: LATAbits.LATA7 = 1;
  5299  001A5C  8E89               	bsf	3977,7,c	;volatile
  5300                           
  5301                           ;func.c: 99: DelayMs( timeMs );
  5302  001A5E  5013               	movf	blink_RED_LED@timeMs,w,c
  5303  001A60  EC65  F00D         	call	_DelayMs
  5304                           
  5305                           ;func.c: 100: LATAbits.LATA7 = 0;
  5306  001A64  9E89               	bcf	3977,7,c	;volatile
  5307                           
  5308                           ;func.c: 101: DelayMs( timeMs );
  5309  001A66  5013               	movf	blink_RED_LED@timeMs,w,c
  5310  001A68  EC65  F00D         	call	_DelayMs
  5311  001A6C  2A16               	incf	blink_RED_LED@i,f,c
  5312  001A6E  D000               	goto	l3305
  5313  001A70                     l3305:
  5314  001A70  5015               	movf	blink_RED_LED@blinks,w,c
  5315  001A72  5C16               	subwf	blink_RED_LED@i,w,c
  5316  001A74  A0D8               	btfss	status,0,c
  5317  001A76  D7F2               	goto	l470
  5318                           
  5319                           ;func.c: 102: }
  5320                           ;func.c: 103: __nop();
  5321  001A78  F000               	nop	
  5322                           
  5323                           ;func.c: 104: __nop();
  5324  001A7A  F000               	nop	
  5325  001A7C  0012               	return		;funcret
  5326  001A7E                     __end_of_blink_RED_LED:
  5327                           	opt stack 0
  5328                           tblptru	equ	0xFF8
  5329                           intcon	equ	0xFF2
  5330                           intcon2	equ	0xFF1
  5331                           postinc0	equ	0xFEE
  5332                           wreg	equ	0xFE8
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function _DelayMs *****************
  5336 ;; Defined at:
  5337 ;;		line 10 in file "../delay.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  cnt             1    wreg     unsigned char 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  cnt             1   15[COMRAM] unsigned char 
  5342 ;;  _dcnt           1   17[COMRAM] unsigned char 
  5343 ;;  i               1   16[COMRAM] unsigned char 
  5344 ;; Return value:  Size  Location     Type
  5345 ;;		None               void
  5346 ;; Registers used:
  5347 ;;		wreg, status,2
  5348 ;; Tracked objects:
  5349 ;;		On entry : 0/0
  5350 ;;		On exit  : 0/0
  5351 ;;		Unchanged: 0/0
  5352 ;; Data sizes:     COMRAM   BANK0   BANK1
  5353 ;;      Params:         0       0       0
  5354 ;;      Locals:         3       0       0
  5355 ;;      Temps:          0       0       0
  5356 ;;      Totals:         3       0       0
  5357 ;;Total ram usage:        3 bytes
  5358 ;; Hardware stack levels used:    1
  5359 ;; Hardware stack levels required when called:    1
  5360 ;; This function calls:
  5361 ;;		Nothing
  5362 ;; This function is called by:
  5363 ;;		_blink_RED_LED
  5364 ;;		_blink_GREEN_LED_and_RED_LED_and_BUZZER
  5365 ;;		_save_int_to_eeprom
  5366 ;;		_sleep_stat_hendler
  5367 ;;		_main
  5368 ;;		_blink_GREEN_LED
  5369 ;;		_blink_GREEN_LED_and_RED_LED
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           	psect	text19
  5374  001ACA                     __ptext19:
  5375                           	opt stack 0
  5376  001ACA                     _DelayMs:
  5377                           	opt stack 27
  5378                           
  5379                           ;incstack = 0
  5380                           ;DelayMs@cnt stored from wreg
  5381  001ACA  6E10               	movwf	DelayMs@cnt,c
  5382  001ACC                     l197:
  5383  001ACC  0004               	clrwdt		;# 
  5384                           
  5385                           ;delay.c: 21: i = 4;
  5386  001ACE  0E04               	movlw	4
  5387  001AD0  6E11               	movwf	DelayMs@i,c
  5388  001AD2                     l198:
  5389                           
  5390                           ;delay.c: 23: { unsigned char _dcnt; _dcnt = (250)*((16*1000L)/(12*1000L)); while(--_dcn
      +                          t != 0) continue; };
  5391  001AD2  0EFA               	movlw	250
  5392  001AD4  6E12               	movwf	DelayMs@_dcnt,c
  5393  001AD6  D000               	goto	l199
  5394  001AD8                     l199:
  5395  001AD8  2E12               	decfsz	DelayMs@_dcnt,f,c
  5396  001ADA  D7FE               	goto	l199
  5397                           
  5398                           ;delay.c: 24: } while(--i);
  5399  001ADC  2E11               	decfsz	DelayMs@i,f,c
  5400  001ADE  D7F9               	goto	l198
  5401  001AE0  D000               	goto	l3105
  5402  001AE2                     l3105:
  5403                           
  5404                           ;delay.c: 25: } while(--cnt);
  5405  001AE2  2E10               	decfsz	DelayMs@cnt,f,c
  5406  001AE4  D7F3               	goto	l197
  5407                           
  5408                           ;delay.c: 26: __nop();
  5409  001AE6  F000               	nop	
  5410                           
  5411                           ;delay.c: 27: __nop();
  5412  001AE8  F000               	nop	
  5413  001AEA  0012               	return		;funcret
  5414  001AEC                     __end_of_DelayMs:
  5415                           	opt stack 0
  5416                           tblptru	equ	0xFF8
  5417                           intcon	equ	0xFF2
  5418                           intcon2	equ	0xFF1
  5419                           postinc0	equ	0xFEE
  5420                           wreg	equ	0xFE8
  5421                           status	equ	0xFD8
  5422                           
  5423 ;; *************** function _activate_buzzer *****************
  5424 ;; Defined at:
  5425 ;;		line 137 in file "../func.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  beeps           1    wreg     unsigned char 
  5428 ;;  On_duration     1   27[COMRAM] unsigned char 
  5429 ;;  Off_duration    1   28[COMRAM] unsigned char 
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;  beeps           1   29[COMRAM] unsigned char 
  5432 ;;  i               1    0        unsigned char 
  5433 ;; Return value:  Size  Location     Type
  5434 ;;		None               void
  5435 ;; Registers used:
  5436 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5437 ;; Tracked objects:
  5438 ;;		On entry : 0/0
  5439 ;;		On exit  : 0/0
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMRAM   BANK0   BANK1
  5442 ;;      Params:         2       0       0
  5443 ;;      Locals:         1       0       0
  5444 ;;      Temps:          0       0       0
  5445 ;;      Totals:         3       0       0
  5446 ;;Total ram usage:        3 bytes
  5447 ;; Hardware stack levels used:    1
  5448 ;; Hardware stack levels required when called:    3
  5449 ;; This function calls:
  5450 ;;		_buzz_off
  5451 ;;		_buzz_on
  5452 ;; This function is called by:
  5453 ;;		_blink_GREEN_LED_and_RED_LED_and_BUZZER
  5454 ;;		_error_stat_hendler
  5455 ;;		_output_hendler
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           	psect	text20
  5460  001B0E                     __ptext20:
  5461                           	opt stack 0
  5462  001B0E                     _activate_buzzer:
  5463                           	opt stack 25
  5464                           
  5465                           ;incstack = 0
  5466                           ;activate_buzzer@beeps stored from wreg
  5467  001B0E  6E1E               	movwf	activate_buzzer@beeps,c
  5468                           
  5469                           ;func.c: 139: unsigned char i;
  5470                           ;func.c: 140: while ( beeps )
  5471  001B10  D008               	goto	l4351
  5472  001B12                     l4345:
  5473                           
  5474                           ;func.c: 142: {
  5475                           ;func.c: 143: buzz_on( On_duration );
  5476  001B12  501C               	movf	activate_buzzer@On_duration,w,c
  5477  001B14  ECCE  F00B         	call	_buzz_on
  5478                           
  5479                           ;func.c: 144: buzz_off( Off_duration );
  5480  001B18  501D               	movf	activate_buzzer@Off_duration,w,c
  5481  001B1A  EC53  F00D         	call	_buzz_off
  5482                           
  5483                           ;func.c: 145: beeps--;
  5484  001B1E  061E               	decf	activate_buzzer@beeps,f,c
  5485  001B20  D000               	goto	l4351
  5486  001B22                     l4351:
  5487  001B22  501E               	movf	activate_buzzer@beeps,w,c
  5488  001B24  A4D8               	btfss	status,2,c
  5489  001B26  D7F5               	goto	l4345
  5490                           
  5491                           ;func.c: 146: }
  5492                           ;func.c: 147: __nop();
  5493  001B28  F000               	nop	
  5494                           
  5495                           ;func.c: 148: __nop();
  5496  001B2A  F000               	nop	
  5497  001B2C  0012               	return		;funcret
  5498  001B2E                     __end_of_activate_buzzer:
  5499                           	opt stack 0
  5500                           tblptru	equ	0xFF8
  5501                           intcon	equ	0xFF2
  5502                           intcon2	equ	0xFF1
  5503                           postinc0	equ	0xFEE
  5504                           wreg	equ	0xFE8
  5505                           status	equ	0xFD8
  5506                           
  5507 ;; *************** function _buzz_on *****************
  5508 ;; Defined at:
  5509 ;;		line 168 in file "../func.c"
  5510 ;; Parameters:    Size  Location     Type
  5511 ;;  duration        1    wreg     unsigned char 
  5512 ;; Auto vars:     Size  Location     Type
  5513 ;;  duration        1   21[COMRAM] unsigned char 
  5514 ;;  _dcnt           1   24[COMRAM] unsigned char 
  5515 ;;  _dcnt           1   23[COMRAM] unsigned char 
  5516 ;;  calc_duratio    2   25[COMRAM] unsigned int 
  5517 ;;  temp_GIE        1   22[COMRAM] unsigned char 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;		None               void
  5520 ;; Registers used:
  5521 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMRAM   BANK0   BANK1
  5527 ;;      Params:         0       0       0
  5528 ;;      Locals:         6       0       0
  5529 ;;      Temps:          0       0       0
  5530 ;;      Totals:         6       0       0
  5531 ;;Total ram usage:        6 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    2
  5534 ;; This function calls:
  5535 ;;		___wmul
  5536 ;; This function is called by:
  5537 ;;		_activate_buzzer
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           	psect	text21
  5542  00179C                     __ptext21:
  5543                           	opt stack 0
  5544  00179C                     _buzz_on:
  5545                           	opt stack 25
  5546                           
  5547                           ;incstack = 0
  5548                           ;buzz_on@duration stored from wreg
  5549  00179C  6E16               	movwf	buzz_on@duration,c
  5550                           
  5551                           ;func.c: 170: unsigned char temp_GIE;
  5552                           ;func.c: 171: unsigned int calc_duration;
  5553                           ;func.c: 172: calc_duration = duration * 666;
  5554  00179E  C016  F010         	movff	buzz_on@duration,___wmul@multiplier
  5555  0017A2  6A11               	clrf	___wmul@multiplier+1,c
  5556  0017A4  0E02               	movlw	2
  5557  0017A6  6E13               	movwf	___wmul@multiplicand+1,c
  5558  0017A8  0E9A               	movlw	154
  5559  0017AA  6E12               	movwf	___wmul@multiplicand,c
  5560  0017AC  EC3F  F00D         	call	___wmul	;wreg free
  5561  0017B0  C010  F01A         	movff	?___wmul,buzz_on@calc_duration
  5562  0017B4  C011  F01B         	movff	?___wmul+1,buzz_on@calc_duration+1
  5563                           
  5564                           ;func.c: 173: temp_GIE = GIE;
  5565  0017B8  0E00               	movlw	0
  5566  0017BA  BEF2               	btfsc	intcon,7,c	;volatile
  5567  0017BC  0E01               	movlw	1
  5568  0017BE  6E17               	movwf	buzz_on@temp_GIE,c
  5569                           
  5570                           ;func.c: 174: GIE = 0;
  5571  0017C0  9EF2               	bcf	intcon,7,c	;volatile
  5572                           
  5573                           ;func.c: 175: while ( calc_duration )
  5574  0017C2  D013               	goto	l4341
  5575  0017C4                     l4331:
  5576                           
  5577                           ;func.c: 176: {
  5578                           ;func.c: 177: calc_duration--;
  5579  0017C4  061A               	decf	buzz_on@calc_duration,f,c
  5580  0017C6  A0D8               	btfss	status,0,c
  5581  0017C8  061B               	decf	buzz_on@calc_duration+1,f,c
  5582  0017CA  0004               	clrwdt		;# 
  5583                           
  5584                           ;func.c: 179: LATAbits.LATA4 = 1;
  5585  0017CC  8889               	bsf	3977,4,c	;volatile
  5586                           
  5587                           ;func.c: 180: LATAbits.LATA5 = 0;
  5588  0017CE  9A89               	bcf	3977,5,c	;volatile
  5589                           
  5590                           ;func.c: 181: { unsigned char _dcnt; _dcnt = (70)*((16*1000L)/(12*1000L)); while(--_dcnt
      +                           != 0) continue; };
  5591  0017D0  0E46               	movlw	70
  5592  0017D2  6E18               	movwf	buzz_on@_dcnt,c
  5593  0017D4  D000               	goto	l502
  5594  0017D6                     l502:
  5595  0017D6  2E18               	decfsz	buzz_on@_dcnt,f,c
  5596  0017D8  D7FE               	goto	l502
  5597                           
  5598                           ;func.c: 182: LATAbits.LATA4 = 0;
  5599  0017DA  9889               	bcf	3977,4,c	;volatile
  5600                           
  5601                           ;func.c: 183: LATAbits.LATA5 = 1;
  5602  0017DC  8A89               	bsf	3977,5,c	;volatile
  5603                           
  5604                           ;func.c: 184: { unsigned char _dcnt; _dcnt = (70)*((16*1000L)/(12*1000L)); while(--_dcnt
      +                           != 0) continue; };
  5605  0017DE  0E46               	movlw	70
  5606  0017E0  6E19               	movwf	buzz_on@_dcnt_864,c
  5607  0017E2  D000               	goto	l505
  5608  0017E4                     l505:
  5609  0017E4  2E19               	decfsz	buzz_on@_dcnt_864,f,c
  5610  0017E6  D7FE               	goto	l505
  5611  0017E8  D000               	goto	l4341
  5612  0017EA                     l4341:
  5613  0017EA  501A               	movf	buzz_on@calc_duration,w,c
  5614  0017EC  101B               	iorwf	buzz_on@calc_duration+1,w,c
  5615  0017EE  A4D8               	btfss	status,2,c
  5616  0017F0  D7E9               	goto	l4331
  5617                           
  5618                           ;func.c: 185: }
  5619                           ;func.c: 187: GIE = temp_GIE;
  5620  0017F2  B017               	btfsc	buzz_on@temp_GIE,0,c
  5621  0017F4  D002               	bra	u3605
  5622  0017F6  9EF2               	bcf	intcon,7,c	;volatile
  5623  0017F8  D001               	bra	u3606
  5624  0017FA                     u3605:
  5625  0017FA  8EF2               	bsf	intcon,7,c	;volatile
  5626  0017FC                     u3606:
  5627  0017FC  0012               	return		;funcret
  5628  0017FE                     __end_of_buzz_on:
  5629                           	opt stack 0
  5630                           tblptru	equ	0xFF8
  5631                           intcon	equ	0xFF2
  5632                           intcon2	equ	0xFF1
  5633                           postinc0	equ	0xFEE
  5634                           wreg	equ	0xFE8
  5635                           status	equ	0xFD8
  5636                           
  5637 ;; *************** function _buzz_off *****************
  5638 ;; Defined at:
  5639 ;;		line 151 in file "../func.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;  duration        1    wreg     unsigned char 
  5642 ;; Auto vars:     Size  Location     Type
  5643 ;;  duration        1   15[COMRAM] unsigned char 
  5644 ;; Return value:  Size  Location     Type
  5645 ;;		None               void
  5646 ;; Registers used:
  5647 ;;		wreg, status,2, status,0
  5648 ;; Tracked objects:
  5649 ;;		On entry : 0/0
  5650 ;;		On exit  : 0/0
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMRAM   BANK0   BANK1
  5653 ;;      Params:         0       0       0
  5654 ;;      Locals:         1       0       0
  5655 ;;      Temps:          0       0       0
  5656 ;;      Totals:         1       0       0
  5657 ;;Total ram usage:        1 bytes
  5658 ;; Hardware stack levels used:    1
  5659 ;; Hardware stack levels required when called:    1
  5660 ;; This function calls:
  5661 ;;		Nothing
  5662 ;; This function is called by:
  5663 ;;		_activate_buzzer
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           	psect	text22
  5668  001AA6                     __ptext22:
  5669                           	opt stack 0
  5670  001AA6                     _buzz_off:
  5671                           	opt stack 26
  5672                           
  5673                           ;incstack = 0
  5674                           ;buzz_off@duration stored from wreg
  5675  001AA6  6E10               	movwf	buzz_off@duration,c
  5676                           
  5677                           ;func.c: 153: LATAbits.LATA4 = 0;
  5678  001AA8  9889               	bcf	3977,4,c	;volatile
  5679                           
  5680                           ;func.c: 154: LATAbits.LATA5 = 0;
  5681  001AAA  9A89               	bcf	3977,5,c	;volatile
  5682                           
  5683                           ;func.c: 155: while ( duration )
  5684  001AAC  D00A               	goto	l3133
  5685  001AAE                     l494:
  5686  001AAE  0004               	clrwdt		;# 
  5687                           
  5688                           ;func.c: 158: if( msec100buzz )
  5689  001AB0  0100               	movlb	0	; () banked
  5690  001AB2  51E2               	movf	_msec100buzz& (0+255),w,b
  5691  001AB4  B4D8               	btfsc	status,2,c
  5692  001AB6  D005               	goto	l3133
  5693                           
  5694                           ; BSR set to: 0
  5695                           ;func.c: 159: {
  5696                           ;func.c: 160: msec100buzz = 0;
  5697  001AB8  0E00               	movlw	0
  5698  001ABA  0100               	movlb	0	; () banked
  5699  001ABC  6FE2               	movwf	_msec100buzz& (0+255),b
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;func.c: 161: duration--;
  5703  001ABE  0610               	decf	buzz_off@duration,f,c
  5704                           
  5705                           ; BSR set to: 0
  5706  001AC0  D000               	goto	l3133
  5707  001AC2                     l3133:
  5708  001AC2  5010               	movf	buzz_off@duration,w,c
  5709  001AC4  A4D8               	btfss	status,2,c
  5710  001AC6  D7F3               	goto	l494
  5711  001AC8  0012               	return		;funcret
  5712  001ACA                     __end_of_buzz_off:
  5713                           	opt stack 0
  5714                           tblptru	equ	0xFF8
  5715                           intcon	equ	0xFF2
  5716                           intcon2	equ	0xFF1
  5717                           postinc0	equ	0xFEE
  5718                           wreg	equ	0xFE8
  5719                           status	equ	0xFD8
  5720                           
  5721 ;; *************** function _eeprom_data_refresh *****************
  5722 ;; Defined at:
  5723 ;;		line 307 in file "../func.c"
  5724 ;; Parameters:    Size  Location     Type
  5725 ;;		None
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;		None
  5728 ;; Return value:  Size  Location     Type
  5729 ;;		None               void
  5730 ;; Registers used:
  5731 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMRAM   BANK0   BANK1
  5737 ;;      Params:         0       0       0
  5738 ;;      Locals:         0       0       0
  5739 ;;      Temps:          0       0       0
  5740 ;;      Totals:         0       0       0
  5741 ;;Total ram usage:        0 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:    3
  5744 ;; This function calls:
  5745 ;;		___wmul
  5746 ;;		_load_int_from_eeprom
  5747 ;; This function is called by:
  5748 ;;		_main
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           	psect	text23
  5753  000F7A                     __ptext23:
  5754                           	opt stack 0
  5755  000F7A                     _eeprom_data_refresh:
  5756                           	opt stack 27
  5757                           
  5758                           ;func.c: 309: long_press_time = load_int_from_eeprom( LONG_PRESS_TIME_EE_ADD );
  5759                           
  5760                           ;incstack = 0
  5761  000F7A  0E08               	movlw	8
  5762  000F7C  EC7F  F00C         	call	_load_int_from_eeprom
  5763  000F80  C012  F09E         	movff	?_load_int_from_eeprom,_long_press_time
  5764  000F84  C013  F09F         	movff	?_load_int_from_eeprom+1,_long_press_time+1
  5765                           
  5766                           ;func.c: 310: short_press_time_min = load_int_from_eeprom( SHORT_PRESS_TIME_MIN_EE_ADD )
      +                          ;
  5767  000F88  0E0A               	movlw	10
  5768  000F8A  EC7F  F00C         	call	_load_int_from_eeprom
  5769  000F8E  C012  F0AE         	movff	?_load_int_from_eeprom,_short_press_time_min
  5770  000F92  C013  F0AF         	movff	?_load_int_from_eeprom+1,_short_press_time_min+1
  5771                           
  5772                           ;func.c: 311: short_press_time_max = load_int_from_eeprom( SHORT_PRESS_TIME_MAX_EE_ADD )
      +                          ;
  5773  000F96  0E0C               	movlw	12
  5774  000F98  EC7F  F00C         	call	_load_int_from_eeprom
  5775  000F9C  C012  F0AC         	movff	?_load_int_from_eeprom,_short_press_time_max
  5776  000FA0  C013  F0AD         	movff	?_load_int_from_eeprom+1,_short_press_time_max+1
  5777                           
  5778                           ;func.c: 312: year_time = load_int_from_eeprom( YEAR_TIME_EE_ADD );
  5779  000FA4  0E10               	movlw	16
  5780  000FA6  EC7F  F00C         	call	_load_int_from_eeprom
  5781  000FAA  C012  F0D0         	movff	?_load_int_from_eeprom,_year_time
  5782  000FAE  C013  F0D1         	movff	?_load_int_from_eeprom+1,_year_time+1
  5783                           
  5784                           ;func.c: 314: grid_power_low_voltage = load_int_from_eeprom( GRID_POWER_LOW_VOLTAGE_EE_A
      +                          DD );
  5785  000FB2  0E00               	movlw	0
  5786  000FB4  EC7F  F00C         	call	_load_int_from_eeprom
  5787  000FB8  C012  F02D         	movff	?_load_int_from_eeprom,_grid_power_low_voltage
  5788  000FBC  C013  F02E         	movff	?_load_int_from_eeprom+1,_grid_power_low_voltage+1
  5789                           
  5790                           ;func.c: 315: grid_power_high_voltage = load_int_from_eeprom( GRID_POWER_HIGH_VOLTAGE_EE
      +                          _ADD );
  5791  000FC0  0E02               	movlw	2
  5792  000FC2  EC7F  F00C         	call	_load_int_from_eeprom
  5793  000FC6  C012  F096         	movff	?_load_int_from_eeprom,_grid_power_high_voltage
  5794  000FCA  C013  F097         	movff	?_load_int_from_eeprom+1,_grid_power_high_voltage+1
  5795                           
  5796                           ;func.c: 317: led_off_bat_voltage = load_int_from_eeprom( MIN_BAT_VOLTAGE_FOR_LED_ON_EE_
      +                          ADD );
  5797  000FCE  0E1A               	movlw	26
  5798  000FD0  EC7F  F00C         	call	_load_int_from_eeprom
  5799  000FD4  C012  F09A         	movff	?_load_int_from_eeprom,_led_off_bat_voltage
  5800  000FD8  C013  F09B         	movff	?_load_int_from_eeprom+1,_led_off_bat_voltage+1
  5801                           
  5802                           ;func.c: 318: led_on_bat_voltage = load_int_from_eeprom( MAX_BAT_VOLTAGE_FOR_LED_OFF_EE_
      +                          ADD );
  5803  000FDC  0E18               	movlw	24
  5804  000FDE  EC7F  F00C         	call	_load_int_from_eeprom
  5805  000FE2  C012  F09C         	movff	?_load_int_from_eeprom,_led_on_bat_voltage
  5806  000FE6  C013  F09D         	movff	?_load_int_from_eeprom+1,_led_on_bat_voltage+1
  5807                           
  5808                           ;func.c: 322: batt_full_voltage = load_int_from_eeprom( BAT_FULL_VOLTAGE_EE_ADD );
  5809  000FEA  0E1C               	movlw	28
  5810  000FEC  EC7F  F00C         	call	_load_int_from_eeprom
  5811  000FF0  C012  F08C         	movff	?_load_int_from_eeprom,_batt_full_voltage
  5812  000FF4  C013  F08D         	movff	?_load_int_from_eeprom+1,_batt_full_voltage+1
  5813                           
  5814                           ;func.c: 323: bat_is_disconnected_voltage = load_int_from_eeprom( BAT_IS_DISCONNECTED_VO
      +                          LTAGE_EE_ADD );
  5815  000FF8  0E1E               	movlw	30
  5816  000FFA  EC7F  F00C         	call	_load_int_from_eeprom
  5817  000FFE  C012  F088         	movff	?_load_int_from_eeprom,_bat_is_disconnected_voltage
  5818  001002  C013  F089         	movff	?_load_int_from_eeprom+1,_bat_is_disconnected_voltage+1
  5819                           
  5820                           ;func.c: 325: num_of_bat_cells = load_int_from_eeprom( NUM_OF_BATT_CELLS_EE_ADD );
  5821  001006  0E22               	movlw	34
  5822  001008  EC7F  F00C         	call	_load_int_from_eeprom
  5823  00100C  C012  F02F         	movff	?_load_int_from_eeprom,_num_of_bat_cells
  5824  001010  C013  F030         	movff	?_load_int_from_eeprom+1,_num_of_bat_cells+1
  5825                           
  5826                           ;func.c: 327: short_time_test_pass = load_int_from_eeprom( SHORT_TEST_TIME_EE_ADD );
  5827  001014  0E24               	movlw	36
  5828  001016  EC7F  F00C         	call	_load_int_from_eeprom
  5829  00101A  C012  F0B0         	movff	?_load_int_from_eeprom,_short_time_test_pass
  5830  00101E  C013  F0B1         	movff	?_load_int_from_eeprom+1,_short_time_test_pass+1
  5831                           
  5832                           ;func.c: 328: long_time_test_pass = load_int_from_eeprom( LONG_TEST_TIME_EE_ADD );
  5833  001022  0E26               	movlw	38
  5834  001024  EC7F  F00C         	call	_load_int_from_eeprom
  5835  001028  C012  F0A0         	movff	?_load_int_from_eeprom,_long_time_test_pass
  5836  00102C  C013  F0A1         	movff	?_load_int_from_eeprom+1,_long_time_test_pass+1
  5837                           
  5838                           ;func.c: 329: week_in_houres = load_int_from_eeprom( WEEK_TIME_EE_ADD );
  5839  001030  0E14               	movlw	20
  5840  001032  EC7F  F00C         	call	_load_int_from_eeprom
  5841  001036  C012  F0CE         	movff	?_load_int_from_eeprom,_week_in_houres
  5842  00103A  C013  F0CF         	movff	?_load_int_from_eeprom+1,_week_in_houres+1
  5843                           
  5844                           ;func.c: 332: shorted_bat_voltage = 15;
  5845  00103E  0E00               	movlw	0
  5846  001040  0100               	movlb	0	; () banked
  5847  001042  6FB3               	movwf	(_shorted_bat_voltage+1)& (0+255),b
  5848  001044  0E0F               	movlw	15
  5849  001046  6FB2               	movwf	_shorted_bat_voltage& (0+255),b
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;func.c: 333: total_shorted_bat_voltage = ( num_of_bat_cells * shorted_bat_voltage );
  5853  001048  C02F  F010         	movff	_num_of_bat_cells,___wmul@multiplier
  5854  00104C  C030  F011         	movff	_num_of_bat_cells+1,___wmul@multiplier+1
  5855  001050  C0B2  F012         	movff	_shorted_bat_voltage,___wmul@multiplicand
  5856  001054  C0B3  F013         	movff	_shorted_bat_voltage+1,___wmul@multiplicand+1
  5857  001058  EC3F  F00D         	call	___wmul	;wreg free
  5858  00105C  C010  F0CA         	movff	?___wmul,_total_shorted_bat_voltage
  5859  001060  C011  F0CB         	movff	?___wmul+1,_total_shorted_bat_voltage+1
  5860                           
  5861                           ;func.c: 336: total_batt_full_voltage = ( num_of_bat_cells * batt_full_voltage );
  5862  001064  C02F  F010         	movff	_num_of_bat_cells,___wmul@multiplier
  5863  001068  C030  F011         	movff	_num_of_bat_cells+1,___wmul@multiplier+1
  5864  00106C  C08C  F012         	movff	_batt_full_voltage,___wmul@multiplicand
  5865  001070  C08D  F013         	movff	_batt_full_voltage+1,___wmul@multiplicand+1
  5866  001074  EC3F  F00D         	call	___wmul	;wreg free
  5867  001078  C010  F0C2         	movff	?___wmul,_total_batt_full_voltage
  5868  00107C  C011  F0C3         	movff	?___wmul+1,_total_batt_full_voltage+1
  5869                           
  5870                           ;func.c: 337: total_bat_is_disconnected_voltage = ( num_of_bat_cells * bat_is_disconnect
      +                          ed_voltage ) ;
  5871  001080  C02F  F010         	movff	_num_of_bat_cells,___wmul@multiplier
  5872  001084  C030  F011         	movff	_num_of_bat_cells+1,___wmul@multiplier+1
  5873  001088  C088  F012         	movff	_bat_is_disconnected_voltage,___wmul@multiplicand
  5874  00108C  C089  F013         	movff	_bat_is_disconnected_voltage+1,___wmul@multiplicand+1
  5875  001090  EC3F  F00D         	call	___wmul	;wreg free
  5876  001094  C010  F0C0         	movff	?___wmul,_total_bat_is_disconnected_voltage
  5877  001098  C011  F0C1         	movff	?___wmul+1,_total_bat_is_disconnected_voltage+1
  5878                           
  5879                           ;func.c: 338: total_led_off_bat_voltage = ( num_of_bat_cells * led_off_bat_voltage ) ;
  5880  00109C  C02F  F010         	movff	_num_of_bat_cells,___wmul@multiplier
  5881  0010A0  C030  F011         	movff	_num_of_bat_cells+1,___wmul@multiplier+1
  5882  0010A4  C09A  F012         	movff	_led_off_bat_voltage,___wmul@multiplicand
  5883  0010A8  C09B  F013         	movff	_led_off_bat_voltage+1,___wmul@multiplicand+1
  5884  0010AC  EC3F  F00D         	call	___wmul	;wreg free
  5885  0010B0  C010  F0C4         	movff	?___wmul,_total_led_off_bat_voltage
  5886  0010B4  C011  F0C5         	movff	?___wmul+1,_total_led_off_bat_voltage+1
  5887                           
  5888                           ;func.c: 339: total_led_on_bat_voltage = ( num_of_bat_cells * led_on_bat_voltage ) ;
  5889  0010B8  C02F  F010         	movff	_num_of_bat_cells,___wmul@multiplier
  5890  0010BC  C030  F011         	movff	_num_of_bat_cells+1,___wmul@multiplier+1
  5891  0010C0  C09C  F012         	movff	_led_on_bat_voltage,___wmul@multiplicand
  5892  0010C4  C09D  F013         	movff	_led_on_bat_voltage+1,___wmul@multiplicand+1
  5893  0010C8  EC3F  F00D         	call	___wmul	;wreg free
  5894  0010CC  C010  F0C6         	movff	?___wmul,_total_led_on_bat_voltage
  5895  0010D0  C011  F0C7         	movff	?___wmul+1,_total_led_on_bat_voltage+1
  5896  0010D4  0012               	return		;funcret
  5897  0010D6                     __end_of_eeprom_data_refresh:
  5898                           	opt stack 0
  5899                           tblptru	equ	0xFF8
  5900                           intcon	equ	0xFF2
  5901                           intcon2	equ	0xFF1
  5902                           postinc0	equ	0xFEE
  5903                           wreg	equ	0xFE8
  5904                           status	equ	0xFD8
  5905                           
  5906 ;; *************** function _load_int_from_eeprom *****************
  5907 ;; Defined at:
  5908 ;;		line 279 in file "../func.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;  add             1    wreg     unsigned char 
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;  add             1   22[COMRAM] unsigned char 
  5913 ;;  a               2   20[COMRAM] unsigned int 
  5914 ;; Return value:  Size  Location     Type
  5915 ;;                  2   17[COMRAM] unsigned int 
  5916 ;; Registers used:
  5917 ;;		wreg, status,2, status,0, cstack
  5918 ;; Tracked objects:
  5919 ;;		On entry : 0/0
  5920 ;;		On exit  : 0/0
  5921 ;;		Unchanged: 0/0
  5922 ;; Data sizes:     COMRAM   BANK0   BANK1
  5923 ;;      Params:         2       0       0
  5924 ;;      Locals:         3       0       0
  5925 ;;      Temps:          1       0       0
  5926 ;;      Totals:         6       0       0
  5927 ;;Total ram usage:        6 bytes
  5928 ;; Hardware stack levels used:    1
  5929 ;; Hardware stack levels required when called:    2
  5930 ;; This function calls:
  5931 ;;		_Read_b_eep
  5932 ;; This function is called by:
  5933 ;;		_eeprom_data_refresh
  5934 ;;		_eeprom_time_delay
  5935 ;;		_error_stat_hendler
  5936 ;;		_main
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           	psect	text24
  5941  0018FE                     __ptext24:
  5942                           	opt stack 0
  5943  0018FE                     _load_int_from_eeprom:
  5944                           	opt stack 26
  5945                           
  5946                           ;incstack = 0
  5947                           ;load_int_from_eeprom@add stored from wreg
  5948  0018FE  6E17               	movwf	load_int_from_eeprom@add,c
  5949                           
  5950                           ;func.c: 281: unsigned int a;
  5951                           ;func.c: 282: a = Read_b_eep(add);
  5952  001900  C017  F010         	movff	load_int_from_eeprom@add,Read_b_eep@badd
  5953  001904  6A11               	clrf	Read_b_eep@badd+1,c
  5954  001906  ECB2  F00D         	call	_Read_b_eep	;wreg free
  5955  00190A  6E14               	movwf	??_load_int_from_eeprom& (0+255),c
  5956  00190C  5014               	movf	??_load_int_from_eeprom,w,c
  5957  00190E  6E15               	movwf	load_int_from_eeprom@a,c
  5958  001910  6A16               	clrf	load_int_from_eeprom@a+1,c
  5959                           
  5960                           ;func.c: 283: a <<= 8;
  5961  001912  5015               	movf	load_int_from_eeprom@a,w,c
  5962  001914  6E16               	movwf	load_int_from_eeprom@a+1,c
  5963  001916  6A15               	clrf	load_int_from_eeprom@a,c
  5964                           
  5965                           ;func.c: 284: a += Read_b_eep(add + 1);
  5966  001918  0E01               	movlw	1
  5967  00191A  2417               	addwf	load_int_from_eeprom@add,w,c
  5968  00191C  6E10               	movwf	Read_b_eep@badd,c
  5969  00191E  6A11               	clrf	Read_b_eep@badd+1,c
  5970  001920  0E00               	movlw	0
  5971  001922  2211               	addwfc	Read_b_eep@badd+1,f,c
  5972  001924  ECB2  F00D         	call	_Read_b_eep	;wreg free
  5973  001928  6E14               	movwf	??_load_int_from_eeprom& (0+255),c
  5974  00192A  5014               	movf	??_load_int_from_eeprom,w,c
  5975  00192C  2615               	addwf	load_int_from_eeprom@a,f,c
  5976  00192E  0E00               	movlw	0
  5977  001930  2216               	addwfc	load_int_from_eeprom@a+1,f,c
  5978                           
  5979                           ;func.c: 285: return a;
  5980  001932  C015  F012         	movff	load_int_from_eeprom@a,?_load_int_from_eeprom
  5981  001936  C016  F013         	movff	load_int_from_eeprom@a+1,?_load_int_from_eeprom+1
  5982  00193A  0012               	return	
  5983  00193C  0012               	return		;funcret
  5984  00193E                     __end_of_load_int_from_eeprom:
  5985                           	opt stack 0
  5986                           tblptru	equ	0xFF8
  5987                           intcon	equ	0xFF2
  5988                           intcon2	equ	0xFF1
  5989                           postinc0	equ	0xFEE
  5990                           wreg	equ	0xFE8
  5991                           status	equ	0xFD8
  5992                           
  5993 ;; *************** function _Read_b_eep *****************
  5994 ;; Defined at:
  5995 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\EEP\read_B.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;  badd            2   15[COMRAM] unsigned int 
  5998 ;; Auto vars:     Size  Location     Type
  5999 ;;		None
  6000 ;; Return value:  Size  Location     Type
  6001 ;;                  1    wreg      unsigned char 
  6002 ;; Registers used:
  6003 ;;		wreg, status,2
  6004 ;; Tracked objects:
  6005 ;;		On entry : 0/0
  6006 ;;		On exit  : 0/0
  6007 ;;		Unchanged: 0/0
  6008 ;; Data sizes:     COMRAM   BANK0   BANK1
  6009 ;;      Params:         2       0       0
  6010 ;;      Locals:         0       0       0
  6011 ;;      Temps:          0       0       0
  6012 ;;      Totals:         2       0       0
  6013 ;;Total ram usage:        2 bytes
  6014 ;; Hardware stack levels used:    1
  6015 ;; Hardware stack levels required when called:    1
  6016 ;; This function calls:
  6017 ;;		Nothing
  6018 ;; This function is called by:
  6019 ;;		_load_int_from_eeprom
  6020 ;; This function uses a non-reentrant model
  6021 ;;
  6022                           
  6023                           	psect	text25
  6024  001B64                     __ptext25:
  6025                           	opt stack 0
  6026  001B64                     _Read_b_eep:
  6027                           	opt stack 26
  6028                           
  6029                           ;incstack = 0
  6030  001B64  C010  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  6031  001B68  9CA6               	bcf	4006,6,c	;volatile
  6032  001B6A  9EA6               	bcf	4006,7,c	;volatile
  6033  001B6C  80A6               	bsf	4006,0,c	;volatile
  6034  001B6E  F000               	nop	
  6035  001B70  F000               	nop	
  6036  001B72  50A8               	movf	4008,w,c	;volatile
  6037  001B74  0012               	return	
  6038  001B76  0012               	return		;funcret
  6039  001B78                     __end_of_Read_b_eep:
  6040                           	opt stack 0
  6041                           tblptru	equ	0xFF8
  6042                           intcon	equ	0xFF2
  6043                           intcon2	equ	0xFF1
  6044                           postinc0	equ	0xFEE
  6045                           wreg	equ	0xFE8
  6046                           status	equ	0xFD8
  6047                           
  6048 ;; *************** function _display_voltage *****************
  6049 ;; Defined at:
  6050 ;;		line 394 in file "../func.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;		None
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;		None
  6055 ;; Return value:  Size  Location     Type
  6056 ;;		None               void
  6057 ;; Registers used:
  6058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMRAM   BANK0   BANK1
  6064 ;;      Params:         0       0       0
  6065 ;;      Locals:         0       0       0
  6066 ;;      Temps:          0       0       0
  6067 ;;      Totals:         0       0       0
  6068 ;;Total ram usage:        0 bytes
  6069 ;; Hardware stack levels used:    1
  6070 ;; Hardware stack levels required when called:    3
  6071 ;; This function calls:
  6072 ;;		_printf
  6073 ;; This function is called by:
  6074 ;;		_main
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           	psect	text26
  6079  001B2E                     __ptext26:
  6080                           	opt stack 0
  6081  001B2E                     _display_voltage:
  6082                           	opt stack 27
  6083                           
  6084                           ;func.c: 396: printf( "\n\r GRID_Voltage_ADC_val =%d ,grid_power_low_voltage = %d ",GRID
      +                          _Voltage_ADC_val , grid_power_low_voltage );
  6085                           
  6086                           ;incstack = 0
  6087  001B2E  0EDF               	movlw	low STR_15
  6088  001B30  6E1C               	movwf	printf@f,c
  6089  001B32  0E1B               	movlw	high STR_15
  6090  001B34  6E1D               	movwf	printf@f+1,c
  6091  001B36  C029  F01E         	movff	_GRID_Voltage_ADC_val,?_printf+2
  6092  001B3A  C02A  F01F         	movff	_GRID_Voltage_ADC_val+1,?_printf+3
  6093  001B3E  C02D  F020         	movff	_grid_power_low_voltage,?_printf+4
  6094  001B42  C02E  F021         	movff	_grid_power_low_voltage+1,?_printf+5
  6095  001B46  ECE7  F000         	call	_printf	;wreg free
  6096  001B4A  0012               	return		;funcret
  6097  001B4C                     __end_of_display_voltage:
  6098                           	opt stack 0
  6099                           tblptru	equ	0xFF8
  6100                           intcon	equ	0xFF2
  6101                           intcon2	equ	0xFF1
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           status	equ	0xFD8
  6105                           
  6106 ;; *************** function _Charging_handler *****************
  6107 ;; Defined at:
  6108 ;;		line 244 in file "../func.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;		None
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;		None
  6113 ;; Return value:  Size  Location     Type
  6114 ;;		None               void
  6115 ;; Registers used:
  6116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMRAM   BANK0   BANK1
  6122 ;;      Params:         0       0       0
  6123 ;;      Locals:         0       0       0
  6124 ;;      Temps:          0       0       0
  6125 ;;      Totals:         0       0       0
  6126 ;;Total ram usage:        0 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:    3
  6129 ;; This function calls:
  6130 ;;		_printf
  6131 ;; This function is called by:
  6132 ;;		_main
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           	psect	text27
  6137  001472                     __ptext27:
  6138                           	opt stack 0
  6139  001472                     _Charging_handler:
  6140                           	opt stack 27
  6141                           
  6142                           ;func.c: 246: printf( "\n\r CHARGING IS ");
  6143                           
  6144                           ;incstack = 0
  6145  001472  0E70               	movlw	low STR_6
  6146  001474  6E1C               	movwf	printf@f,c
  6147  001476  0E1F               	movlw	high STR_6
  6148  001478  6E1D               	movwf	printf@f+1,c
  6149  00147A  ECE7  F000         	call	_printf	;wreg free
  6150                           
  6151                           ;func.c: 248: switch ( batt_stat )
  6152  00147E  D03A               	goto	l4791
  6153  001480                     l4763:
  6154                           
  6155                           ;func.c: 251: printf( "- NORMAL & TRICKLE\n\r " );
  6156  001480  0E56               	movlw	low STR_7
  6157  001482  6E1C               	movwf	printf@f,c
  6158  001484  0E1E               	movlw	high STR_7
  6159  001486  6E1D               	movwf	printf@f+1,c
  6160  001488  ECE7  F000         	call	_printf	;wreg free
  6161                           
  6162                           ;func.c: 252: normal_charging = 1;
  6163  00148C  0E01               	movlw	1
  6164  00148E  0100               	movlb	0	; () banked
  6165  001490  6FE3               	movwf	_normal_charging& (0+255),b
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;func.c: 253: trickl_charging = 1;
  6169  001492  0E01               	movlw	1
  6170  001494  0100               	movlb	0	; () banked
  6171  001496  6FE9               	movwf	_trickl_charging& (0+255),b
  6172                           
  6173                           ;func.c: 254: break;
  6174  001498  0012               	return	
  6175  00149A                     l4769:
  6176                           
  6177                           ;func.c: 257: printf( "OFF \n\r " );
  6178  00149A  0EF7               	movlw	low STR_8
  6179  00149C  6E1C               	movwf	printf@f,c
  6180  00149E  0E1F               	movlw	high STR_8
  6181  0014A0  6E1D               	movwf	printf@f+1,c
  6182  0014A2  ECE7  F000         	call	_printf	;wreg free
  6183                           
  6184                           ;func.c: 258: normal_charging = 0;
  6185  0014A6  0E00               	movlw	0
  6186  0014A8  0100               	movlb	0	; () banked
  6187  0014AA  6FE3               	movwf	_normal_charging& (0+255),b
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;func.c: 259: trickl_charging = 0;
  6191  0014AC  0E00               	movlw	0
  6192  0014AE  0100               	movlb	0	; () banked
  6193  0014B0  6FE9               	movwf	_trickl_charging& (0+255),b
  6194                           
  6195                           ;func.c: 260: break;
  6196  0014B2  0012               	return	
  6197  0014B4                     l4775:
  6198                           
  6199                           ;func.c: 263: printf( "- NORMAL & TRICKLE\n\r " );
  6200  0014B4  0E56               	movlw	low STR_7
  6201  0014B6  6E1C               	movwf	printf@f,c
  6202  0014B8  0E1E               	movlw	high STR_7
  6203  0014BA  6E1D               	movwf	printf@f+1,c
  6204  0014BC  ECE7  F000         	call	_printf	;wreg free
  6205                           
  6206                           ;func.c: 264: normal_charging = 1;
  6207  0014C0  0E01               	movlw	1
  6208  0014C2  0100               	movlb	0	; () banked
  6209  0014C4  6FE3               	movwf	_normal_charging& (0+255),b
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;func.c: 265: trickl_charging = 1;
  6213  0014C6  0E01               	movlw	1
  6214  0014C8  0100               	movlb	0	; () banked
  6215  0014CA  6FE9               	movwf	_trickl_charging& (0+255),b
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;func.c: 266: green_led = 1;
  6219  0014CC  0E01               	movlw	1
  6220  0014CE  0100               	movlb	0	; () banked
  6221  0014D0  6FDE               	movwf	_green_led& (0+255),b
  6222                           
  6223                           ;func.c: 267: break;
  6224  0014D2  0012               	return	
  6225  0014D4                     l4783:
  6226                           
  6227                           ;func.c: 270: normal_charging = 0;
  6228  0014D4  0E00               	movlw	0
  6229  0014D6  0100               	movlb	0	; () banked
  6230  0014D8  6FE3               	movwf	_normal_charging& (0+255),b
  6231                           
  6232                           ;func.c: 271: trickl_charging = 1;
  6233  0014DA  0E01               	movlw	1
  6234  0014DC  0100               	movlb	0	; () banked
  6235  0014DE  6FE9               	movwf	_trickl_charging& (0+255),b
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;func.c: 272: printf( "- TRICKLE\n\r " );
  6239  0014E0  0EEA               	movlw	low STR_10
  6240  0014E2  6E1C               	movwf	printf@f,c
  6241  0014E4  0E1F               	movlw	high STR_10
  6242  0014E6  6E1D               	movwf	printf@f+1,c
  6243  0014E8  ECE7  F000         	call	_printf	;wreg free
  6244                           
  6245                           ;func.c: 274: green_led = 1;
  6246  0014EC  0E01               	movlw	1
  6247  0014EE  0100               	movlb	0	; () banked
  6248  0014F0  6FDE               	movwf	_green_led& (0+255),b
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;func.c: 276: }
  6252                           
  6253                           ;func.c: 275: break;
  6254  0014F2  0012               	return	
  6255  0014F4                     l4791:
  6256  0014F4  5041               	movf	_batt_stat,w,c
  6257                           
  6258                           ; Switch size 1, requested type "space"
  6259                           ; Number of cases is 4, Range of values is 0 to 3
  6260                           ; switch strategies available:
  6261                           ; Name         Instructions Cycles
  6262                           ; simple_byte           13     7 (average)
  6263                           ;	Chosen strategy is simple_byte
  6264  0014F6  0A00               	xorlw	0	; case 0
  6265  0014F8  B4D8               	btfsc	status,2,c
  6266  0014FA  D7C2               	goto	l4763
  6267  0014FC  0A01               	xorlw	1	; case 1
  6268  0014FE  B4D8               	btfsc	status,2,c
  6269  001500  D7D9               	goto	l4775
  6270  001502  0A03               	xorlw	3	; case 2
  6271  001504  B4D8               	btfsc	status,2,c
  6272  001506  D7E6               	goto	l4783
  6273  001508  0A01               	xorlw	1	; case 3
  6274  00150A  A4D8               	btfss	status,2,c
  6275  00150C  0012               	return	
  6276  00150E  D7C5               	goto	l4769
  6277  001510  0012               	return		;funcret
  6278  001512                     __end_of_Charging_handler:
  6279                           	opt stack 0
  6280                           tblptru	equ	0xFF8
  6281                           intcon	equ	0xFF2
  6282                           intcon2	equ	0xFF1
  6283                           postinc0	equ	0xFEE
  6284                           wreg	equ	0xFE8
  6285                           status	equ	0xFD8
  6286                           
  6287 ;; *************** function _printf *****************
  6288 ;; Defined at:
  6289 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;  f               2   27[COMRAM] PTR const unsigned char 
  6292 ;;		 -> STR_44(13), STR_43(19), STR_42(35), STR_41(29), 
  6293 ;;		 -> STR_40(40), STR_39(22), STR_38(30), STR_37(32), 
  6294 ;;		 -> STR_36(37), STR_35(24), STR_34(15), STR_33(29), 
  6295 ;;		 -> STR_32(10), STR_31(28), STR_30(34), STR_29(16), 
  6296 ;;		 -> STR_28(23), STR_27(22), STR_26(25), STR_25(22), 
  6297 ;;		 -> STR_24(16), STR_23(17), STR_22(15), STR_21(21), 
  6298 ;;		 -> STR_20(22), STR_19(37), STR_18(16), STR_17(21), 
  6299 ;;		 -> STR_16(15), STR_15(58), STR_14(19), STR_13(31), 
  6300 ;;		 -> STR_12(22), STR_11(24), STR_10(13), STR_9(22), 
  6301 ;;		 -> STR_8(8), STR_7(22), STR_6(16), STR_5(33), 
  6302 ;;		 -> STR_4(28), STR_3(27), STR_2(27), STR_1(19), 
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  idx             1    0[BANK1 ] unsigned char 
  6305 ;;  tmpval          4    0        struct .
  6306 ;;  flag            2   19[BANK1 ] unsigned short 
  6307 ;;  width           2   16[BANK1 ] int 
  6308 ;;  val             2   13[BANK1 ] unsigned int 
  6309 ;;  ap              2   11[BANK1 ] PTR void [1]
  6310 ;;		 -> ?_printf(2), 
  6311 ;;  len             2    9[BANK1 ] unsigned int 
  6312 ;;  cp              2    1[BANK1 ] PTR const unsigned char 
  6313 ;;		 -> printf@c(1), 
  6314 ;;  c               1   18[BANK1 ] char 
  6315 ;;  prec            1   15[BANK1 ] char 
  6316 ;; Return value:  Size  Location     Type
  6317 ;;                  2   27[COMRAM] int 
  6318 ;; Registers used:
  6319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6320 ;; Tracked objects:
  6321 ;;		On entry : 0/0
  6322 ;;		On exit  : 0/0
  6323 ;;		Unchanged: 0/0
  6324 ;; Data sizes:     COMRAM   BANK0   BANK1
  6325 ;;      Params:         6       0       0
  6326 ;;      Locals:         0       0      21
  6327 ;;      Temps:          4       0       0
  6328 ;;      Totals:        10       0      21
  6329 ;;Total ram usage:       31 bytes
  6330 ;; Hardware stack levels used:    1
  6331 ;; Hardware stack levels required when called:    2
  6332 ;; This function calls:
  6333 ;;		___lwdiv
  6334 ;;		___lwmod
  6335 ;;		___wmul
  6336 ;;		_isdigit
  6337 ;;		_putch
  6338 ;; This function is called by:
  6339 ;;		_vbat_check
  6340 ;;		_Charging_handler
  6341 ;;		_stby_stat_hendler
  6342 ;;		_display_voltage
  6343 ;;		_work_stat_hendler
  6344 ;;		_test_stat_hendler
  6345 ;;		_error_stat_hendler
  6346 ;;		_sleep_stat_hendler
  6347 ;;		_long_test_stat_hendler
  6348 ;;		_short_test_stat_hendler
  6349 ;;		_main
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           	psect	text28
  6354  0001CE                     __ptext28:
  6355                           	opt stack 0
  6356  0001CE                     _printf:
  6357                           	opt stack 27
  6358                           
  6359                           ;doprnt.c: 466: va_list ap;
  6360                           ;doprnt.c: 499: signed char c;
  6361                           ;doprnt.c: 501: int width;
  6362                           ;doprnt.c: 506: signed char prec;
  6363                           ;doprnt.c: 508: unsigned short flag;
  6364                           ;doprnt.c: 523: union {
  6365                           ;doprnt.c: 524: unsigned long vd;
  6366                           ;doprnt.c: 525: double integ;
  6367                           ;doprnt.c: 526: } tmpval;
  6368                           ;doprnt.c: 528: unsigned int val;
  6369                           ;doprnt.c: 529: unsigned len;
  6370                           ;doprnt.c: 530: const char * cp;
  6371                           ;doprnt.c: 533: *ap = __va_start();
  6372                           
  6373                           ;incstack = 0
  6374  0001CE  0E1E               	movlw	low (?_printf+2)
  6375  0001D0  0101               	movlb	1	; () banked
  6376  0001D2  6F0B               	movwf	printf@ap& (0+255),b
  6377  0001D4  0E00               	movlw	high (?_printf+2)
  6378  0001D6  0101               	movlb	1	; () banked
  6379  0001D8  6F0C               	movwf	(printf@ap+1)& (0+255),b
  6380                           
  6381                           ;doprnt.c: 536: while(c = *f++) {
  6382  0001DA  EF83  F005         	goto	l4731
  6383  0001DE                     l4425:
  6384                           
  6385                           ; BSR set to: 1
  6386                           ;doprnt.c: 538: if(c != '%')
  6387  0001DE  0E25               	movlw	37
  6388  0001E0  0101               	movlb	1	; () banked
  6389  0001E2  1912               	xorwf	printf@c& (0+255),w,b
  6390  0001E4  B4D8               	btfsc	status,2,c
  6391  0001E6  D006               	goto	l4429
  6392                           
  6393                           ; BSR set to: 1
  6394                           ;doprnt.c: 540: {
  6395                           ;doprnt.c: 541: (putch(c) );
  6396  0001E8  0101               	movlb	1	; () banked
  6397  0001EA  5112               	movf	printf@c& (0+255),w,b
  6398  0001EC  ECBC  F00D         	call	_putch
  6399                           
  6400                           ;doprnt.c: 542: continue;
  6401  0001F0  EF83  F005         	goto	l4731
  6402  0001F4                     l4429:
  6403                           
  6404                           ;doprnt.c: 543: }
  6405                           ;doprnt.c: 546: width = 0;
  6406  0001F4  0E00               	movlw	0
  6407  0001F6  0101               	movlb	1	; () banked
  6408  0001F8  6F11               	movwf	(printf@width+1)& (0+255),b
  6409  0001FA  0E00               	movlw	0
  6410  0001FC  6F10               	movwf	printf@width& (0+255),b
  6411                           
  6412                           ;doprnt.c: 548: flag = 0;
  6413  0001FE  0E00               	movlw	0
  6414  000200  0101               	movlb	1	; () banked
  6415  000202  6F14               	movwf	(printf@flag+1)& (0+255),b
  6416  000204  0E00               	movlw	0
  6417  000206  6F13               	movwf	printf@flag& (0+255),b
  6418                           
  6419                           ; BSR set to: 1
  6420                           ;doprnt.c: 551: switch(*f) {
  6421                           
  6422                           ;doprnt.c: 550: for(;;) {
  6423  000208  D00F               	goto	l4441
  6424  00020A                     l4431:
  6425                           
  6426                           ;doprnt.c: 554: flag |= 0x08;
  6427  00020A  0101               	movlb	1	; () banked
  6428  00020C  8713               	bsf	printf@flag& (0+255),3,b
  6429  00020E  D008               	goto	L5
  6430  000210                     l4433:
  6431                           
  6432                           ;doprnt.c: 561: flag |= 0x01;
  6433  000210  0101               	movlb	1	; () banked
  6434  000212  8113               	bsf	printf@flag& (0+255),0,b
  6435  000214  D005               	goto	L5
  6436  000216                     l4435:
  6437                           
  6438                           ;doprnt.c: 574: flag |= 0x800;
  6439  000216  0101               	movlb	1	; () banked
  6440  000218  8714               	bsf	(printf@flag+1)& (0+255),3,b
  6441  00021A  D002               	goto	L5
  6442  00021C                     l4437:
  6443                           
  6444                           ;doprnt.c: 580: flag |= 0x04;
  6445  00021C  0101               	movlb	1	; () banked
  6446  00021E  8513               	bsf	printf@flag& (0+255),2,b
  6447  000220                     L5:
  6448                           
  6449                           ;doprnt.c: 581: f++;
  6450  000220  4A1C               	infsnz	printf@f,f,c
  6451  000222  2A1D               	incf	printf@f+1,f,c
  6452                           
  6453                           ;doprnt.c: 582: continue;
  6454  000224  D001               	goto	l4441
  6455                           
  6456                           ; BSR set to: 1
  6457                           ;doprnt.c: 584: }
  6458  000226  D014               	goto	l1028
  6459  000228                     l4441:
  6460  000228  C01C  FFF6         	movff	printf@f,tblptrl
  6461  00022C  C01D  FFF7         	movff	printf@f+1,tblptrh
  6462  000230                     	if	0	;tblptru may be non-zero
  6463  000230                     	endif
  6464  000230                     	if	0	;tblptru may be non-zero
  6465  000230                     	endif
  6466  000230  0008               	tblrd		*
  6467  000232  50F5               	movf	tablat,w,c
  6468                           
  6469                           ; Switch size 1, requested type "space"
  6470                           ; Number of cases is 4, Range of values is 32 to 48
  6471                           ; switch strategies available:
  6472                           ; Name         Instructions Cycles
  6473                           ; simple_byte           13     7 (average)
  6474                           ;	Chosen strategy is simple_byte
  6475  000234  0A20               	xorlw	32	; case 32
  6476  000236  B4D8               	btfsc	status,2,c
  6477  000238  D7EB               	goto	l4433
  6478  00023A  0A03               	xorlw	3	; case 35
  6479  00023C  B4D8               	btfsc	status,2,c
  6480  00023E  D7EB               	goto	l4435
  6481  000240  0A0E               	xorlw	14	; case 45
  6482  000242  B4D8               	btfsc	status,2,c
  6483  000244  D7E2               	goto	l4431
  6484  000246  0A1D               	xorlw	29	; case 48
  6485  000248  B4D8               	btfsc	status,2,c
  6486  00024A  D7E8               	goto	l4437
  6487                           
  6488                           ;doprnt.c: 585: break;
  6489  00024C  D001               	goto	l1028
  6490                           
  6491                           ;doprnt.c: 586: }
  6492  00024E  D7EC               	goto	l4441
  6493  000250                     l1028:
  6494                           
  6495                           ;doprnt.c: 593: if(flag & 0x08)
  6496  000250  0101               	movlb	1	; () banked
  6497  000252  A713               	btfss	printf@flag& (0+255),3,b
  6498  000254  D003               	goto	l4445
  6499                           
  6500                           ; BSR set to: 1
  6501                           ;doprnt.c: 594: flag &= ~0x04;
  6502  000256  0101               	movlb	1	; () banked
  6503  000258  9513               	bcf	printf@flag& (0+255),2,b
  6504  00025A  D000               	goto	l4445
  6505  00025C                     l4445:
  6506                           
  6507                           ; BSR set to: 1
  6508                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6509  00025C  C01C  FFF6         	movff	printf@f,tblptrl
  6510  000260  C01D  FFF7         	movff	printf@f+1,tblptrh
  6511  000264                     	if	0	;tblptru may be non-zero
  6512  000264                     	endif
  6513  000264                     	if	0	;tblptru may be non-zero
  6514  000264                     	endif
  6515  000264  0008               	tblrd		*
  6516  000266  50F5               	movf	tablat,w,c
  6517  000268  EC76  F00D         	call	_isdigit
  6518  00026C  A0D8               	btfss	status,0,c
  6519  00026E  D038               	goto	l4457
  6520                           
  6521                           ;doprnt.c: 598: width = 0;
  6522  000270  0E00               	movlw	0
  6523  000272  0101               	movlb	1	; () banked
  6524  000274  6F11               	movwf	(printf@width+1)& (0+255),b
  6525  000276  0E00               	movlw	0
  6526  000278  6F10               	movwf	printf@width& (0+255),b
  6527  00027A  D000               	goto	l4449
  6528  00027C                     l4449:
  6529                           
  6530                           ;doprnt.c: 600: width *= 10;
  6531  00027C  C110  F010         	movff	printf@width,___wmul@multiplier
  6532  000280  C111  F011         	movff	printf@width+1,___wmul@multiplier+1
  6533  000284  0E00               	movlw	0
  6534  000286  6E13               	movwf	___wmul@multiplicand+1,c
  6535  000288  0E0A               	movlw	10
  6536  00028A  6E12               	movwf	___wmul@multiplicand,c
  6537  00028C  EC3F  F00D         	call	___wmul	;wreg free
  6538  000290  C010  F110         	movff	?___wmul,printf@width
  6539  000294  C011  F111         	movff	?___wmul+1,printf@width+1
  6540                           
  6541                           ;doprnt.c: 601: width += *f++ - '0';
  6542  000298  0ED0               	movlw	208
  6543  00029A  6E22               	movwf	??_printf& (0+255),c
  6544  00029C  0EFF               	movlw	255
  6545  00029E  6E23               	movwf	(??_printf+1)& (0+255),c
  6546  0002A0  C01C  FFF6         	movff	printf@f,tblptrl
  6547  0002A4  C01D  FFF7         	movff	printf@f+1,tblptrh
  6548  0002A8                     	if	0	;tblptru may be non-zero
  6549  0002A8                     	endif
  6550  0002A8                     	if	0	;tblptru may be non-zero
  6551  0002A8                     	endif
  6552  0002A8  0008               	tblrd		*
  6553  0002AA  50F5               	movf	tablat,w,c
  6554  0002AC  6E24               	movwf	(??_printf+2)& (0+255),c
  6555  0002AE  6A25               	clrf	(??_printf+3)& (0+255),c
  6556  0002B0  5022               	movf	??_printf,w,c
  6557  0002B2  2624               	addwf	??_printf+2,f,c
  6558  0002B4  5023               	movf	??_printf+1,w,c
  6559  0002B6  2225               	addwfc	??_printf+3,f,c
  6560  0002B8  5024               	movf	??_printf+2,w,c
  6561  0002BA  0101               	movlb	1	; () banked
  6562  0002BC  2710               	addwf	printf@width& (0+255),f,b
  6563  0002BE  5025               	movf	??_printf+3,w,c
  6564  0002C0  0101               	movlb	1	; () banked
  6565  0002C2  2311               	addwfc	(printf@width+1)& (0+255),f,b
  6566                           
  6567                           ; BSR set to: 1
  6568  0002C4  4A1C               	infsnz	printf@f,f,c
  6569  0002C6  2A1D               	incf	printf@f+1,f,c
  6570                           
  6571                           ; BSR set to: 1
  6572                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6573  0002C8  C01C  FFF6         	movff	printf@f,tblptrl
  6574  0002CC  C01D  FFF7         	movff	printf@f+1,tblptrh
  6575  0002D0                     	if	0	;tblptru may be non-zero
  6576  0002D0                     	endif
  6577  0002D0                     	if	0	;tblptru may be non-zero
  6578  0002D0                     	endif
  6579  0002D0  0008               	tblrd		*
  6580  0002D2  50F5               	movf	tablat,w,c
  6581  0002D4  EC76  F00D         	call	_isdigit
  6582  0002D8  A0D8               	btfss	status,0,c
  6583  0002DA  D01B               	goto	l4465
  6584  0002DC  D7CF               	goto	l4449
  6585                           
  6586                           ;doprnt.c: 604: } else if(*f == '*') {
  6587  0002DE  D019               	goto	l4465
  6588  0002E0                     l4457:
  6589  0002E0  C01C  FFF6         	movff	printf@f,tblptrl
  6590  0002E4  C01D  FFF7         	movff	printf@f+1,tblptrh
  6591  0002E8                     	if	0	;tblptru may be non-zero
  6592  0002E8                     	endif
  6593  0002E8                     	if	0	;tblptru may be non-zero
  6594  0002E8                     	endif
  6595  0002E8  0008               	tblrd		*
  6596  0002EA  50F5               	movf	tablat,w,c
  6597  0002EC  0A2A               	xorlw	42
  6598  0002EE  A4D8               	btfss	status,2,c
  6599  0002F0  D010               	goto	l4465
  6600                           
  6601                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  6602  0002F2  C10B  FFD9         	movff	printf@ap,fsr2l
  6603  0002F6  C10C  FFDA         	movff	printf@ap+1,fsr2h
  6604  0002FA  CFDE F110          	movff	postinc2,printf@width
  6605  0002FE  CFDD F111          	movff	postdec2,printf@width+1
  6606  000302  0E02               	movlw	2
  6607  000304  0101               	movlb	1	; () banked
  6608  000306  270B               	addwf	printf@ap& (0+255),f,b
  6609  000308  0E00               	movlw	0
  6610  00030A  230C               	addwfc	(printf@ap+1)& (0+255),f,b
  6611                           
  6612                           ; BSR set to: 1
  6613                           ;doprnt.c: 606: f++;
  6614  00030C  4A1C               	infsnz	printf@f,f,c
  6615  00030E  2A1D               	incf	printf@f+1,f,c
  6616                           
  6617                           ; BSR set to: 1
  6618  000310  D000               	goto	l4465
  6619  000312                     l4465:
  6620                           
  6621                           ;doprnt.c: 608: }
  6622                           ;doprnt.c: 611: if(*f == '.') {
  6623  000312  C01C  FFF6         	movff	printf@f,tblptrl
  6624  000316  C01D  FFF7         	movff	printf@f+1,tblptrh
  6625  00031A                     	if	0	;tblptru may be non-zero
  6626  00031A                     	endif
  6627  00031A                     	if	0	;tblptru may be non-zero
  6628  00031A                     	endif
  6629  00031A  0008               	tblrd		*
  6630  00031C  50F5               	movf	tablat,w,c
  6631  00031E  0A2E               	xorlw	46
  6632  000320  A4D8               	btfss	status,2,c
  6633  000322  D03E               	goto	l4485
  6634                           
  6635                           ;doprnt.c: 612: flag |= 0x4000;
  6636  000324  0101               	movlb	1	; () banked
  6637  000326  8D14               	bsf	(printf@flag+1)& (0+255),6,b
  6638                           
  6639                           ;doprnt.c: 613: f++;
  6640  000328  4A1C               	infsnz	printf@f,f,c
  6641  00032A  2A1D               	incf	printf@f+1,f,c
  6642                           
  6643                           ; BSR set to: 1
  6644                           ;doprnt.c: 615: if(*f == '*') {
  6645  00032C  C01C  FFF6         	movff	printf@f,tblptrl
  6646  000330  C01D  FFF7         	movff	printf@f+1,tblptrh
  6647  000334                     	if	0	;tblptru may be non-zero
  6648  000334                     	endif
  6649  000334                     	if	0	;tblptru may be non-zero
  6650  000334                     	endif
  6651  000334  0008               	tblrd		*
  6652  000336  50F5               	movf	tablat,w,c
  6653  000338  0A2A               	xorlw	42
  6654  00033A  A4D8               	btfss	status,2,c
  6655  00033C  D00F               	goto	l4477
  6656                           
  6657                           ; BSR set to: 1
  6658                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  6659  00033E  C10B  FFD9         	movff	printf@ap,fsr2l
  6660  000342  C10C  FFDA         	movff	printf@ap+1,fsr2h
  6661  000346  50DF               	movf	indf2,w,c
  6662  000348  0101               	movlb	1	; () banked
  6663  00034A  6F0F               	movwf	printf@prec& (0+255),b
  6664                           
  6665                           ; BSR set to: 1
  6666  00034C  0E02               	movlw	2
  6667  00034E  0101               	movlb	1	; () banked
  6668  000350  270B               	addwf	printf@ap& (0+255),f,b
  6669  000352  0E00               	movlw	0
  6670  000354  230C               	addwfc	(printf@ap+1)& (0+255),f,b
  6671                           
  6672                           ; BSR set to: 1
  6673                           ;doprnt.c: 617: f++;
  6674  000356  4A1C               	infsnz	printf@f,f,c
  6675  000358  2A1D               	incf	printf@f+1,f,c
  6676                           
  6677                           ;doprnt.c: 618: } else
  6678  00035A  D0C1               	goto	l4535
  6679  00035C                     l4477:
  6680                           
  6681                           ; BSR set to: 1
  6682                           ;doprnt.c: 620: {
  6683                           ;doprnt.c: 621: prec = 0;
  6684  00035C  0E00               	movlw	0
  6685  00035E  0101               	movlb	1	; () banked
  6686  000360  6F0F               	movwf	printf@prec& (0+255),b
  6687                           
  6688                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6689  000362  D012               	goto	l4483
  6690  000364                     l4479:
  6691                           
  6692                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6693  000364  C01C  FFF6         	movff	printf@f,tblptrl
  6694  000368  C01D  FFF7         	movff	printf@f+1,tblptrh
  6695  00036C                     	if	0	;tblptru may be non-zero
  6696  00036C                     	endif
  6697  00036C                     	if	0	;tblptru may be non-zero
  6698  00036C                     	endif
  6699  00036C  0008               	tblrd		*
  6700  00036E  CFF5 F022          	movff	tablat,??_printf
  6701  000372  0101               	movlb	1	; () banked
  6702  000374  510F               	movf	printf@prec& (0+255),w,b
  6703  000376  0D0A               	mullw	10
  6704  000378  50F3               	movf	prodl,w,c
  6705  00037A  2422               	addwf	??_printf,w,c
  6706  00037C  0FD0               	addlw	208
  6707  00037E  0101               	movlb	1	; () banked
  6708  000380  6F0F               	movwf	printf@prec& (0+255),b
  6709                           
  6710                           ; BSR set to: 1
  6711  000382  4A1C               	infsnz	printf@f,f,c
  6712  000384  2A1D               	incf	printf@f+1,f,c
  6713  000386  D000               	goto	l4483
  6714  000388                     l4483:
  6715                           
  6716                           ; BSR set to: 1
  6717  000388  C01C  FFF6         	movff	printf@f,tblptrl
  6718  00038C  C01D  FFF7         	movff	printf@f+1,tblptrh
  6719  000390                     	if	0	;tblptru may be non-zero
  6720  000390                     	endif
  6721  000390                     	if	0	;tblptru may be non-zero
  6722  000390                     	endif
  6723  000390  0008               	tblrd		*
  6724  000392  50F5               	movf	tablat,w,c
  6725  000394  EC76  F00D         	call	_isdigit
  6726  000398  A0D8               	btfss	status,0,c
  6727  00039A  D0A1               	goto	l4535
  6728  00039C  D7E3               	goto	l4479
  6729                           
  6730                           ;doprnt.c: 624: }
  6731                           ;doprnt.c: 625: } else {
  6732  00039E  D09F               	goto	l4535
  6733  0003A0                     l4485:
  6734                           
  6735                           ;doprnt.c: 626: prec = 0;
  6736  0003A0  0E00               	movlw	0
  6737  0003A2  0101               	movlb	1	; () banked
  6738  0003A4  6F0F               	movwf	printf@prec& (0+255),b
  6739                           
  6740                           ; BSR set to: 1
  6741                           ;doprnt.c: 630: }
  6742                           ;doprnt.c: 635: switch(c = *f++) {
  6743  0003A6  D09B               	goto	l4535
  6744                           
  6745                           ; BSR set to: 1
  6746                           ;doprnt.c: 638: goto alldone;
  6747                           
  6748                           ;doprnt.c: 637: case 0:
  6749  0003A8  0012               	return	
  6750  0003AA                     l4487:
  6751                           
  6752                           ; BSR set to: 1
  6753                           ;doprnt.c: 691: flag |= 0x40;
  6754  0003AA  0101               	movlb	1	; () banked
  6755  0003AC  8D13               	bsf	printf@flag& (0+255),6,b
  6756                           
  6757                           ; BSR set to: 1
  6758                           ;doprnt.c: 698: case 'i':
  6759                           ;doprnt.c: 699: break;
  6760                           
  6761                           ; BSR set to: 1
  6762                           
  6763                           ;doprnt.c: 697: case 'd':
  6764                           
  6765                           ;doprnt.c: 693: break;
  6766  0003AE  D0BB               	goto	l4537
  6767  0003B0                     l4489:
  6768                           
  6769                           ; BSR set to: 1
  6770                           ;doprnt.c: 714: flag |= 0x20;
  6771  0003B0  0101               	movlb	1	; () banked
  6772  0003B2  8B13               	bsf	printf@flag& (0+255),5,b
  6773  0003B4                     l1050:
  6774                           
  6775                           ; BSR set to: 1
  6776                           ;doprnt.c: 721: flag |= 0x80;
  6777  0003B4  0101               	movlb	1	; () banked
  6778  0003B6  8F13               	bsf	printf@flag& (0+255),7,b
  6779                           
  6780                           ;doprnt.c: 723: break;
  6781  0003B8  D0B6               	goto	l4537
  6782  0003BA                     l4491:
  6783                           
  6784                           ; BSR set to: 1
  6785                           ;doprnt.c: 753: if(prec && prec < len)
  6786  0003BA  0101               	movlb	1	; () banked
  6787  0003BC  510F               	movf	printf@prec& (0+255),w,b
  6788  0003BE  0101               	movlb	1	; () banked
  6789  0003C0  B4D8               	btfsc	status,2,c
  6790  0003C2  D015               	goto	l4497
  6791                           
  6792                           ; BSR set to: 1
  6793  0003C4  C10F  F022         	movff	printf@prec,??_printf
  6794  0003C8  6A23               	clrf	(??_printf+1)& (0+255),c
  6795  0003CA  BE22               	btfsc	??_printf& (0+255),7,c
  6796  0003CC  0623               	decf	(??_printf+1)& (0+255),f,c
  6797  0003CE  0101               	movlb	1	; () banked
  6798  0003D0  5109               	movf	printf@len& (0+255),w,b
  6799  0003D2  5C22               	subwf	??_printf,w,c
  6800  0003D4  0101               	movlb	1	; () banked
  6801  0003D6  510A               	movf	(printf@len+1)& (0+255),w,b
  6802  0003D8  5823               	subwfb	??_printf+1,w,c
  6803  0003DA  B0D8               	btfsc	status,0,c
  6804  0003DC  D008               	goto	l4497
  6805                           
  6806                           ; BSR set to: 1
  6807                           ;doprnt.c: 754: len = prec;
  6808  0003DE  0101               	movlb	1	; () banked
  6809  0003E0  510F               	movf	printf@prec& (0+255),w,b
  6810  0003E2  0101               	movlb	1	; () banked
  6811  0003E4  6F09               	movwf	printf@len& (0+255),b
  6812  0003E6  6B0A               	clrf	(printf@len+1)& (0+255),b
  6813  0003E8  BF09               	btfsc	printf@len& (0+255),7,b
  6814  0003EA  070A               	decf	(printf@len+1)& (0+255),f,b
  6815  0003EC  D000               	goto	l4497
  6816  0003EE                     l4497:
  6817                           
  6818                           ; BSR set to: 1
  6819                           ;doprnt.c: 757: if(width > len)
  6820  0003EE  0101               	movlb	1	; () banked
  6821  0003F0  5110               	movf	printf@width& (0+255),w,b
  6822  0003F2  0101               	movlb	1	; () banked
  6823  0003F4  5D09               	subwf	printf@len& (0+255),w,b
  6824  0003F6  0101               	movlb	1	; () banked
  6825  0003F8  5111               	movf	(printf@width+1)& (0+255),w,b
  6826  0003FA  0101               	movlb	1	; () banked
  6827  0003FC  590A               	subwfb	(printf@len+1)& (0+255),w,b
  6828  0003FE  B0D8               	btfsc	status,0,c
  6829  000400  D009               	goto	l4501
  6830                           
  6831                           ; BSR set to: 1
  6832                           ;doprnt.c: 758: width -= len;
  6833  000402  0101               	movlb	1	; () banked
  6834  000404  5109               	movf	printf@len& (0+255),w,b
  6835  000406  0101               	movlb	1	; () banked
  6836  000408  5F10               	subwf	printf@width& (0+255),f,b
  6837  00040A  0101               	movlb	1	; () banked
  6838  00040C  510A               	movf	(printf@len+1)& (0+255),w,b
  6839  00040E  0101               	movlb	1	; () banked
  6840  000410  5B11               	subwfb	(printf@width+1)& (0+255),f,b
  6841  000412  D006               	goto	l4503
  6842  000414                     l4501:
  6843                           
  6844                           ; BSR set to: 1
  6845                           ;doprnt.c: 759: else
  6846                           ;doprnt.c: 760: width = 0;
  6847  000414  0E00               	movlw	0
  6848  000416  0101               	movlb	1	; () banked
  6849  000418  6F11               	movwf	(printf@width+1)& (0+255),b
  6850  00041A  0E00               	movlw	0
  6851  00041C  6F10               	movwf	printf@width& (0+255),b
  6852  00041E  D000               	goto	l4503
  6853  000420                     l4503:
  6854                           
  6855                           ; BSR set to: 1
  6856                           ;doprnt.c: 762: if(!(flag & 0x08))
  6857  000420  0101               	movlb	1	; () banked
  6858  000422  A713               	btfss	printf@flag& (0+255),3,b
  6859  000424  D006               	goto	l4509
  6860  000426  D01D               	goto	l4515
  6861                           
  6862                           ; BSR set to: 1
  6863                           ;doprnt.c: 764: while(width--)
  6864  000428  D004               	goto	l4509
  6865  00042A                     l4507:
  6866                           
  6867                           ; BSR set to: 1
  6868                           ;doprnt.c: 765: (putch(' ') );
  6869  00042A  0E20               	movlw	32
  6870  00042C  ECBC  F00D         	call	_putch
  6871  000430  D000               	goto	l4509
  6872  000432                     l4509:
  6873  000432  0101               	movlb	1	; () banked
  6874  000434  0710               	decf	printf@width& (0+255),f,b
  6875  000436  A0D8               	btfss	status,0,c
  6876  000438  0711               	decf	(printf@width+1)& (0+255),f,b
  6877  00043A  0101               	movlb	1	; () banked
  6878  00043C  2910               	incf	printf@width& (0+255),w,b
  6879  00043E  E1F5               	bnz	l4507
  6880  000440  0101               	movlb	1	; () banked
  6881  000442  2911               	incf	(printf@width+1)& (0+255),w,b
  6882  000444  B4D8               	btfsc	status,2,c
  6883  000446  D00D               	goto	l4515
  6884  000448  D7F0               	goto	l4507
  6885                           
  6886                           ; BSR set to: 1
  6887                           ;doprnt.c: 767: while(len--)
  6888                           
  6889                           ; BSR set to: 1
  6890  00044A  D00B               	goto	l4515
  6891  00044C                     l4511:
  6892                           
  6893                           ; BSR set to: 1
  6894                           ;doprnt.c: 768: (putch(*cp++) );
  6895  00044C  C101  FFD9         	movff	printf@cp,fsr2l
  6896  000450  C102  FFDA         	movff	printf@cp+1,fsr2h
  6897  000454  50DF               	movf	indf2,w,c
  6898  000456  ECBC  F00D         	call	_putch
  6899  00045A  0101               	movlb	1	; () banked
  6900  00045C  4B01               	infsnz	printf@cp& (0+255),f,b
  6901  00045E  2B02               	incf	(printf@cp+1)& (0+255),f,b
  6902  000460  D000               	goto	l4515
  6903  000462                     l4515:
  6904                           
  6905                           ; BSR set to: 1
  6906  000462  0101               	movlb	1	; () banked
  6907  000464  0709               	decf	printf@len& (0+255),f,b
  6908  000466  A0D8               	btfss	status,0,c
  6909  000468  070A               	decf	(printf@len+1)& (0+255),f,b
  6910  00046A  0101               	movlb	1	; () banked
  6911  00046C  2909               	incf	printf@len& (0+255),w,b
  6912  00046E  E1EE               	bnz	l4511
  6913  000470  0101               	movlb	1	; () banked
  6914  000472  290A               	incf	(printf@len+1)& (0+255),w,b
  6915  000474  A4D8               	btfss	status,2,c
  6916  000476  D7EA               	goto	l4511
  6917                           
  6918                           ; BSR set to: 1
  6919                           ;doprnt.c: 770: if(flag & 0x08)
  6920  000478  0101               	movlb	1	; () banked
  6921  00047A  B713               	btfsc	printf@flag& (0+255),3,b
  6922  00047C  D006               	goto	l4521
  6923  00047E  D343               	goto	l4731
  6924                           
  6925                           ; BSR set to: 1
  6926                           ;doprnt.c: 771: while(width--)
  6927  000480  D004               	goto	l4521
  6928  000482                     l4519:
  6929                           
  6930                           ; BSR set to: 1
  6931                           ;doprnt.c: 772: (putch(' ') );
  6932  000482  0E20               	movlw	32
  6933  000484  ECBC  F00D         	call	_putch
  6934  000488  D000               	goto	l4521
  6935  00048A                     l4521:
  6936  00048A  0101               	movlb	1	; () banked
  6937  00048C  0710               	decf	printf@width& (0+255),f,b
  6938  00048E  A0D8               	btfss	status,0,c
  6939  000490  0711               	decf	(printf@width+1)& (0+255),f,b
  6940  000492  0101               	movlb	1	; () banked
  6941  000494  2910               	incf	printf@width& (0+255),w,b
  6942  000496  E1F5               	bnz	l4519
  6943  000498  0101               	movlb	1	; () banked
  6944  00049A  2911               	incf	(printf@width+1)& (0+255),w,b
  6945  00049C  B4D8               	btfsc	status,2,c
  6946  00049E  D333               	goto	l4731
  6947  0004A0  D7F0               	goto	l4519
  6948                           
  6949                           ; BSR set to: 1
  6950                           ;doprnt.c: 774: continue;
  6951                           
  6952                           ; BSR set to: 1
  6953  0004A2  D331               	goto	l4731
  6954  0004A4                     l4523:
  6955                           
  6956                           ; BSR set to: 1
  6957                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6958  0004A4  C10B  FFD9         	movff	printf@ap,fsr2l
  6959  0004A8  C10C  FFDA         	movff	printf@ap+1,fsr2h
  6960  0004AC  50DF               	movf	indf2,w,c
  6961  0004AE  0101               	movlb	1	; () banked
  6962  0004B0  6F12               	movwf	printf@c& (0+255),b
  6963                           
  6964                           ; BSR set to: 1
  6965  0004B2  0E02               	movlw	2
  6966  0004B4  0101               	movlb	1	; () banked
  6967  0004B6  270B               	addwf	printf@ap& (0+255),f,b
  6968  0004B8  0E00               	movlw	0
  6969  0004BA  230C               	addwfc	(printf@ap+1)& (0+255),f,b
  6970  0004BC  D000               	goto	l4527
  6971  0004BE                     l4527:
  6972                           
  6973                           ; BSR set to: 1
  6974                           ;doprnt.c: 805: cp = (char *)&c;
  6975  0004BE  0E12               	movlw	low printf@c
  6976  0004C0  0101               	movlb	1	; () banked
  6977  0004C2  6F01               	movwf	printf@cp& (0+255),b
  6978  0004C4  0E01               	movlw	high printf@c
  6979  0004C6  0101               	movlb	1	; () banked
  6980  0004C8  6F02               	movwf	(printf@cp+1)& (0+255),b
  6981                           
  6982                           ; BSR set to: 1
  6983                           ;doprnt.c: 806: len = 1;
  6984  0004CA  0E00               	movlw	0
  6985  0004CC  0101               	movlb	1	; () banked
  6986  0004CE  6F0A               	movwf	(printf@len+1)& (0+255),b
  6987  0004D0  0E01               	movlw	1
  6988  0004D2  6F09               	movwf	printf@len& (0+255),b
  6989                           
  6990                           ;doprnt.c: 807: goto dostring;
  6991  0004D4  D772               	goto	l4491
  6992  0004D6                     l4531:
  6993                           
  6994                           ; BSR set to: 1
  6995                           ;doprnt.c: 818: flag |= 0xC0;
  6996  0004D6  0EC0               	movlw	192
  6997  0004D8  0101               	movlb	1	; () banked
  6998  0004DA  1313               	iorwf	printf@flag& (0+255),f,b
  6999                           
  7000                           ; BSR set to: 1
  7001                           ;doprnt.c: 822: }
  7002                           
  7003                           ;doprnt.c: 819: break;
  7004  0004DC  D024               	goto	l4537
  7005  0004DE                     l4535:
  7006  0004DE  C01C  FFF6         	movff	printf@f,tblptrl
  7007  0004E2  C01D  FFF7         	movff	printf@f+1,tblptrh
  7008  0004E6  4A1C               	infsnz	printf@f,f,c
  7009  0004E8  2A1D               	incf	printf@f+1,f,c
  7010  0004EA                     	if	0	;tblptru may be non-zero
  7011  0004EA                     	endif
  7012  0004EA                     	if	0	;tblptru may be non-zero
  7013  0004EA                     	endif
  7014  0004EA  0008               	tblrd		*
  7015  0004EC  CFF5 F112          	movff	tablat,printf@c
  7016  0004F0  0101               	movlb	1	; () banked
  7017  0004F2  5112               	movf	printf@c& (0+255),w,b
  7018                           
  7019                           ; Switch size 1, requested type "space"
  7020                           ; Number of cases is 8, Range of values is 0 to 120
  7021                           ; switch strategies available:
  7022                           ; Name         Instructions Cycles
  7023                           ; simple_byte           25    13 (average)
  7024                           ;	Chosen strategy is simple_byte
  7025  0004F4  0A00               	xorlw	0	; case 0
  7026  0004F6  B4D8               	btfsc	status,2,c
  7027  0004F8  0012               	return	
  7028  0004FA  0A58               	xorlw	88	; case 88
  7029  0004FC  B4D8               	btfsc	status,2,c
  7030  0004FE  D758               	goto	l4489
  7031  000500  0A3B               	xorlw	59	; case 99
  7032  000502  B4D8               	btfsc	status,2,c
  7033  000504  D7CF               	goto	l4523
  7034  000506  0A07               	xorlw	7	; case 100
  7035  000508  B4D8               	btfsc	status,2,c
  7036  00050A  D00D               	goto	l4537
  7037  00050C  0A0D               	xorlw	13	; case 105
  7038  00050E  B4D8               	btfsc	status,2,c
  7039  000510  D00A               	goto	l4537
  7040  000512  0A06               	xorlw	6	; case 111
  7041  000514  B4D8               	btfsc	status,2,c
  7042  000516  D749               	goto	l4487
  7043  000518  0A1A               	xorlw	26	; case 117
  7044  00051A  B4D8               	btfsc	status,2,c
  7045  00051C  D7DC               	goto	l4531
  7046  00051E  0A0D               	xorlw	13	; case 120
  7047  000520  B4D8               	btfsc	status,2,c
  7048  000522  D748               	goto	l1050
  7049  000524  D7CC               	goto	l4527
  7050  000526                     l4537:
  7051                           
  7052                           ; BSR set to: 1
  7053                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  7054  000526  0EC0               	movlw	192
  7055  000528  0101               	movlb	1	; () banked
  7056  00052A  1513               	andwf	printf@flag& (0+255),w,b
  7057  00052C  6E22               	movwf	??_printf& (0+255),c
  7058  00052E  0E00               	movlw	0
  7059  000530  0101               	movlb	1	; () banked
  7060  000532  1514               	andwf	(printf@flag+1)& (0+255),w,b
  7061  000534  6E23               	movwf	(??_printf+1)& (0+255),c
  7062  000536  5022               	movf	??_printf,w,c
  7063  000538  1023               	iorwf	??_printf+1,w,c
  7064  00053A  A4D8               	btfss	status,2,c
  7065  00053C  D019               	goto	l4549
  7066                           
  7067                           ; BSR set to: 1
  7068                           ;doprnt.c: 1253: {
  7069                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7070  00053E  C10B  FFD9         	movff	printf@ap,fsr2l
  7071  000542  C10C  FFDA         	movff	printf@ap+1,fsr2h
  7072  000546  CFDE F10D          	movff	postinc2,printf@val
  7073  00054A  CFDD F10E          	movff	postdec2,printf@val+1
  7074                           
  7075                           ; BSR set to: 1
  7076  00054E  0E02               	movlw	2
  7077  000550  0101               	movlb	1	; () banked
  7078  000552  270B               	addwf	printf@ap& (0+255),f,b
  7079  000554  0E00               	movlw	0
  7080  000556  230C               	addwfc	(printf@ap+1)& (0+255),f,b
  7081                           
  7082                           ; BSR set to: 1
  7083                           ;doprnt.c: 1261: if((int)val < 0) {
  7084  000558  0101               	movlb	1	; () banked
  7085  00055A  AF0E               	btfss	(printf@val+1)& (0+255),7,b
  7086  00055C  D017               	goto	l4553
  7087                           
  7088                           ; BSR set to: 1
  7089                           ;doprnt.c: 1262: flag |= 0x03;
  7090  00055E  0E03               	movlw	3
  7091  000560  0101               	movlb	1	; () banked
  7092  000562  1313               	iorwf	printf@flag& (0+255),f,b
  7093                           
  7094                           ; BSR set to: 1
  7095                           ;doprnt.c: 1263: val = -val;
  7096  000564  0101               	movlb	1	; () banked
  7097  000566  6D0D               	negf	printf@val& (0+255),b
  7098  000568  1F0E               	comf	(printf@val+1)& (0+255),f,b
  7099  00056A  B0D8               	btfsc	status,0,c
  7100  00056C  2B0E               	incf	(printf@val+1)& (0+255),f,b
  7101                           
  7102                           ; BSR set to: 1
  7103                           ;doprnt.c: 1264: }
  7104                           ;doprnt.c: 1266: }
  7105  00056E  D00E               	goto	l4553
  7106  000570                     l4549:
  7107                           
  7108                           ; BSR set to: 1
  7109                           ;doprnt.c: 1268: else
  7110                           ;doprnt.c: 1273: {
  7111                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7112  000570  C10B  FFD9         	movff	printf@ap,fsr2l
  7113  000574  C10C  FFDA         	movff	printf@ap+1,fsr2h
  7114  000578  CFDE F10D          	movff	postinc2,printf@val
  7115  00057C  CFDD F10E          	movff	postdec2,printf@val+1
  7116                           
  7117                           ; BSR set to: 1
  7118  000580  0E02               	movlw	2
  7119  000582  0101               	movlb	1	; () banked
  7120  000584  270B               	addwf	printf@ap& (0+255),f,b
  7121  000586  0E00               	movlw	0
  7122  000588  230C               	addwfc	(printf@ap+1)& (0+255),f,b
  7123  00058A  D000               	goto	l4553
  7124  00058C                     l4553:
  7125                           
  7126                           ; BSR set to: 1
  7127                           ;doprnt.c: 1287: }
  7128                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7129  00058C  0101               	movlb	1	; () banked
  7130  00058E  510F               	movf	printf@prec& (0+255),w,b
  7131  000590  0101               	movlb	1	; () banked
  7132  000592  A4D8               	btfss	status,2,c
  7133  000594  D073               	goto	l4603
  7134                           
  7135                           ; BSR set to: 1
  7136  000596  0101               	movlb	1	; () banked
  7137  000598  510D               	movf	printf@val& (0+255),w,b
  7138  00059A  0101               	movlb	1	; () banked
  7139  00059C  110E               	iorwf	(printf@val+1)& (0+255),w,b
  7140  00059E  A4D8               	btfss	status,2,c
  7141  0005A0  D06D               	goto	l4603
  7142                           
  7143                           ; BSR set to: 1
  7144                           ;doprnt.c: 1291: prec++;
  7145  0005A2  0101               	movlb	1	; () banked
  7146  0005A4  2B0F               	incf	printf@prec& (0+255),f,b
  7147                           
  7148                           ; BSR set to: 1
  7149                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  7150  0005A6  D06A               	goto	l4603
  7151                           
  7152                           ; BSR set to: 1
  7153                           
  7154                           ;doprnt.c: 1299: case 0x00:
  7155  0005A8  D000               	goto	l4559
  7156  0005AA                     l4559:
  7157                           
  7158                           ; BSR set to: 1
  7159                           ;doprnt.c: 1302: case 0xC0:
  7160                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7161  0005AA  0E01               	movlw	1
  7162  0005AC  0101               	movlb	1	; () banked
  7163  0005AE  6F12               	movwf	printf@c& (0+255),b
  7164  0005B0                     l4561:
  7165                           
  7166                           ; BSR set to: 1
  7167  0005B0  0E05               	movlw	5
  7168  0005B2  0101               	movlb	1	; () banked
  7169  0005B4  1912               	xorwf	printf@c& (0+255),w,b
  7170  0005B6  B4D8               	btfsc	status,2,c
  7171  0005B8  D071               	goto	l4605
  7172  0005BA  D001               	goto	l4565
  7173                           
  7174                           ; BSR set to: 1
  7175  0005BC  D06F               	goto	l4605
  7176  0005BE                     l4565:
  7177                           
  7178                           ; BSR set to: 1
  7179                           ;doprnt.c: 1306: if(val < dpowers[c])
  7180  0005BE  0101               	movlb	1	; () banked
  7181  0005C0  5112               	movf	printf@c& (0+255),w,b
  7182  0005C2  0D02               	mullw	2
  7183  0005C4  0ECD               	movlw	low _dpowers
  7184  0005C6  24F3               	addwf	prodl,w,c
  7185  0005C8  6EF6               	movwf	tblptrl,c
  7186  0005CA  0E1B               	movlw	high _dpowers
  7187  0005CC  20F4               	addwfc	prodh,w,c
  7188  0005CE  6EF7               	movwf	tblptrh,c
  7189  0005D0                     	if	0	;There are less than 3 active tblptr bytes
  7190  0005D0                     	endif
  7191  0005D0  0009               	tblrd		*+
  7192  0005D2  50F5               	movf	tablat,w,c
  7193  0005D4  0101               	movlb	1	; () banked
  7194  0005D6  5D0D               	subwf	printf@val& (0+255),w,b
  7195  0005D8  0009               	tblrd		*+
  7196  0005DA  50F5               	movf	tablat,w,c
  7197  0005DC  0101               	movlb	1	; () banked
  7198  0005DE  590E               	subwfb	(printf@val+1)& (0+255),w,b
  7199  0005E0  A0D8               	btfss	status,0,c
  7200  0005E2  D05C               	goto	l4605
  7201  0005E4  D001               	goto	l4569
  7202                           
  7203                           ; BSR set to: 1
  7204                           ;doprnt.c: 1307: break;
  7205  0005E6  D05A               	goto	l4605
  7206  0005E8                     l4569:
  7207                           
  7208                           ; BSR set to: 1
  7209  0005E8  0101               	movlb	1	; () banked
  7210  0005EA  2B12               	incf	printf@c& (0+255),f,b
  7211  0005EC  D7E1               	goto	l4561
  7212                           
  7213                           ; BSR set to: 1
  7214                           ;doprnt.c: 1309: break;
  7215                           
  7216                           ; BSR set to: 1
  7217  0005EE  D056               	goto	l4605
  7218  0005F0                     l4573:
  7219                           
  7220                           ; BSR set to: 1
  7221                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7222  0005F0  0E01               	movlw	1
  7223  0005F2  0101               	movlb	1	; () banked
  7224  0005F4  6F12               	movwf	printf@c& (0+255),b
  7225  0005F6                     l4575:
  7226                           
  7227                           ; BSR set to: 1
  7228  0005F6  0E04               	movlw	4
  7229  0005F8  0101               	movlb	1	; () banked
  7230  0005FA  1912               	xorwf	printf@c& (0+255),w,b
  7231  0005FC  B4D8               	btfsc	status,2,c
  7232  0005FE  D04E               	goto	l4605
  7233  000600  D001               	goto	l4579
  7234                           
  7235                           ; BSR set to: 1
  7236  000602  D04C               	goto	l4605
  7237  000604                     l4579:
  7238                           
  7239                           ; BSR set to: 1
  7240                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7241  000604  0101               	movlb	1	; () banked
  7242  000606  5112               	movf	printf@c& (0+255),w,b
  7243  000608  0D02               	mullw	2
  7244  00060A  0ED7               	movlw	low _hexpowers
  7245  00060C  24F3               	addwf	prodl,w,c
  7246  00060E  6EF6               	movwf	tblptrl,c
  7247  000610  0E1B               	movlw	high _hexpowers
  7248  000612  20F4               	addwfc	prodh,w,c
  7249  000614  6EF7               	movwf	tblptrh,c
  7250  000616                     	if	0	;There are less than 3 active tblptr bytes
  7251  000616                     	endif
  7252  000616  0009               	tblrd		*+
  7253  000618  50F5               	movf	tablat,w,c
  7254  00061A  0101               	movlb	1	; () banked
  7255  00061C  5D0D               	subwf	printf@val& (0+255),w,b
  7256  00061E  0009               	tblrd		*+
  7257  000620  50F5               	movf	tablat,w,c
  7258  000622  0101               	movlb	1	; () banked
  7259  000624  590E               	subwfb	(printf@val+1)& (0+255),w,b
  7260  000626  A0D8               	btfss	status,0,c
  7261  000628  D039               	goto	l4605
  7262  00062A  D001               	goto	l4583
  7263                           
  7264                           ; BSR set to: 1
  7265                           ;doprnt.c: 1318: break;
  7266  00062C  D037               	goto	l4605
  7267  00062E                     l4583:
  7268                           
  7269                           ; BSR set to: 1
  7270  00062E  0101               	movlb	1	; () banked
  7271  000630  2B12               	incf	printf@c& (0+255),f,b
  7272  000632  D7E1               	goto	l4575
  7273                           
  7274                           ; BSR set to: 1
  7275                           ;doprnt.c: 1320: break;
  7276                           
  7277                           ; BSR set to: 1
  7278  000634  D033               	goto	l4605
  7279  000636                     l4587:
  7280                           
  7281                           ; BSR set to: 1
  7282                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  7283  000636  0E01               	movlw	1
  7284  000638  0101               	movlb	1	; () banked
  7285  00063A  6F12               	movwf	printf@c& (0+255),b
  7286  00063C                     l4589:
  7287                           
  7288                           ; BSR set to: 1
  7289  00063C  0E06               	movlw	6
  7290  00063E  0101               	movlb	1	; () banked
  7291  000640  1912               	xorwf	printf@c& (0+255),w,b
  7292  000642  B4D8               	btfsc	status,2,c
  7293  000644  D02B               	goto	l4605
  7294  000646  D001               	goto	l4593
  7295                           
  7296                           ; BSR set to: 1
  7297  000648  D029               	goto	l4605
  7298  00064A                     l4593:
  7299                           
  7300                           ; BSR set to: 1
  7301                           ;doprnt.c: 1329: if(val < octpowers[c])
  7302  00064A  0101               	movlb	1	; () banked
  7303  00064C  5112               	movf	printf@c& (0+255),w,b
  7304  00064E  0D02               	mullw	2
  7305  000650  0EC1               	movlw	low _octpowers
  7306  000652  24F3               	addwf	prodl,w,c
  7307  000654  6EF6               	movwf	tblptrl,c
  7308  000656  0E1B               	movlw	high _octpowers
  7309  000658  20F4               	addwfc	prodh,w,c
  7310  00065A  6EF7               	movwf	tblptrh,c
  7311  00065C                     	if	0	;There are less than 3 active tblptr bytes
  7312  00065C                     	endif
  7313  00065C  0009               	tblrd		*+
  7314  00065E  50F5               	movf	tablat,w,c
  7315  000660  0101               	movlb	1	; () banked
  7316  000662  5D0D               	subwf	printf@val& (0+255),w,b
  7317  000664  0009               	tblrd		*+
  7318  000666  50F5               	movf	tablat,w,c
  7319  000668  0101               	movlb	1	; () banked
  7320  00066A  590E               	subwfb	(printf@val+1)& (0+255),w,b
  7321  00066C  A0D8               	btfss	status,0,c
  7322  00066E  D016               	goto	l4605
  7323  000670  D001               	goto	l4597
  7324                           
  7325                           ; BSR set to: 1
  7326                           ;doprnt.c: 1330: break;
  7327  000672  D014               	goto	l4605
  7328  000674                     l4597:
  7329                           
  7330                           ; BSR set to: 1
  7331  000674  0101               	movlb	1	; () banked
  7332  000676  2B12               	incf	printf@c& (0+255),f,b
  7333  000678  D7E1               	goto	l4589
  7334                           
  7335                           ; BSR set to: 1
  7336                           ;doprnt.c: 1336: }
  7337                           
  7338                           ; BSR set to: 1
  7339                           ;doprnt.c: 1332: break;
  7340                           
  7341                           ; BSR set to: 1
  7342  00067A  D010               	goto	l4605
  7343  00067C                     l4603:
  7344                           
  7345                           ; BSR set to: 1
  7346  00067C  0101               	movlb	1	; () banked
  7347  00067E  5113               	movf	printf@flag& (0+255),w,b
  7348  000680  0BC0               	andlw	192
  7349                           
  7350                           ; Switch size 1, requested type "space"
  7351                           ; Number of cases is 4, Range of values is 0 to 192
  7352                           ; switch strategies available:
  7353                           ; Name         Instructions Cycles
  7354                           ; simple_byte           13     7 (average)
  7355                           ;	Chosen strategy is simple_byte
  7356  000682  0A00               	xorlw	0	; case 0
  7357  000684  B4D8               	btfsc	status,2,c
  7358  000686  D791               	goto	l4559
  7359  000688  0A40               	xorlw	64	; case 64
  7360  00068A  B4D8               	btfsc	status,2,c
  7361  00068C  D7D4               	goto	l4587
  7362  00068E  0AC0               	xorlw	192	; case 128
  7363  000690  B4D8               	btfsc	status,2,c
  7364  000692  D7AE               	goto	l4573
  7365  000694  0A40               	xorlw	64	; case 192
  7366  000696  B4D8               	btfsc	status,2,c
  7367  000698  D788               	goto	l4559
  7368  00069A  D000               	goto	l4605
  7369  00069C                     l4605:
  7370                           
  7371                           ; BSR set to: 1
  7372                           ;doprnt.c: 1339: if(c < prec)
  7373  00069C  0101               	movlb	1	; () banked
  7374  00069E  5112               	movf	printf@c& (0+255),w,b
  7375  0006A0  0A80               	xorlw	128
  7376  0006A2  6E22               	movwf	??_printf& (0+255),c
  7377  0006A4  0101               	movlb	1	; () banked
  7378  0006A6  510F               	movf	printf@prec& (0+255),w,b
  7379  0006A8  0A80               	xorlw	128
  7380  0006AA  5C22               	subwf	??_printf& (0+255),w,c
  7381  0006AC  B0D8               	btfsc	status,0,c
  7382  0006AE  D003               	goto	l4609
  7383                           
  7384                           ; BSR set to: 1
  7385                           ;doprnt.c: 1340: c = prec;
  7386  0006B0  C10F  F112         	movff	printf@prec,printf@c
  7387  0006B4  D00D               	goto	l4613
  7388  0006B6                     l4609:
  7389                           
  7390                           ; BSR set to: 1
  7391                           ;doprnt.c: 1341: else if(prec < c)
  7392  0006B6  0101               	movlb	1	; () banked
  7393  0006B8  510F               	movf	printf@prec& (0+255),w,b
  7394  0006BA  0A80               	xorlw	128
  7395  0006BC  6E22               	movwf	??_printf& (0+255),c
  7396  0006BE  0101               	movlb	1	; () banked
  7397  0006C0  5112               	movf	printf@c& (0+255),w,b
  7398  0006C2  0A80               	xorlw	128
  7399  0006C4  5C22               	subwf	??_printf& (0+255),w,c
  7400  0006C6  B0D8               	btfsc	status,0,c
  7401  0006C8  D003               	goto	l4613
  7402                           
  7403                           ; BSR set to: 1
  7404                           ;doprnt.c: 1342: prec = c;
  7405  0006CA  C112  F10F         	movff	printf@c,printf@prec
  7406                           
  7407                           ; BSR set to: 1
  7408  0006CE  D000               	goto	l4613
  7409  0006D0                     l4613:
  7410                           
  7411                           ; BSR set to: 1
  7412                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7413  0006D0  0101               	movlb	1	; () banked
  7414  0006D2  5110               	movf	printf@width& (0+255),w,b
  7415  0006D4  0101               	movlb	1	; () banked
  7416  0006D6  1111               	iorwf	(printf@width+1)& (0+255),w,b
  7417  0006D8  B4D8               	btfsc	status,2,c
  7418  0006DA  D011               	goto	l4619
  7419                           
  7420                           ; BSR set to: 1
  7421  0006DC  0E03               	movlw	3
  7422  0006DE  0101               	movlb	1	; () banked
  7423  0006E0  1513               	andwf	printf@flag& (0+255),w,b
  7424  0006E2  6E22               	movwf	??_printf& (0+255),c
  7425  0006E4  0E00               	movlw	0
  7426  0006E6  0101               	movlb	1	; () banked
  7427  0006E8  1514               	andwf	(printf@flag+1)& (0+255),w,b
  7428  0006EA  6E23               	movwf	(??_printf+1)& (0+255),c
  7429  0006EC  5022               	movf	??_printf,w,c
  7430  0006EE  1023               	iorwf	??_printf+1,w,c
  7431  0006F0  B4D8               	btfsc	status,2,c
  7432  0006F2  D005               	goto	l4619
  7433                           
  7434                           ; BSR set to: 1
  7435                           ;doprnt.c: 1346: width--;
  7436  0006F4  0101               	movlb	1	; () banked
  7437  0006F6  0710               	decf	printf@width& (0+255),f,b
  7438  0006F8  A0D8               	btfss	status,0,c
  7439  0006FA  0711               	decf	(printf@width+1)& (0+255),f,b
  7440  0006FC  D000               	goto	l4619
  7441  0006FE                     l4619:
  7442                           
  7443                           ; BSR set to: 1
  7444                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7445  0006FE  0101               	movlb	1	; () banked
  7446  000700  AD14               	btfss	(printf@flag+1)& (0+255),6,b
  7447  000702  D020               	goto	l4627
  7448                           
  7449                           ; BSR set to: 1
  7450                           ;doprnt.c: 1349: if(width > prec)
  7451  000704  0E80               	movlw	128
  7452  000706  0101               	movlb	1	; () banked
  7453  000708  BF0F               	btfsc	printf@prec& (0+255),7,b
  7454  00070A  0E7F               	movlw	127
  7455  00070C  6E22               	movwf	??_printf& (0+255),c
  7456  00070E  0101               	movlb	1	; () banked
  7457  000710  5110               	movf	printf@width& (0+255),w,b
  7458  000712  0101               	movlb	1	; () banked
  7459  000714  5D0F               	subwf	printf@prec& (0+255),w,b
  7460  000716  0101               	movlb	1	; () banked
  7461  000718  5111               	movf	(printf@width+1)& (0+255),w,b
  7462  00071A  0A80               	xorlw	128
  7463  00071C  5822               	subwfb	??_printf& (0+255),w,c
  7464  00071E  B0D8               	btfsc	status,0,c
  7465  000720  D00B               	goto	l4625
  7466                           
  7467                           ; BSR set to: 1
  7468                           ;doprnt.c: 1350: width -= prec;
  7469  000722  0101               	movlb	1	; () banked
  7470  000724  510F               	movf	printf@prec& (0+255),w,b
  7471  000726  0101               	movlb	1	; () banked
  7472  000728  5F10               	subwf	printf@width& (0+255),f,b
  7473  00072A  0E00               	movlw	0
  7474  00072C  0101               	movlb	1	; () banked
  7475  00072E  BF0F               	btfsc	printf@prec& (0+255),7,b
  7476  000730  0EFF               	movlw	255
  7477  000732  0101               	movlb	1	; () banked
  7478  000734  5B11               	subwfb	(printf@width+1)& (0+255),f,b
  7479  000736  D006               	goto	l4627
  7480  000738                     l4625:
  7481                           
  7482                           ; BSR set to: 1
  7483                           ;doprnt.c: 1351: else
  7484                           ;doprnt.c: 1352: width = 0;
  7485  000738  0E00               	movlw	0
  7486  00073A  0101               	movlb	1	; () banked
  7487  00073C  6F11               	movwf	(printf@width+1)& (0+255),b
  7488  00073E  0E00               	movlw	0
  7489  000740  6F10               	movwf	printf@width& (0+255),b
  7490                           
  7491                           ; BSR set to: 1
  7492  000742  D000               	goto	l4627
  7493  000744                     l4627:
  7494                           
  7495                           ; BSR set to: 1
  7496                           ;doprnt.c: 1353: }
  7497                           ;doprnt.c: 1357: if((flag & (
  7498                           ;doprnt.c: 1359: 0x04|
  7499                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  7500  000744  0EC4               	movlw	196
  7501  000746  6E22               	movwf	??_printf& (0+255),c
  7502  000748  0E08               	movlw	8
  7503  00074A  6E23               	movwf	(??_printf+1)& (0+255),c
  7504  00074C  C113  F024         	movff	printf@flag,??_printf+2
  7505  000750  C114  F025         	movff	printf@flag+1,??_printf+3
  7506  000754  5022               	movf	??_printf,w,c
  7507  000756  1624               	andwf	??_printf+2,f,c
  7508  000758  5023               	movf	??_printf+1,w,c
  7509  00075A  1625               	andwf	??_printf+3,f,c
  7510  00075C  0E40               	movlw	64
  7511  00075E  1824               	xorwf	??_printf+2,w,c
  7512  000760  E10F               	bnz	l4633
  7513  000762  0E08               	movlw	8
  7514  000764  1825               	xorwf	??_printf+3,w,c
  7515  000766  A4D8               	btfss	status,2,c
  7516  000768  D00B               	goto	l4633
  7517                           
  7518                           ; BSR set to: 1
  7519                           ;doprnt.c: 1362: if(width)
  7520  00076A  0101               	movlb	1	; () banked
  7521  00076C  5110               	movf	printf@width& (0+255),w,b
  7522  00076E  0101               	movlb	1	; () banked
  7523  000770  1111               	iorwf	(printf@width+1)& (0+255),w,b
  7524  000772  B4D8               	btfsc	status,2,c
  7525  000774  D02F               	goto	l4641
  7526                           
  7527                           ; BSR set to: 1
  7528                           ;doprnt.c: 1363: width--;
  7529  000776  0101               	movlb	1	; () banked
  7530  000778  0710               	decf	printf@width& (0+255),f,b
  7531  00077A  A0D8               	btfss	status,0,c
  7532  00077C  0711               	decf	(printf@width+1)& (0+255),f,b
  7533                           
  7534                           ; BSR set to: 1
  7535                           ;doprnt.c: 1364: } else
  7536  00077E  D02A               	goto	l4641
  7537  000780                     l4633:
  7538                           
  7539                           ; BSR set to: 1
  7540                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  7541  000780  0EC0               	movlw	192
  7542  000782  6E22               	movwf	??_printf& (0+255),c
  7543  000784  0E08               	movlw	8
  7544  000786  6E23               	movwf	(??_printf+1)& (0+255),c
  7545  000788  C113  F024         	movff	printf@flag,??_printf+2
  7546  00078C  C114  F025         	movff	printf@flag+1,??_printf+3
  7547  000790  5022               	movf	??_printf,w,c
  7548  000792  1624               	andwf	??_printf+2,f,c
  7549  000794  5023               	movf	??_printf+1,w,c
  7550  000796  1625               	andwf	??_printf+3,f,c
  7551  000798  0E80               	movlw	128
  7552  00079A  1824               	xorwf	??_printf+2,w,c
  7553  00079C  E11B               	bnz	l4641
  7554  00079E  0E08               	movlw	8
  7555  0007A0  1825               	xorwf	??_printf+3,w,c
  7556  0007A2  A4D8               	btfss	status,2,c
  7557  0007A4  D017               	goto	l4641
  7558                           
  7559                           ; BSR set to: 1
  7560                           ;doprnt.c: 1372: if(width > 2)
  7561  0007A6  0101               	movlb	1	; () banked
  7562  0007A8  BF11               	btfsc	(printf@width+1)& (0+255),7,b
  7563  0007AA  D00E               	goto	l4639
  7564  0007AC  0101               	movlb	1	; () banked
  7565  0007AE  5111               	movf	(printf@width+1)& (0+255),w,b
  7566  0007B0  E105               	bnz	u4100
  7567  0007B2  0E03               	movlw	3
  7568  0007B4  0101               	movlb	1	; () banked
  7569  0007B6  5D10               	subwf	printf@width& (0+255),w,b
  7570  0007B8  A0D8               	btfss	status,0,c
  7571  0007BA  D006               	goto	l4639
  7572  0007BC                     u4100:
  7573                           
  7574                           ; BSR set to: 1
  7575                           ;doprnt.c: 1373: width -= 2;
  7576  0007BC  0101               	movlb	1	; () banked
  7577  0007BE  0EFE               	movlw	254
  7578  0007C0  2710               	addwf	printf@width& (0+255),f,b
  7579  0007C2  0EFF               	movlw	255
  7580  0007C4  2311               	addwfc	(printf@width+1)& (0+255),f,b
  7581  0007C6  D006               	goto	l4641
  7582  0007C8                     l4639:
  7583                           
  7584                           ; BSR set to: 1
  7585                           ;doprnt.c: 1374: else
  7586                           ;doprnt.c: 1375: width = 0;
  7587  0007C8  0E00               	movlw	0
  7588  0007CA  0101               	movlb	1	; () banked
  7589  0007CC  6F11               	movwf	(printf@width+1)& (0+255),b
  7590  0007CE  0E00               	movlw	0
  7591  0007D0  6F10               	movwf	printf@width& (0+255),b
  7592                           
  7593                           ; BSR set to: 1
  7594                           
  7595                           ; BSR set to: 1
  7596  0007D2  D000               	goto	l4641
  7597  0007D4                     l4641:
  7598                           
  7599                           ; BSR set to: 1
  7600                           ;doprnt.c: 1376: }
  7601                           ;doprnt.c: 1381: if(width > c)
  7602  0007D4  0E80               	movlw	128
  7603  0007D6  0101               	movlb	1	; () banked
  7604  0007D8  BF12               	btfsc	printf@c& (0+255),7,b
  7605  0007DA  0E7F               	movlw	127
  7606  0007DC  6E22               	movwf	??_printf& (0+255),c
  7607  0007DE  0101               	movlb	1	; () banked
  7608  0007E0  5110               	movf	printf@width& (0+255),w,b
  7609  0007E2  0101               	movlb	1	; () banked
  7610  0007E4  5D12               	subwf	printf@c& (0+255),w,b
  7611  0007E6  0101               	movlb	1	; () banked
  7612  0007E8  5111               	movf	(printf@width+1)& (0+255),w,b
  7613  0007EA  0A80               	xorlw	128
  7614  0007EC  5822               	subwfb	??_printf& (0+255),w,c
  7615  0007EE  B0D8               	btfsc	status,0,c
  7616  0007F0  D00B               	goto	l4645
  7617                           
  7618                           ; BSR set to: 1
  7619                           ;doprnt.c: 1382: width -= c;
  7620  0007F2  0101               	movlb	1	; () banked
  7621  0007F4  5112               	movf	printf@c& (0+255),w,b
  7622  0007F6  0101               	movlb	1	; () banked
  7623  0007F8  5F10               	subwf	printf@width& (0+255),f,b
  7624  0007FA  0E00               	movlw	0
  7625  0007FC  0101               	movlb	1	; () banked
  7626  0007FE  BF12               	btfsc	printf@c& (0+255),7,b
  7627  000800  0EFF               	movlw	255
  7628  000802  0101               	movlb	1	; () banked
  7629  000804  5B11               	subwfb	(printf@width+1)& (0+255),f,b
  7630  000806  D006               	goto	l4647
  7631  000808                     l4645:
  7632                           
  7633                           ; BSR set to: 1
  7634                           ;doprnt.c: 1383: else
  7635                           ;doprnt.c: 1384: width = 0;
  7636  000808  0E00               	movlw	0
  7637  00080A  0101               	movlb	1	; () banked
  7638  00080C  6F11               	movwf	(printf@width+1)& (0+255),b
  7639  00080E  0E00               	movlw	0
  7640  000810  6F10               	movwf	printf@width& (0+255),b
  7641  000812  D000               	goto	l4647
  7642  000814                     l4647:
  7643                           
  7644                           ; BSR set to: 1
  7645                           ;doprnt.c: 1387: if(flag & 0x04) {
  7646  000814  0101               	movlb	1	; () banked
  7647  000816  A513               	btfss	printf@flag& (0+255),2,b
  7648  000818  D055               	goto	l4673
  7649                           
  7650                           ; BSR set to: 1
  7651                           ;doprnt.c: 1392: if(flag & 0x03)
  7652  00081A  0E03               	movlw	3
  7653  00081C  0101               	movlb	1	; () banked
  7654  00081E  1513               	andwf	printf@flag& (0+255),w,b
  7655  000820  6E22               	movwf	??_printf& (0+255),c
  7656  000822  0E00               	movlw	0
  7657  000824  0101               	movlb	1	; () banked
  7658  000826  1514               	andwf	(printf@flag+1)& (0+255),w,b
  7659  000828  6E23               	movwf	(??_printf+1)& (0+255),c
  7660  00082A  5022               	movf	??_printf,w,c
  7661  00082C  1023               	iorwf	??_printf+1,w,c
  7662  00082E  B4D8               	btfsc	status,2,c
  7663  000830  D004               	goto	l1104
  7664                           
  7665                           ; BSR set to: 1
  7666                           ;doprnt.c: 1393: (putch('-') );
  7667  000832  0E2D               	movlw	45
  7668  000834  ECBC  F00D         	call	_putch
  7669  000838  D030               	goto	l4667
  7670  00083A                     l1104:
  7671                           
  7672                           ; BSR set to: 1
  7673                           ;doprnt.c: 1396: else
  7674                           ;doprnt.c: 1399: if(flag & 0x01)
  7675  00083A  0101               	movlb	1	; () banked
  7676  00083C  A113               	btfss	printf@flag& (0+255),0,b
  7677  00083E  D004               	goto	l4655
  7678                           
  7679                           ; BSR set to: 1
  7680                           ;doprnt.c: 1400: (putch(' ') );
  7681  000840  0E20               	movlw	32
  7682  000842  ECBC  F00D         	call	_putch
  7683  000846  D029               	goto	l4667
  7684  000848                     l4655:
  7685                           
  7686                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  7687  000848  0EC0               	movlw	192
  7688  00084A  6E22               	movwf	??_printf& (0+255),c
  7689  00084C  0E08               	movlw	8
  7690  00084E  6E23               	movwf	(??_printf+1)& (0+255),c
  7691  000850  C113  F024         	movff	printf@flag,??_printf+2
  7692  000854  C114  F025         	movff	printf@flag+1,??_printf+3
  7693  000858  5022               	movf	??_printf,w,c
  7694  00085A  1624               	andwf	??_printf+2,f,c
  7695  00085C  5023               	movf	??_printf+1,w,c
  7696  00085E  1625               	andwf	??_printf+3,f,c
  7697  000860  0E80               	movlw	128
  7698  000862  1824               	xorwf	??_printf+2,w,c
  7699  000864  E11A               	bnz	l4667
  7700  000866  0E08               	movlw	8
  7701  000868  1825               	xorwf	??_printf+3,w,c
  7702  00086A  A4D8               	btfss	status,2,c
  7703  00086C  D016               	goto	l4667
  7704                           
  7705                           ;doprnt.c: 1404: (putch('0') );
  7706  00086E  0E30               	movlw	48
  7707  000870  ECBC  F00D         	call	_putch
  7708                           
  7709                           ;doprnt.c: 1406: (putch(flag & 0x20 ? 'X' : 'x') );
  7710  000874  0101               	movlb	1	; () banked
  7711  000876  BB13               	btfsc	printf@flag& (0+255),5,b
  7712  000878  D005               	goto	l4663
  7713                           
  7714                           ; BSR set to: 1
  7715  00087A  0E00               	movlw	0
  7716  00087C  0101               	movlb	1	; () banked
  7717  00087E  6F04               	movwf	(_printf$1564+1)& (0+255),b
  7718  000880  0E78               	movlw	120
  7719  000882  D004               	goto	L6
  7720  000884                     l4663:
  7721                           
  7722                           ; BSR set to: 1
  7723  000884  0E00               	movlw	0
  7724  000886  0101               	movlb	1	; () banked
  7725  000888  6F04               	movwf	(_printf$1564+1)& (0+255),b
  7726  00088A  0E58               	movlw	88
  7727  00088C                     L6:
  7728  00088C  6F03               	movwf	_printf$1564& (0+255),b
  7729  00088E  D000               	goto	l4665
  7730  000890                     l4665:
  7731                           
  7732                           ; BSR set to: 1
  7733  000890  0101               	movlb	1	; () banked
  7734  000892  5103               	movf	_printf$1564& (0+255),w,b
  7735  000894  ECBC  F00D         	call	_putch
  7736  000898  D000               	goto	l4667
  7737  00089A                     l4667:
  7738                           
  7739                           ;doprnt.c: 1412: }
  7740                           ;doprnt.c: 1415: if(width)
  7741  00089A  0101               	movlb	1	; () banked
  7742  00089C  5110               	movf	printf@width& (0+255),w,b
  7743  00089E  0101               	movlb	1	; () banked
  7744  0008A0  1111               	iorwf	(printf@width+1)& (0+255),w,b
  7745  0008A2  B4D8               	btfsc	status,2,c
  7746  0008A4  D10C               	goto	l4723
  7747  0008A6                     l4669:
  7748                           
  7749                           ; BSR set to: 1
  7750                           ;doprnt.c: 1417: (putch('0') );
  7751  0008A6  0E30               	movlw	48
  7752  0008A8  ECBC  F00D         	call	_putch
  7753                           
  7754                           ;doprnt.c: 1418: while(--width);
  7755  0008AC  0101               	movlb	1	; () banked
  7756  0008AE  0710               	decf	printf@width& (0+255),f,b
  7757  0008B0  A0D8               	btfss	status,0,c
  7758  0008B2  0711               	decf	(printf@width+1)& (0+255),f,b
  7759  0008B4  0101               	movlb	1	; () banked
  7760  0008B6  5110               	movf	printf@width& (0+255),w,b
  7761  0008B8  0101               	movlb	1	; () banked
  7762  0008BA  1111               	iorwf	(printf@width+1)& (0+255),w,b
  7763  0008BC  B4D8               	btfsc	status,2,c
  7764  0008BE  D0FF               	goto	l4723
  7765  0008C0  D7F2               	goto	l4669
  7766                           
  7767                           ; BSR set to: 1
  7768                           ;doprnt.c: 1420: } else
  7769                           
  7770                           ; BSR set to: 1
  7771  0008C2  D0FD               	goto	l4723
  7772  0008C4                     l4673:
  7773                           
  7774                           ; BSR set to: 1
  7775                           ;doprnt.c: 1422: {
  7776                           ;doprnt.c: 1424: if(width
  7777                           ;doprnt.c: 1426: && !(flag & 0x08)
  7778                           ;doprnt.c: 1428: )
  7779  0008C4  0101               	movlb	1	; () banked
  7780  0008C6  5110               	movf	printf@width& (0+255),w,b
  7781  0008C8  0101               	movlb	1	; () banked
  7782  0008CA  1111               	iorwf	(printf@width+1)& (0+255),w,b
  7783  0008CC  B4D8               	btfsc	status,2,c
  7784  0008CE  D012               	goto	l4681
  7785                           
  7786                           ; BSR set to: 1
  7787  0008D0  0101               	movlb	1	; () banked
  7788  0008D2  B713               	btfsc	printf@flag& (0+255),3,b
  7789  0008D4  D00F               	goto	l4681
  7790  0008D6                     l4677:
  7791                           
  7792                           ; BSR set to: 1
  7793                           ;doprnt.c: 1430: (putch(' ') );
  7794  0008D6  0E20               	movlw	32
  7795  0008D8  ECBC  F00D         	call	_putch
  7796                           
  7797                           ;doprnt.c: 1431: while(--width);
  7798  0008DC  0101               	movlb	1	; () banked
  7799  0008DE  0710               	decf	printf@width& (0+255),f,b
  7800  0008E0  A0D8               	btfss	status,0,c
  7801  0008E2  0711               	decf	(printf@width+1)& (0+255),f,b
  7802  0008E4  0101               	movlb	1	; () banked
  7803  0008E6  5110               	movf	printf@width& (0+255),w,b
  7804  0008E8  0101               	movlb	1	; () banked
  7805  0008EA  1111               	iorwf	(printf@width+1)& (0+255),w,b
  7806  0008EC  B4D8               	btfsc	status,2,c
  7807  0008EE  D002               	goto	l4681
  7808  0008F0  D7F2               	goto	l4677
  7809                           
  7810                           ; BSR set to: 1
  7811  0008F2  D000               	goto	l4681
  7812  0008F4                     l4681:
  7813                           
  7814                           ; BSR set to: 1
  7815                           ;doprnt.c: 1438: if(flag & 0x03)
  7816  0008F4  0E03               	movlw	3
  7817  0008F6  0101               	movlb	1	; () banked
  7818  0008F8  1513               	andwf	printf@flag& (0+255),w,b
  7819  0008FA  6E22               	movwf	??_printf& (0+255),c
  7820  0008FC  0E00               	movlw	0
  7821  0008FE  0101               	movlb	1	; () banked
  7822  000900  1514               	andwf	(printf@flag+1)& (0+255),w,b
  7823  000902  6E23               	movwf	(??_printf+1)& (0+255),c
  7824  000904  5022               	movf	??_printf,w,c
  7825  000906  1023               	iorwf	??_printf+1,w,c
  7826  000908  B4D8               	btfsc	status,2,c
  7827  00090A  D004               	goto	l1120
  7828                           
  7829                           ; BSR set to: 1
  7830                           ;doprnt.c: 1439: (putch('-') );
  7831  00090C  0E2D               	movlw	45
  7832  00090E  ECBC  F00D         	call	_putch
  7833  000912  D007               	goto	l4687
  7834  000914                     l1120:
  7835                           
  7836                           ; BSR set to: 1
  7837                           ;doprnt.c: 1443: else if(flag & 0x01)
  7838  000914  0101               	movlb	1	; () banked
  7839  000916  A113               	btfss	printf@flag& (0+255),0,b
  7840  000918  D004               	goto	l4687
  7841                           
  7842                           ; BSR set to: 1
  7843                           ;doprnt.c: 1444: (putch(' ') );
  7844  00091A  0E20               	movlw	32
  7845  00091C  ECBC  F00D         	call	_putch
  7846  000920  D000               	goto	l4687
  7847  000922                     l4687:
  7848                           
  7849                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  7850  000922  0EC0               	movlw	192
  7851  000924  6E22               	movwf	??_printf& (0+255),c
  7852  000926  0E08               	movlw	8
  7853  000928  6E23               	movwf	(??_printf+1)& (0+255),c
  7854  00092A  C113  F024         	movff	printf@flag,??_printf+2
  7855  00092E  C114  F025         	movff	printf@flag+1,??_printf+3
  7856  000932  5022               	movf	??_printf,w,c
  7857  000934  1624               	andwf	??_printf+2,f,c
  7858  000936  5023               	movf	??_printf+1,w,c
  7859  000938  1625               	andwf	??_printf+3,f,c
  7860  00093A  0E40               	movlw	64
  7861  00093C  1824               	xorwf	??_printf+2,w,c
  7862  00093E  E108               	bnz	l4691
  7863  000940  0E08               	movlw	8
  7864  000942  1825               	xorwf	??_printf+3,w,c
  7865  000944  A4D8               	btfss	status,2,c
  7866  000946  D004               	goto	l4691
  7867                           
  7868                           ;doprnt.c: 1449: (putch('0') );
  7869  000948  0E30               	movlw	48
  7870  00094A  ECBC  F00D         	call	_putch
  7871  00094E  D0B7               	goto	l4723
  7872  000950                     l4691:
  7873                           
  7874                           ;doprnt.c: 1450: else
  7875                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  7876  000950  0EC0               	movlw	192
  7877  000952  6E22               	movwf	??_printf& (0+255),c
  7878  000954  0E08               	movlw	8
  7879  000956  6E23               	movwf	(??_printf+1)& (0+255),c
  7880  000958  C113  F024         	movff	printf@flag,??_printf+2
  7881  00095C  C114  F025         	movff	printf@flag+1,??_printf+3
  7882  000960  5022               	movf	??_printf,w,c
  7883  000962  1624               	andwf	??_printf+2,f,c
  7884  000964  5023               	movf	??_printf+1,w,c
  7885  000966  1625               	andwf	??_printf+3,f,c
  7886  000968  0E80               	movlw	128
  7887  00096A  1824               	xorwf	??_printf+2,w,c
  7888  00096C  E103               	bnz	u4251
  7889  00096E  0E08               	movlw	8
  7890  000970  1825               	xorwf	??_printf+3,w,c
  7891  000972  A4D8               	btfss	status,2,c
  7892  000974                     u4251:
  7893  000974  D0A4               	goto	l4723
  7894                           
  7895                           ;doprnt.c: 1458: (putch('0') );
  7896  000976  0E30               	movlw	48
  7897  000978  ECBC  F00D         	call	_putch
  7898                           
  7899                           ;doprnt.c: 1460: (putch(flag & 0x20 ? 'X' : 'x') );
  7900  00097C  0101               	movlb	1	; () banked
  7901  00097E  BB13               	btfsc	printf@flag& (0+255),5,b
  7902  000980  D005               	goto	l4699
  7903                           
  7904                           ; BSR set to: 1
  7905  000982  0E00               	movlw	0
  7906  000984  0101               	movlb	1	; () banked
  7907  000986  6F06               	movwf	(_printf$1565+1)& (0+255),b
  7908  000988  0E78               	movlw	120
  7909  00098A  D004               	goto	L7
  7910  00098C                     l4699:
  7911                           
  7912                           ; BSR set to: 1
  7913  00098C  0E00               	movlw	0
  7914  00098E  0101               	movlb	1	; () banked
  7915  000990  6F06               	movwf	(_printf$1565+1)& (0+255),b
  7916  000992  0E58               	movlw	88
  7917  000994                     L7:
  7918  000994  6F05               	movwf	_printf$1565& (0+255),b
  7919  000996  D000               	goto	l4701
  7920  000998                     l4701:
  7921                           
  7922                           ; BSR set to: 1
  7923  000998  0101               	movlb	1	; () banked
  7924  00099A  5105               	movf	_printf$1565& (0+255),w,b
  7925  00099C  ECBC  F00D         	call	_putch
  7926                           
  7927                           ;doprnt.c: 1466: }
  7928                           ;doprnt.c: 1469: }
  7929                           ;doprnt.c: 1474: while(prec--) {
  7930  0009A0  D08E               	goto	l4723
  7931                           
  7932                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
  7933  0009A2  D078               	goto	l4719
  7934                           
  7935                           ;doprnt.c: 1478: {
  7936                           ;doprnt.c: 1483: case 0x00:
  7937  0009A4  D000               	goto	l4703
  7938  0009A6                     l4703:
  7939                           
  7940                           ;doprnt.c: 1486: case 0xC0:
  7941                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7942  0009A6  0101               	movlb	1	; () banked
  7943  0009A8  510F               	movf	printf@prec& (0+255),w,b
  7944  0009AA  0D02               	mullw	2
  7945  0009AC  0ECD               	movlw	low _dpowers
  7946  0009AE  24F3               	addwf	prodl,w,c
  7947  0009B0  6EF6               	movwf	tblptrl,c
  7948  0009B2  0E1B               	movlw	high _dpowers
  7949  0009B4  20F4               	addwfc	prodh,w,c
  7950  0009B6  6EF7               	movwf	tblptrh,c
  7951  0009B8                     	if	0	;There are less than 3 active tblptr bytes
  7952  0009B8                     	endif
  7953  0009B8  0009               	tblrd		*+
  7954  0009BA  CFF5 F012          	movff	tablat,___lwdiv@divisor
  7955  0009BE  000A               	tblrd		*-
  7956  0009C0  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  7957  0009C4  C10D  F010         	movff	printf@val,___lwdiv@dividend
  7958  0009C8  C10E  F011         	movff	printf@val+1,___lwdiv@dividend+1
  7959  0009CC  ECFF  F00B         	call	___lwdiv	;wreg free
  7960  0009D0  C010  F017         	movff	?___lwdiv,___lwmod@dividend
  7961  0009D4  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
  7962  0009D8  0E00               	movlw	0
  7963  0009DA  6E1A               	movwf	___lwmod@divisor+1,c
  7964  0009DC  0E0A               	movlw	10
  7965  0009DE  6E19               	movwf	___lwmod@divisor,c
  7966  0009E0  EC59  F00C         	call	___lwmod	;wreg free
  7967  0009E4  5017               	movf	?___lwmod,w,c
  7968  0009E6  D052               	goto	L8
  7969  0009E8                     l4705:
  7970                           
  7971                           ; BSR set to: 1
  7972                           ;doprnt.c: 1499: {
  7973                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7974  0009E8  C10D  F010         	movff	printf@val,___lwdiv@dividend
  7975  0009EC  C10E  F011         	movff	printf@val+1,___lwdiv@dividend+1
  7976  0009F0  0101               	movlb	1	; () banked
  7977  0009F2  510F               	movf	printf@prec& (0+255),w,b
  7978  0009F4  0D02               	mullw	2
  7979  0009F6  0ED7               	movlw	low _hexpowers
  7980  0009F8  24F3               	addwf	prodl,w,c
  7981  0009FA  6EF6               	movwf	tblptrl,c
  7982  0009FC  0E1B               	movlw	high _hexpowers
  7983  0009FE  20F4               	addwfc	prodh,w,c
  7984  000A00  6EF7               	movwf	tblptrh,c
  7985  000A02                     	if	0	;There are less than 3 active tblptr bytes
  7986  000A02                     	endif
  7987  000A02  0009               	tblrd		*+
  7988  000A04  CFF5 F012          	movff	tablat,___lwdiv@divisor
  7989  000A08  000A               	tblrd		*-
  7990  000A0A  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  7991  000A0E  ECFF  F00B         	call	___lwdiv	;wreg free
  7992  000A12  5010               	movf	?___lwdiv,w,c
  7993  000A14  0B0F               	andlw	15
  7994  000A16  0101               	movlb	1	; () banked
  7995  000A18  6F00               	movwf	printf@idx& (0+255),b
  7996                           
  7997                           ; BSR set to: 1
  7998                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  7999  000A1A  0101               	movlb	1	; () banked
  8000  000A1C  BB13               	btfsc	printf@flag& (0+255),5,b
  8001  000A1E  D005               	goto	l4711
  8002                           
  8003                           ; BSR set to: 1
  8004  000A20  0E4E               	movlw	low STR_46
  8005  000A22  0101               	movlb	1	; () banked
  8006  000A24  6F07               	movwf	_printf$1571& (0+255),b
  8007  000A26  0E1F               	movlw	high STR_46
  8008  000A28  D004               	goto	L9
  8009  000A2A                     l4711:
  8010                           
  8011                           ; BSR set to: 1
  8012  000A2A  0E3D               	movlw	low STR_45
  8013  000A2C  0101               	movlb	1	; () banked
  8014  000A2E  6F07               	movwf	_printf$1571& (0+255),b
  8015  000A30  0E1F               	movlw	high STR_45
  8016  000A32                     L9:
  8017  000A32  0101               	movlb	1	; () banked
  8018  000A34  6F08               	movwf	(_printf$1571+1)& (0+255),b
  8019  000A36  D000               	goto	l4713
  8020  000A38                     l4713:
  8021                           
  8022                           ; BSR set to: 1
  8023  000A38  0101               	movlb	1	; () banked
  8024  000A3A  5100               	movf	printf@idx& (0+255),w,b
  8025  000A3C  0D01               	mullw	1
  8026  000A3E  C107  F022         	movff	_printf$1571,??_printf
  8027  000A42  C108  F023         	movff	_printf$1571+1,??_printf+1
  8028  000A46  50F3               	movf	prodl,w,c
  8029  000A48  2622               	addwf	??_printf,f,c
  8030  000A4A  50F4               	movf	prodh,w,c
  8031  000A4C  2223               	addwfc	??_printf+1,f,c
  8032  000A4E  C022  FFF6         	movff	??_printf,tblptrl
  8033  000A52  C023  FFF7         	movff	??_printf+1,tblptrh
  8034  000A56                     	if	0	;tblptru may be non-zero
  8035  000A56                     	endif
  8036  000A56                     	if	0	;tblptru may be non-zero
  8037  000A56                     	endif
  8038  000A56  0008               	tblrd		*
  8039  000A58  CFF5 F112          	movff	tablat,printf@c
  8040                           
  8041                           ;doprnt.c: 1508: }
  8042                           ;doprnt.c: 1510: break;
  8043  000A5C  D02B               	goto	l4721
  8044  000A5E                     l4715:
  8045                           
  8046                           ; BSR set to: 1
  8047                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  8048  000A5E  C10D  F010         	movff	printf@val,___lwdiv@dividend
  8049  000A62  C10E  F011         	movff	printf@val+1,___lwdiv@dividend+1
  8050  000A66  0101               	movlb	1	; () banked
  8051  000A68  510F               	movf	printf@prec& (0+255),w,b
  8052  000A6A  0D02               	mullw	2
  8053  000A6C  0EC1               	movlw	low _octpowers
  8054  000A6E  24F3               	addwf	prodl,w,c
  8055  000A70  6EF6               	movwf	tblptrl,c
  8056  000A72  0E1B               	movlw	high _octpowers
  8057  000A74  20F4               	addwfc	prodh,w,c
  8058  000A76  6EF7               	movwf	tblptrh,c
  8059  000A78                     	if	0	;There are less than 3 active tblptr bytes
  8060  000A78                     	endif
  8061  000A78  0009               	tblrd		*+
  8062  000A7A  CFF5 F012          	movff	tablat,___lwdiv@divisor
  8063  000A7E  000A               	tblrd		*-
  8064  000A80  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  8065  000A84  ECFF  F00B         	call	___lwdiv	;wreg free
  8066  000A88  5010               	movf	?___lwdiv,w,c
  8067  000A8A  0B07               	andlw	7
  8068  000A8C                     L8:
  8069  000A8C  0F30               	addlw	48
  8070  000A8E  0101               	movlb	1	; () banked
  8071  000A90  6F12               	movwf	printf@c& (0+255),b
  8072                           
  8073                           ; BSR set to: 1
  8074                           ;doprnt.c: 1523: }
  8075                           
  8076                           ;doprnt.c: 1520: break;
  8077  000A92  D010               	goto	l4721
  8078  000A94                     l4719:
  8079  000A94  0101               	movlb	1	; () banked
  8080  000A96  5113               	movf	printf@flag& (0+255),w,b
  8081  000A98  0BC0               	andlw	192
  8082                           
  8083                           ; Switch size 1, requested type "space"
  8084                           ; Number of cases is 4, Range of values is 0 to 192
  8085                           ; switch strategies available:
  8086                           ; Name         Instructions Cycles
  8087                           ; simple_byte           13     7 (average)
  8088                           ;	Chosen strategy is simple_byte
  8089  000A9A  0A00               	xorlw	0	; case 0
  8090  000A9C  B4D8               	btfsc	status,2,c
  8091  000A9E  D783               	goto	l4703
  8092  000AA0  0A40               	xorlw	64	; case 64
  8093  000AA2  B4D8               	btfsc	status,2,c
  8094  000AA4  D7DC               	goto	l4715
  8095  000AA6  0AC0               	xorlw	192	; case 128
  8096  000AA8  B4D8               	btfsc	status,2,c
  8097  000AAA  D79E               	goto	l4705
  8098  000AAC  0A40               	xorlw	64	; case 192
  8099  000AAE  B4D8               	btfsc	status,2,c
  8100  000AB0  D77A               	goto	l4703
  8101  000AB2  D000               	goto	l4721
  8102  000AB4                     l4721:
  8103                           
  8104                           ; BSR set to: 1
  8105                           ;doprnt.c: 1524: (putch(c) );
  8106  000AB4  0101               	movlb	1	; () banked
  8107  000AB6  5112               	movf	printf@c& (0+255),w,b
  8108  000AB8  ECBC  F00D         	call	_putch
  8109  000ABC  D000               	goto	l4723
  8110  000ABE                     l4723:
  8111  000ABE  0101               	movlb	1	; () banked
  8112  000AC0  070F               	decf	printf@prec& (0+255),f,b
  8113  000AC2  0101               	movlb	1	; () banked
  8114  000AC4  290F               	incf	printf@prec& (0+255),w,b
  8115  000AC6  A4D8               	btfss	status,2,c
  8116  000AC8  D7E5               	goto	l4719
  8117                           
  8118                           ; BSR set to: 1
  8119                           ;doprnt.c: 1525: }
  8120                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  8121  000ACA  0101               	movlb	1	; () banked
  8122  000ACC  A713               	btfss	printf@flag& (0+255),3,b
  8123  000ACE  D01B               	goto	l4731
  8124                           
  8125                           ; BSR set to: 1
  8126  000AD0  0101               	movlb	1	; () banked
  8127  000AD2  BF11               	btfsc	(printf@width+1)& (0+255),7,b
  8128  000AD4  D018               	goto	l4731
  8129  000AD6  0101               	movlb	1	; () banked
  8130  000AD8  5111               	movf	(printf@width+1)& (0+255),w,b
  8131  000ADA  E106               	bnz	l4727
  8132  000ADC  0101               	movlb	1	; () banked
  8133  000ADE  0510               	decf	printf@width& (0+255),w,b
  8134  000AE0  B0D8               	btfsc	status,0,c
  8135  000AE2  D002               	goto	l4727
  8136  000AE4  D010               	goto	l4731
  8137  000AE6  D000               	goto	l4727
  8138  000AE8                     l4727:
  8139                           
  8140                           ; BSR set to: 1
  8141                           ;doprnt.c: 1530: (putch(' ') );
  8142  000AE8  0E20               	movlw	32
  8143  000AEA  ECBC  F00D         	call	_putch
  8144                           
  8145                           ;doprnt.c: 1531: while(--width);
  8146  000AEE  0101               	movlb	1	; () banked
  8147  000AF0  0710               	decf	printf@width& (0+255),f,b
  8148  000AF2  A0D8               	btfss	status,0,c
  8149  000AF4  0711               	decf	(printf@width+1)& (0+255),f,b
  8150  000AF6  0101               	movlb	1	; () banked
  8151  000AF8  5110               	movf	printf@width& (0+255),w,b
  8152  000AFA  0101               	movlb	1	; () banked
  8153  000AFC  1111               	iorwf	(printf@width+1)& (0+255),w,b
  8154  000AFE  B4D8               	btfsc	status,2,c
  8155  000B00  D002               	goto	l4731
  8156  000B02  D7F2               	goto	l4727
  8157                           
  8158                           ; BSR set to: 1
  8159                           
  8160                           ; BSR set to: 1
  8161  000B04  D000               	goto	l4731
  8162  000B06                     l4731:
  8163  000B06  C01C  FFF6         	movff	printf@f,tblptrl
  8164  000B0A  C01D  FFF7         	movff	printf@f+1,tblptrh
  8165  000B0E  4A1C               	infsnz	printf@f,f,c
  8166  000B10  2A1D               	incf	printf@f+1,f,c
  8167  000B12                     	if	0	;tblptru may be non-zero
  8168  000B12                     	endif
  8169  000B12                     	if	0	;tblptru may be non-zero
  8170  000B12                     	endif
  8171  000B12  0008               	tblrd		*
  8172  000B14  CFF5 F112          	movff	tablat,printf@c
  8173  000B18  0101               	movlb	1	; () banked
  8174  000B1A  5112               	movf	printf@c& (0+255),w,b
  8175  000B1C  B4D8               	btfsc	status,2,c
  8176  000B1E  0012               	return	
  8177  000B20  EFEF  F000         	goto	l4425
  8178                           
  8179                           ; BSR set to: 1
  8180  000B24  0012               	return	
  8181                           
  8182                           ; BSR set to: 1
  8183                           
  8184                           ; BSR set to: 1
  8185                           ;doprnt.c: 1540: return 0;
  8186                           ;	Return value of _printf is never used
  8187                           
  8188                           ;doprnt.c: 1533: }
  8189                           ;doprnt.c: 1535: alldone:
  8190  000B26  0012               	return		;funcret
  8191  000B28                     __end_of_printf:
  8192                           	opt stack 0
  8193                           tblptru	equ	0xFF8
  8194                           tblptrh	equ	0xFF7
  8195                           tblptrl	equ	0xFF6
  8196                           tablat	equ	0xFF5
  8197                           prodh	equ	0xFF4
  8198                           prodl	equ	0xFF3
  8199                           intcon	equ	0xFF2
  8200                           intcon2	equ	0xFF1
  8201                           postinc0	equ	0xFEE
  8202                           wreg	equ	0xFE8
  8203                           indf2	equ	0xFDF
  8204                           postinc2	equ	0xFDE
  8205                           postdec2	equ	0xFDD
  8206                           fsr2h	equ	0xFDA
  8207                           fsr2l	equ	0xFD9
  8208                           status	equ	0xFD8
  8209                           
  8210 ;; *************** function _putch *****************
  8211 ;; Defined at:
  8212 ;;		line 51 in file "../usart.c"
  8213 ;; Parameters:    Size  Location     Type
  8214 ;;  tx_byte         1    wreg     unsigned char 
  8215 ;; Auto vars:     Size  Location     Type
  8216 ;;  tx_byte         1   15[COMRAM] unsigned char 
  8217 ;; Return value:  Size  Location     Type
  8218 ;;		None               void
  8219 ;; Registers used:
  8220 ;;		wreg
  8221 ;; Tracked objects:
  8222 ;;		On entry : 0/0
  8223 ;;		On exit  : 0/0
  8224 ;;		Unchanged: 0/0
  8225 ;; Data sizes:     COMRAM   BANK0   BANK1
  8226 ;;      Params:         0       0       0
  8227 ;;      Locals:         1       0       0
  8228 ;;      Temps:          0       0       0
  8229 ;;      Totals:         1       0       0
  8230 ;;Total ram usage:        1 bytes
  8231 ;; Hardware stack levels used:    1
  8232 ;; Hardware stack levels required when called:    1
  8233 ;; This function calls:
  8234 ;;		Nothing
  8235 ;; This function is called by:
  8236 ;;		_printf
  8237 ;;		_putsSW_UART
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           	psect	text29
  8242  001B78                     __ptext29:
  8243                           	opt stack 0
  8244  001B78                     _putch:
  8245                           	opt stack 27
  8246                           
  8247                           ; BSR set to: 1
  8248                           ;incstack = 0
  8249                           ;putch@tx_byte stored from wreg
  8250  001B78  6E10               	movwf	putch@tx_byte,c
  8251                           
  8252                           ;usart.c: 54: while(!TRMT1);
  8253  001B7A  D000               	goto	l967
  8254  001B7C                     l967:
  8255  001B7C  A2AC               	btfss	4012,1,c	;volatile
  8256  001B7E  D7FE               	goto	l967
  8257                           
  8258                           ;usart.c: 56: TXREG = tx_byte;
  8259  001B80  C010  FFAD         	movff	putch@tx_byte,4013	;volatile
  8260  001B84  0012               	return		;funcret
  8261  001B86                     __end_of_putch:
  8262                           	opt stack 0
  8263                           tblptru	equ	0xFF8
  8264                           tblptrh	equ	0xFF7
  8265                           tblptrl	equ	0xFF6
  8266                           tablat	equ	0xFF5
  8267                           prodh	equ	0xFF4
  8268                           prodl	equ	0xFF3
  8269                           intcon	equ	0xFF2
  8270                           intcon2	equ	0xFF1
  8271                           postinc0	equ	0xFEE
  8272                           wreg	equ	0xFE8
  8273                           indf2	equ	0xFDF
  8274                           postinc2	equ	0xFDE
  8275                           postdec2	equ	0xFDD
  8276                           fsr2h	equ	0xFDA
  8277                           fsr2l	equ	0xFD9
  8278                           status	equ	0xFD8
  8279                           
  8280 ;; *************** function _isdigit *****************
  8281 ;; Defined at:
  8282 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  8283 ;; Parameters:    Size  Location     Type
  8284 ;;  c               1    wreg     unsigned char 
  8285 ;; Auto vars:     Size  Location     Type
  8286 ;;  c               1   17[COMRAM] unsigned char 
  8287 ;; Return value:  Size  Location     Type
  8288 ;;		None               void
  8289 ;; Registers used:
  8290 ;;		wreg, status,2, status,0
  8291 ;; Tracked objects:
  8292 ;;		On entry : 0/0
  8293 ;;		On exit  : 0/0
  8294 ;;		Unchanged: 0/0
  8295 ;; Data sizes:     COMRAM   BANK0   BANK1
  8296 ;;      Params:         0       0       0
  8297 ;;      Locals:         2       0       0
  8298 ;;      Temps:          1       0       0
  8299 ;;      Totals:         3       0       0
  8300 ;;Total ram usage:        3 bytes
  8301 ;; Hardware stack levels used:    1
  8302 ;; Hardware stack levels required when called:    1
  8303 ;; This function calls:
  8304 ;;		Nothing
  8305 ;; This function is called by:
  8306 ;;		_printf
  8307 ;; This function uses a non-reentrant model
  8308 ;;
  8309                           
  8310                           	psect	text30
  8311  001AEC                     __ptext30:
  8312                           	opt stack 0
  8313  001AEC                     _isdigit:
  8314                           	opt stack 27
  8315                           
  8316                           ;incstack = 0
  8317                           ;isdigit@c stored from wreg
  8318  001AEC  6E12               	movwf	isdigit@c,c
  8319  001AEE  0E00               	movlw	0
  8320  001AF0  6E11               	movwf	_isdigit$2006,c
  8321  001AF2  0E3A               	movlw	58
  8322  001AF4  6012               	cpfslt	isdigit@c,c
  8323  001AF6  D006               	goto	l4365
  8324  001AF8  0E2F               	movlw	47
  8325  001AFA  6412               	cpfsgt	isdigit@c,c
  8326  001AFC  D003               	goto	l4365
  8327  001AFE  0E01               	movlw	1
  8328  001B00  6E11               	movwf	_isdigit$2006,c
  8329  001B02  D000               	goto	l4365
  8330  001B04                     l4365:
  8331  001B04  C011  F010         	movff	_isdigit$2006,??_isdigit
  8332  001B08  3010               	rrcf	??_isdigit,w,c
  8333  001B0A  0012               	return	
  8334  001B0C  0012               	return		;funcret
  8335  001B0E                     __end_of_isdigit:
  8336                           	opt stack 0
  8337                           tblptru	equ	0xFF8
  8338                           tblptrh	equ	0xFF7
  8339                           tblptrl	equ	0xFF6
  8340                           tablat	equ	0xFF5
  8341                           prodh	equ	0xFF4
  8342                           prodl	equ	0xFF3
  8343                           intcon	equ	0xFF2
  8344                           intcon2	equ	0xFF1
  8345                           postinc0	equ	0xFEE
  8346                           wreg	equ	0xFE8
  8347                           indf2	equ	0xFDF
  8348                           postinc2	equ	0xFDE
  8349                           postdec2	equ	0xFDD
  8350                           fsr2h	equ	0xFDA
  8351                           fsr2l	equ	0xFD9
  8352                           status	equ	0xFD8
  8353                           
  8354 ;; *************** function ___wmul *****************
  8355 ;; Defined at:
  8356 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  8357 ;; Parameters:    Size  Location     Type
  8358 ;;  multiplier      2   15[COMRAM] unsigned int 
  8359 ;;  multiplicand    2   17[COMRAM] unsigned int 
  8360 ;; Auto vars:     Size  Location     Type
  8361 ;;  product         2   19[COMRAM] unsigned int 
  8362 ;; Return value:  Size  Location     Type
  8363 ;;                  2   15[COMRAM] unsigned int 
  8364 ;; Registers used:
  8365 ;;		wreg, status,2, status,0, prodl, prodh
  8366 ;; Tracked objects:
  8367 ;;		On entry : 0/0
  8368 ;;		On exit  : 0/0
  8369 ;;		Unchanged: 0/0
  8370 ;; Data sizes:     COMRAM   BANK0   BANK1
  8371 ;;      Params:         4       0       0
  8372 ;;      Locals:         2       0       0
  8373 ;;      Temps:          0       0       0
  8374 ;;      Totals:         6       0       0
  8375 ;;Total ram usage:        6 bytes
  8376 ;; Hardware stack levels used:    1
  8377 ;; Hardware stack levels required when called:    1
  8378 ;; This function calls:
  8379 ;;		Nothing
  8380 ;; This function is called by:
  8381 ;;		_buzz_on
  8382 ;;		_eeprom_data_refresh
  8383 ;;		_printf
  8384 ;; This function uses a non-reentrant model
  8385 ;;
  8386                           
  8387                           	psect	text31
  8388  001A7E                     __ptext31:
  8389                           	opt stack 0
  8390  001A7E                     ___wmul:
  8391                           	opt stack 27
  8392                           
  8393                           ;incstack = 0
  8394  001A7E  5010               	movf	___wmul@multiplier,w,c
  8395  001A80  0212               	mulwf	___wmul@multiplicand,c
  8396  001A82  CFF3 F014          	movff	prodl,___wmul@product
  8397  001A86  CFF4 F015          	movff	prodh,___wmul@product+1
  8398  001A8A  5010               	movf	___wmul@multiplier,w,c
  8399  001A8C  0213               	mulwf	___wmul@multiplicand+1,c
  8400  001A8E  50F3               	movf	prodl,w,c
  8401  001A90  2615               	addwf	___wmul@product+1,f,c
  8402  001A92  5011               	movf	___wmul@multiplier+1,w,c
  8403  001A94  0212               	mulwf	___wmul@multiplicand,c
  8404  001A96  50F3               	movf	prodl,w,c
  8405  001A98  2615               	addwf	___wmul@product+1,f,c
  8406  001A9A  C014  F010         	movff	___wmul@product,?___wmul
  8407  001A9E  C015  F011         	movff	___wmul@product+1,?___wmul+1
  8408  001AA2  0012               	return	
  8409  001AA4  0012               	return		;funcret
  8410  001AA6                     __end_of___wmul:
  8411                           	opt stack 0
  8412                           tblptru	equ	0xFF8
  8413                           tblptrh	equ	0xFF7
  8414                           tblptrl	equ	0xFF6
  8415                           tablat	equ	0xFF5
  8416                           prodh	equ	0xFF4
  8417                           prodl	equ	0xFF3
  8418                           intcon	equ	0xFF2
  8419                           intcon2	equ	0xFF1
  8420                           postinc0	equ	0xFEE
  8421                           wreg	equ	0xFE8
  8422                           indf2	equ	0xFDF
  8423                           postinc2	equ	0xFDE
  8424                           postdec2	equ	0xFDD
  8425                           fsr2h	equ	0xFDA
  8426                           fsr2l	equ	0xFD9
  8427                           status	equ	0xFD8
  8428                           
  8429 ;; *************** function ___lwmod *****************
  8430 ;; Defined at:
  8431 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  8432 ;; Parameters:    Size  Location     Type
  8433 ;;  dividend        2   22[COMRAM] unsigned int 
  8434 ;;  divisor         2   24[COMRAM] unsigned int 
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;  counter         1   26[COMRAM] unsigned char 
  8437 ;; Return value:  Size  Location     Type
  8438 ;;                  2   22[COMRAM] unsigned int 
  8439 ;; Registers used:
  8440 ;;		wreg, status,2, status,0
  8441 ;; Tracked objects:
  8442 ;;		On entry : 0/0
  8443 ;;		On exit  : 0/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMRAM   BANK0   BANK1
  8446 ;;      Params:         4       0       0
  8447 ;;      Locals:         1       0       0
  8448 ;;      Temps:          0       0       0
  8449 ;;      Totals:         5       0       0
  8450 ;;Total ram usage:        5 bytes
  8451 ;; Hardware stack levels used:    1
  8452 ;; Hardware stack levels required when called:    1
  8453 ;; This function calls:
  8454 ;;		Nothing
  8455 ;; This function is called by:
  8456 ;;		_main
  8457 ;;		_printf
  8458 ;; This function uses a non-reentrant model
  8459 ;;
  8460                           
  8461                           	psect	text32
  8462  0018B2                     __ptext32:
  8463                           	opt stack 0
  8464  0018B2                     ___lwmod:
  8465                           	opt stack 27
  8466                           
  8467                           ;incstack = 0
  8468  0018B2  5019               	movf	___lwmod@divisor,w,c
  8469  0018B4  101A               	iorwf	___lwmod@divisor+1,w,c
  8470  0018B6  B4D8               	btfsc	status,2,c
  8471  0018B8  D01D               	goto	l1718
  8472  0018BA  0E01               	movlw	1
  8473  0018BC  6E1B               	movwf	___lwmod@counter,c
  8474  0018BE  D005               	goto	l4397
  8475  0018C0                     l4395:
  8476  0018C0  90D8               	bcf	status,0,c
  8477  0018C2  3619               	rlcf	___lwmod@divisor,f,c
  8478  0018C4  361A               	rlcf	___lwmod@divisor+1,f,c
  8479  0018C6  2A1B               	incf	___lwmod@counter,f,c
  8480  0018C8  D000               	goto	l4397
  8481  0018CA                     l4397:
  8482  0018CA  BE1A               	btfsc	___lwmod@divisor+1,7,c
  8483  0018CC  D002               	goto	l4399
  8484  0018CE  D7F8               	goto	l4395
  8485  0018D0  D000               	goto	l4399
  8486  0018D2                     l4399:
  8487  0018D2  5019               	movf	___lwmod@divisor,w,c
  8488  0018D4  5C17               	subwf	___lwmod@dividend,w,c
  8489  0018D6  501A               	movf	___lwmod@divisor+1,w,c
  8490  0018D8  5818               	subwfb	___lwmod@dividend+1,w,c
  8491  0018DA  A0D8               	btfss	status,0,c
  8492  0018DC  D005               	goto	l4403
  8493  0018DE  5019               	movf	___lwmod@divisor,w,c
  8494  0018E0  5E17               	subwf	___lwmod@dividend,f,c
  8495  0018E2  501A               	movf	___lwmod@divisor+1,w,c
  8496  0018E4  5A18               	subwfb	___lwmod@dividend+1,f,c
  8497  0018E6  D000               	goto	l4403
  8498  0018E8                     l4403:
  8499  0018E8  90D8               	bcf	status,0,c
  8500  0018EA  321A               	rrcf	___lwmod@divisor+1,f,c
  8501  0018EC  3219               	rrcf	___lwmod@divisor,f,c
  8502  0018EE  2E1B               	decfsz	___lwmod@counter,f,c
  8503  0018F0  D7F0               	goto	l4399
  8504  0018F2  D000               	goto	l1718
  8505  0018F4                     l1718:
  8506  0018F4  C017  F017         	movff	___lwmod@dividend,?___lwmod
  8507  0018F8  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
  8508  0018FC  0012               	return		;funcret
  8509  0018FE                     __end_of___lwmod:
  8510                           	opt stack 0
  8511                           tblptru	equ	0xFF8
  8512                           tblptrh	equ	0xFF7
  8513                           tblptrl	equ	0xFF6
  8514                           tablat	equ	0xFF5
  8515                           prodh	equ	0xFF4
  8516                           prodl	equ	0xFF3
  8517                           intcon	equ	0xFF2
  8518                           intcon2	equ	0xFF1
  8519                           postinc0	equ	0xFEE
  8520                           wreg	equ	0xFE8
  8521                           indf2	equ	0xFDF
  8522                           postinc2	equ	0xFDE
  8523                           postdec2	equ	0xFDD
  8524                           fsr2h	equ	0xFDA
  8525                           fsr2l	equ	0xFD9
  8526                           status	equ	0xFD8
  8527                           
  8528 ;; *************** function ___lwdiv *****************
  8529 ;; Defined at:
  8530 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  8531 ;; Parameters:    Size  Location     Type
  8532 ;;  dividend        2   15[COMRAM] unsigned int 
  8533 ;;  divisor         2   17[COMRAM] unsigned int 
  8534 ;; Auto vars:     Size  Location     Type
  8535 ;;  quotient        2   20[COMRAM] unsigned int 
  8536 ;;  counter         1   19[COMRAM] unsigned char 
  8537 ;; Return value:  Size  Location     Type
  8538 ;;                  2   15[COMRAM] unsigned int 
  8539 ;; Registers used:
  8540 ;;		wreg, status,2, status,0
  8541 ;; Tracked objects:
  8542 ;;		On entry : 0/0
  8543 ;;		On exit  : 0/0
  8544 ;;		Unchanged: 0/0
  8545 ;; Data sizes:     COMRAM   BANK0   BANK1
  8546 ;;      Params:         4       0       0
  8547 ;;      Locals:         3       0       0
  8548 ;;      Temps:          0       0       0
  8549 ;;      Totals:         7       0       0
  8550 ;;Total ram usage:        7 bytes
  8551 ;; Hardware stack levels used:    1
  8552 ;; Hardware stack levels required when called:    1
  8553 ;; This function calls:
  8554 ;;		Nothing
  8555 ;; This function is called by:
  8556 ;;		_printf
  8557 ;; This function uses a non-reentrant model
  8558 ;;
  8559                           
  8560                           	psect	text33
  8561  0017FE                     __ptext33:
  8562                           	opt stack 0
  8563  0017FE                     ___lwdiv:
  8564                           	opt stack 27
  8565                           
  8566                           ;incstack = 0
  8567  0017FE  0E00               	movlw	0
  8568  001800  6E16               	movwf	___lwdiv@quotient+1,c
  8569  001802  0E00               	movlw	0
  8570  001804  6E15               	movwf	___lwdiv@quotient,c
  8571  001806  5012               	movf	___lwdiv@divisor,w,c
  8572  001808  1013               	iorwf	___lwdiv@divisor+1,w,c
  8573  00180A  B4D8               	btfsc	status,2,c
  8574  00180C  D021               	goto	l1708
  8575  00180E  0E01               	movlw	1
  8576  001810  6E14               	movwf	___lwdiv@counter,c
  8577  001812  D005               	goto	l4377
  8578  001814                     l4375:
  8579  001814  90D8               	bcf	status,0,c
  8580  001816  3612               	rlcf	___lwdiv@divisor,f,c
  8581  001818  3613               	rlcf	___lwdiv@divisor+1,f,c
  8582  00181A  2A14               	incf	___lwdiv@counter,f,c
  8583  00181C  D000               	goto	l4377
  8584  00181E                     l4377:
  8585  00181E  BE13               	btfsc	___lwdiv@divisor+1,7,c
  8586  001820  D002               	goto	l4379
  8587  001822  D7F8               	goto	l4375
  8588  001824  D000               	goto	l4379
  8589  001826                     l4379:
  8590  001826  90D8               	bcf	status,0,c
  8591  001828  3615               	rlcf	___lwdiv@quotient,f,c
  8592  00182A  3616               	rlcf	___lwdiv@quotient+1,f,c
  8593  00182C  5012               	movf	___lwdiv@divisor,w,c
  8594  00182E  5C10               	subwf	___lwdiv@dividend,w,c
  8595  001830  5013               	movf	___lwdiv@divisor+1,w,c
  8596  001832  5811               	subwfb	___lwdiv@dividend+1,w,c
  8597  001834  A0D8               	btfss	status,0,c
  8598  001836  D006               	goto	l4387
  8599  001838  5012               	movf	___lwdiv@divisor,w,c
  8600  00183A  5E10               	subwf	___lwdiv@dividend,f,c
  8601  00183C  5013               	movf	___lwdiv@divisor+1,w,c
  8602  00183E  5A11               	subwfb	___lwdiv@dividend+1,f,c
  8603  001840  8015               	bsf	___lwdiv@quotient,0,c
  8604  001842  D000               	goto	l4387
  8605  001844                     l4387:
  8606  001844  90D8               	bcf	status,0,c
  8607  001846  3213               	rrcf	___lwdiv@divisor+1,f,c
  8608  001848  3212               	rrcf	___lwdiv@divisor,f,c
  8609  00184A  2E14               	decfsz	___lwdiv@counter,f,c
  8610  00184C  D7EC               	goto	l4379
  8611  00184E  D000               	goto	l1708
  8612  001850                     l1708:
  8613  001850  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  8614  001854  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8615  001858  0012               	return		;funcret
  8616  00185A                     __end_of___lwdiv:
  8617                           	opt stack 0
  8618                           tblptru	equ	0xFF8
  8619                           tblptrh	equ	0xFF7
  8620                           tblptrl	equ	0xFF6
  8621                           tablat	equ	0xFF5
  8622                           prodh	equ	0xFF4
  8623                           prodl	equ	0xFF3
  8624                           intcon	equ	0xFF2
  8625                           intcon2	equ	0xFF1
  8626                           postinc0	equ	0xFEE
  8627                           wreg	equ	0xFE8
  8628                           indf2	equ	0xFDF
  8629                           postinc2	equ	0xFDE
  8630                           postdec2	equ	0xFDD
  8631                           fsr2h	equ	0xFDA
  8632                           fsr2l	equ	0xFD9
  8633                           status	equ	0xFD8
  8634                           
  8635 ;; *************** function _ISR *****************
  8636 ;; Defined at:
  8637 ;;		line 12 in file "../ISR.c"
  8638 ;; Parameters:    Size  Location     Type
  8639 ;;		None
  8640 ;; Auto vars:     Size  Location     Type
  8641 ;;		None
  8642 ;; Return value:  Size  Location     Type
  8643 ;;		None               void
  8644 ;; Registers used:
  8645 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8646 ;; Tracked objects:
  8647 ;;		On entry : 0/0
  8648 ;;		On exit  : 0/0
  8649 ;;		Unchanged: 0/0
  8650 ;; Data sizes:     COMRAM   BANK0   BANK1
  8651 ;;      Params:         0       0       0
  8652 ;;      Locals:         0       0       0
  8653 ;;      Temps:         15       0       0
  8654 ;;      Totals:        15       0       0
  8655 ;;Total ram usage:       15 bytes
  8656 ;; Hardware stack levels used:    1
  8657 ;; This function calls:
  8658 ;;		Nothing
  8659 ;; This function is called by:
  8660 ;;		Interrupt level 2
  8661 ;; This function uses a non-reentrant model
  8662 ;;
  8663                           
  8664                           	psect	intcode
  8665  000008                     __pintcode:
  8666                           	opt stack 0
  8667  000008                     _ISR:
  8668                           	opt stack 25
  8669                           
  8670                           ;incstack = 0
  8671  000008  CFFA F002          	movff	pclath,??_ISR+1
  8672  00000C  CFFB F003          	movff	pclatu,??_ISR+2
  8673  000010  CFE9 F004          	movff	fsr0l,??_ISR+3
  8674  000014  CFEA F005          	movff	fsr0h,??_ISR+4
  8675  000018  CFE1 F006          	movff	fsr1l,??_ISR+5
  8676  00001C  CFE2 F007          	movff	fsr1h,??_ISR+6
  8677  000020  CFD9 F008          	movff	fsr2l,??_ISR+7
  8678  000024  CFDA F009          	movff	fsr2h,??_ISR+8
  8679  000028  CFF3 F00A          	movff	prodl,??_ISR+9
  8680  00002C  CFF4 F00B          	movff	prodh,??_ISR+10
  8681  000030  CFF6 F00C          	movff	tblptrl,??_ISR+11
  8682  000034  CFF7 F00D          	movff	tblptrh,??_ISR+12
  8683  000038  CFF8 F00E          	movff	tblptru,??_ISR+13
  8684  00003C  CFF5 F00F          	movff	tablat,??_ISR+14
  8685  000040  0004               	clrwdt		;# 
  8686                           
  8687                           ;ISR.c: 19: if ( TMR1IF && TMR1IE )
  8688  000042  B09E               	btfsc	3998,0,c	;volatile
  8689  000044  A09D               	btfss	3997,0,c	;volatile
  8690  000046  D043               	goto	i2l4099
  8691                           
  8692                           ;ISR.c: 20: {
  8693                           ;ISR.c: 21: TMR1IF = 0;
  8694  000048  909E               	bcf	3998,0,c	;volatile
  8695                           
  8696                           ;ISR.c: 22: TMR1H = 0xEC;
  8697  00004A  0EEC               	movlw	236
  8698  00004C  6ECF               	movwf	4047,c	;volatile
  8699                           
  8700                           ;ISR.c: 23: TMR1L = 0x77;
  8701  00004E  0E77               	movlw	119
  8702  000050  6ECE               	movwf	4046,c	;volatile
  8703                           
  8704                           ;ISR.c: 26: stat.msec5 = 1;
  8705  000052  8033               	bsf	_stat,0,c
  8706                           
  8707                           ;ISR.c: 27: Count_10m++;
  8708  000054  2A3A               	incf	_Count_10m,f,c
  8709                           
  8710                           ;ISR.c: 28: if ( Count_10m > 1 )
  8711  000056  0E01               	movlw	1
  8712  000058  643A               	cpfsgt	_Count_10m,c
  8713  00005A  D039               	goto	i2l4099
  8714                           
  8715                           ;ISR.c: 29: {
  8716                           ;ISR.c: 30: stat.msec10 = 1;
  8717  00005C  8233               	bsf	_stat,1,c
  8718                           
  8719                           ;ISR.c: 31: Count_10m = 0;
  8720  00005E  0E00               	movlw	0
  8721  000060  6E3A               	movwf	_Count_10m,c
  8722                           
  8723                           ;ISR.c: 35: Count_100m++;
  8724  000062  2A38               	incf	_Count_100m,f,c
  8725                           
  8726                           ;ISR.c: 36: if ( Count_100m >= 10 )
  8727  000064  0E09               	movlw	9
  8728  000066  6438               	cpfsgt	_Count_100m,c
  8729  000068  D032               	goto	i2l4099
  8730                           
  8731                           ;ISR.c: 37: {
  8732                           ;ISR.c: 40: Count_100m = 0;
  8733  00006A  0E00               	movlw	0
  8734  00006C  6E38               	movwf	_Count_100m,c
  8735                           
  8736                           ;ISR.c: 41: stat.msec100 = 1;
  8737  00006E  8433               	bsf	_stat,2,c
  8738                           
  8739                           ;ISR.c: 42: msec100buzz=1;
  8740  000070  0E01               	movlw	1
  8741  000072  0100               	movlb	0	; () banked
  8742  000074  6FE2               	movwf	_msec100buzz& (0+255),b
  8743                           
  8744                           ; BSR set to: 0
  8745                           ;ISR.c: 44: Count_500m++;
  8746  000076  2A3E               	incf	_Count_500m,f,c
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;ISR.c: 45: if ( Count_500m >= 5 )
  8750  000078  0E04               	movlw	4
  8751  00007A  643E               	cpfsgt	_Count_500m,c
  8752  00007C  D004               	goto	i2l4061
  8753                           
  8754                           ; BSR set to: 0
  8755                           ;ISR.c: 46: {
  8756                           ;ISR.c: 47: stat.msec500 = 1;
  8757  00007E  8633               	bsf	_stat,3,c
  8758                           
  8759                           ; BSR set to: 0
  8760                           ;ISR.c: 48: Count_500m = 0;
  8761  000080  0E00               	movlw	0
  8762  000082  6E3E               	movwf	_Count_500m,c
  8763  000084  D000               	goto	i2l4061
  8764  000086                     i2l4061:
  8765                           
  8766                           ; BSR set to: 0
  8767                           ;ISR.c: 49: }
  8768                           ;ISR.c: 51: Count_1000m++;
  8769  000086  2A37               	incf	_Count_1000m,f,c
  8770                           
  8771                           ; BSR set to: 0
  8772                           ;ISR.c: 52: if ( Count_1000m >= 10 )
  8773  000088  0E09               	movlw	9
  8774  00008A  6437               	cpfsgt	_Count_1000m,c
  8775  00008C  D020               	goto	i2l4099
  8776                           
  8777                           ; BSR set to: 0
  8778                           ;ISR.c: 53: {
  8779                           ;ISR.c: 54: stat.msec1000 = 1;
  8780  00008E  8833               	bsf	_stat,4,c
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;ISR.c: 55: Count_1000m = 0;
  8784  000090  0E00               	movlw	0
  8785  000092  6E37               	movwf	_Count_1000m,c
  8786                           
  8787                           ; BSR set to: 0
  8788                           ;ISR.c: 58: Count_10Sec++;
  8789  000094  2A39               	incf	_Count_10Sec,f,c
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;ISR.c: 59: if ( Count_10Sec >= 10 )
  8793  000096  0E09               	movlw	9
  8794  000098  6439               	cpfsgt	_Count_10Sec,c
  8795  00009A  D004               	goto	i2l4077
  8796                           
  8797                           ; BSR set to: 0
  8798                           ;ISR.c: 60: {
  8799                           ;ISR.c: 61: Count_10Sec = 0;
  8800  00009C  0E00               	movlw	0
  8801  00009E  6E39               	movwf	_Count_10Sec,c
  8802                           
  8803                           ; BSR set to: 0
  8804                           ;ISR.c: 62: stat.sec10 = 1;
  8805  0000A0  8A33               	bsf	_stat,5,c
  8806  0000A2  D000               	goto	i2l4077
  8807  0000A4                     i2l4077:
  8808                           
  8809                           ; BSR set to: 0
  8810                           ;ISR.c: 63: }
  8811                           ;ISR.c: 69: if ( Count_1min >= 60 )
  8812  0000A4  0E3B               	movlw	59
  8813  0000A6  643D               	cpfsgt	_Count_1min,c
  8814  0000A8  D012               	goto	i2l4099
  8815                           
  8816                           ; BSR set to: 0
  8817                           ;ISR.c: 70: {
  8818                           ;ISR.c: 71: stat.min1 = 1;
  8819  0000AA  8C33               	bsf	_stat,6,c
  8820                           
  8821                           ; BSR set to: 0
  8822                           ;ISR.c: 72: Count_1min = 0;
  8823  0000AC  0E00               	movlw	0
  8824  0000AE  6E3D               	movwf	_Count_1min,c
  8825                           
  8826                           ; BSR set to: 0
  8827                           ;ISR.c: 74: Count_10min++;
  8828  0000B0  2A3B               	incf	_Count_10min,f,c
  8829                           
  8830                           ; BSR set to: 0
  8831                           ;ISR.c: 75: if ( Count_10min >= 10 )
  8832  0000B2  0E09               	movlw	9
  8833  0000B4  643B               	cpfsgt	_Count_10min,c
  8834  0000B6  D00B               	goto	i2l4099
  8835                           
  8836                           ; BSR set to: 0
  8837                           ;ISR.c: 76: {
  8838                           ;ISR.c: 77: stat.min10 = 1;
  8839  0000B8  8E33               	bsf	_stat,7,c
  8840                           
  8841                           ; BSR set to: 0
  8842                           ;ISR.c: 78: Count_10min = 0;
  8843  0000BA  0E00               	movlw	0
  8844  0000BC  6E3B               	movwf	_Count_10min,c
  8845                           
  8846                           ; BSR set to: 0
  8847                           ;ISR.c: 80: Count_1hour++;
  8848  0000BE  2A3C               	incf	_Count_1hour,f,c
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;ISR.c: 81: if ( Count_1hour >= 6 )
  8852  0000C0  0E05               	movlw	5
  8853  0000C2  643C               	cpfsgt	_Count_1hour,c
  8854  0000C4  D004               	goto	i2l4099
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;ISR.c: 82: {
  8858                           ;ISR.c: 83: stat.hour1 = 1;
  8859  0000C6  8034               	bsf	_stat+1,0,c
  8860                           
  8861                           ; BSR set to: 0
  8862                           ;ISR.c: 84: Count_1hour = 0;
  8863  0000C8  0E00               	movlw	0
  8864  0000CA  6E3C               	movwf	_Count_1hour,c
  8865                           
  8866                           ; BSR set to: 0
  8867                           
  8868                           ; BSR set to: 0
  8869                           
  8870                           ; BSR set to: 0
  8871                           
  8872                           ; BSR set to: 0
  8873                           
  8874                           ; BSR set to: 0
  8875                           
  8876                           ; BSR set to: 0
  8877  0000CC  D000               	goto	i2l4099
  8878  0000CE                     i2l4099:
  8879                           
  8880                           ;ISR.c: 85: }
  8881                           ;ISR.c: 86: }
  8882                           ;ISR.c: 87: }
  8883                           ;ISR.c: 88: }
  8884                           ;ISR.c: 89: }
  8885                           ;ISR.c: 90: }
  8886                           ;ISR.c: 91: }
  8887                           ;ISR.c: 94: if ( RC1IF && RC1IE )
  8888  0000CE  BA9E               	btfsc	3998,5,c	;volatile
  8889  0000D0  AA9D               	btfss	3997,5,c	;volatile
  8890  0000D2  D05A               	goto	i2l4137
  8891                           
  8892                           ;ISR.c: 95: {
  8893                           ;ISR.c: 96: if ( OERR1 || FERR1 )
  8894  0000D4  B2AB               	btfsc	4011,1,c	;volatile
  8895  0000D6  D002               	goto	i2l141
  8896  0000D8  A4AB               	btfss	4011,2,c	;volatile
  8897  0000DA  D00A               	goto	i2l4109
  8898  0000DC                     i2l141:
  8899                           
  8900                           ;ISR.c: 97: {
  8901                           ;ISR.c: 98: dummy = RCREG;
  8902  0000DC  CFAE F0DA          	movff	4014,_dummy	;volatile
  8903                           
  8904                           ;ISR.c: 99: SPEN1 = 0;
  8905  0000E0  9EAB               	bcf	4011,7,c	;volatile
  8906                           
  8907                           ;ISR.c: 100: CREN1 = 0;
  8908  0000E2  98AB               	bcf	4011,4,c	;volatile
  8909                           
  8910                           ;ISR.c: 101: __nop();
  8911  0000E4  F000               	nop	
  8912                           
  8913                           ;ISR.c: 102: __nop();
  8914  0000E6  F000               	nop	
  8915                           
  8916                           ;ISR.c: 103: __nop();
  8917  0000E8  F000               	nop	
  8918                           
  8919                           ;ISR.c: 104: SPEN1 = 1;
  8920  0000EA  8EAB               	bsf	4011,7,c	;volatile
  8921                           
  8922                           ;ISR.c: 105: CREN1 = 1;
  8923  0000EC  88AB               	bsf	4011,4,c	;volatile
  8924  0000EE  D047               	goto	i2l4133
  8925  0000F0                     i2l4109:
  8926                           
  8927                           ;ISR.c: 108: else
  8928                           ;ISR.c: 109: {
  8929                           ;ISR.c: 110: rx_timeout = 20;
  8930  0000F0  0E14               	movlw	20
  8931  0000F2  0100               	movlb	0	; () banked
  8932  0000F4  6FE6               	movwf	_rx_timeout& (0+255),b
  8933                           
  8934                           ; BSR set to: 0
  8935                           ;ISR.c: 112: rx_buufer[rx_pointer] = RCREG1;
  8936  0000F6  5046               	movf	_rx_pointer,w,c
  8937  0000F8  0D01               	mullw	1
  8938  0000FA  0E60               	movlw	low _rx_buufer
  8939  0000FC  24F3               	addwf	prodl,w,c
  8940  0000FE  6ED9               	movwf	fsr2l,c
  8941  000100  0E00               	movlw	high _rx_buufer
  8942  000102  20F4               	addwfc	prodh,w,c
  8943  000104  6EDA               	movwf	fsr2h,c
  8944  000106  CFAE FFDF          	movff	4014,indf2	;volatile
  8945                           
  8946                           ; BSR set to: 0
  8947                           ;ISR.c: 114: if ( rx_buufer[rx_pointer] == 0xFF )
  8948  00010A  5046               	movf	_rx_pointer,w,c
  8949  00010C  0D01               	mullw	1
  8950  00010E  0E60               	movlw	low _rx_buufer
  8951  000110  24F3               	addwf	prodl,w,c
  8952  000112  6ED9               	movwf	fsr2l,c
  8953  000114  0E00               	movlw	high _rx_buufer
  8954  000116  20F4               	addwfc	prodh,w,c
  8955  000118  6EDA               	movwf	fsr2h,c
  8956  00011A  28DE               	incf	postinc2,w,c
  8957  00011C  A4D8               	btfss	status,2,c
  8958  00011E  D02A               	goto	i2l4129
  8959                           
  8960                           ; BSR set to: 0
  8961                           ;ISR.c: 115: {
  8962                           ;ISR.c: 116: number_of_recived_bytes = rx_pointer;
  8963  000120  C046  F044         	movff	_rx_pointer,_number_of_recived_bytes
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;ISR.c: 118: for ( rx_pointer = 0; rx_pointer <= number_of_recived_bytes; rx_pointer++ )
  8967  000124  0E00               	movlw	0
  8968  000126  6E46               	movwf	_rx_pointer,c
  8969  000128  D01E               	goto	i2l4125
  8970  00012A                     i2l4119:
  8971                           
  8972                           ;ISR.c: 119: {
  8973                           ;ISR.c: 120: data_buff[rx_pointer] = rx_buufer[rx_pointer];
  8974  00012A  5046               	movf	_rx_pointer,w,c
  8975  00012C  0D01               	mullw	1
  8976  00012E  0E60               	movlw	low _rx_buufer
  8977  000130  24F3               	addwf	prodl,w,c
  8978  000132  6ED9               	movwf	fsr2l,c
  8979  000134  0E00               	movlw	high _rx_buufer
  8980  000136  20F4               	addwfc	prodh,w,c
  8981  000138  6EDA               	movwf	fsr2h,c
  8982  00013A  5046               	movf	_rx_pointer,w,c
  8983  00013C  0D01               	mullw	1
  8984  00013E  0E15               	movlw	low _data_buff
  8985  000140  24F3               	addwf	prodl,w,c
  8986  000142  6EE1               	movwf	fsr1l,c
  8987  000144  0E01               	movlw	high _data_buff
  8988  000146  20F4               	addwfc	prodh,w,c
  8989  000148  6EE2               	movwf	fsr1h,c
  8990  00014A  CFDF FFE7          	movff	indf2,indf1
  8991                           
  8992                           ;ISR.c: 121: rx_buufer[rx_pointer] = 0;
  8993  00014E  5046               	movf	_rx_pointer,w,c
  8994  000150  0D01               	mullw	1
  8995  000152  0E60               	movlw	low _rx_buufer
  8996  000154  24F3               	addwf	prodl,w,c
  8997  000156  6ED9               	movwf	fsr2l,c
  8998  000158  0E00               	movlw	high _rx_buufer
  8999  00015A  20F4               	addwfc	prodh,w,c
  9000  00015C  6EDA               	movwf	fsr2h,c
  9001  00015E  0E00               	movlw	0
  9002  000160  6EDF               	movwf	indf2,c
  9003  000162  2A46               	incf	_rx_pointer,f,c
  9004  000164  D000               	goto	i2l4125
  9005  000166                     i2l4125:
  9006  000166  5046               	movf	_rx_pointer,w,c
  9007  000168  5C44               	subwf	_number_of_recived_bytes,w,c
  9008  00016A  B0D8               	btfsc	status,0,c
  9009  00016C  D7DE               	goto	i2l4119
  9010                           
  9011                           ;ISR.c: 122: }
  9012                           ;ISR.c: 123: rx_pointer = 0;
  9013  00016E  0E00               	movlw	0
  9014  000170  6E46               	movwf	_rx_pointer,c
  9015                           
  9016                           ;ISR.c: 124: }
  9017  000172  D002               	goto	i2l4131
  9018  000174                     i2l4129:
  9019                           
  9020                           ;ISR.c: 125: else
  9021                           ;ISR.c: 126: rx_pointer++;
  9022  000174  2A46               	incf	_rx_pointer,f,c
  9023  000176  D000               	goto	i2l4131
  9024  000178                     i2l4131:
  9025                           
  9026                           ;ISR.c: 129: if ( rx_pointer > 20 - 1 )
  9027  000178  0E13               	movlw	19
  9028  00017A  6446               	cpfsgt	_rx_pointer,c
  9029  00017C  D003               	goto	i2l4135
  9030  00017E                     i2l4133:
  9031                           
  9032                           ;ISR.c: 130: {
  9033                           ;ISR.c: 131: rx_pointer = 0;
  9034  00017E  0E00               	movlw	0
  9035  000180  6E46               	movwf	_rx_pointer,c
  9036  000182  D000               	goto	i2l4135
  9037  000184                     i2l4135:
  9038                           
  9039                           ;ISR.c: 132: }
  9040                           ;ISR.c: 133: }
  9041                           ;ISR.c: 134: RC1IF = 0;
  9042  000184  9A9E               	bcf	3998,5,c	;volatile
  9043  000186  D000               	goto	i2l4137
  9044  000188                     i2l4137:
  9045                           
  9046                           ;ISR.c: 135: }
  9047                           ;ISR.c: 214: if ( INT1F )
  9048  000188  A0F0               	btfss	intcon3,0,c	;volatile
  9049  00018A  D002               	goto	i2l150
  9050                           
  9051                           ;ISR.c: 215: {
  9052                           ;ISR.c: 216: INT1F = 0;
  9053  00018C  90F0               	bcf	intcon3,0,c	;volatile
  9054  00018E  D000               	goto	i2l150
  9055  000190                     i2l150:
  9056  000190  C00F  FFF5         	movff	??_ISR+14,tablat
  9057  000194  C00E  FFF8         	movff	??_ISR+13,tblptru
  9058  000198  C00D  FFF7         	movff	??_ISR+12,tblptrh
  9059  00019C  C00C  FFF6         	movff	??_ISR+11,tblptrl
  9060  0001A0  C00B  FFF4         	movff	??_ISR+10,prodh
  9061  0001A4  C00A  FFF3         	movff	??_ISR+9,prodl
  9062  0001A8  C009  FFDA         	movff	??_ISR+8,fsr2h
  9063  0001AC  C008  FFD9         	movff	??_ISR+7,fsr2l
  9064  0001B0  C007  FFE2         	movff	??_ISR+6,fsr1h
  9065  0001B4  C006  FFE1         	movff	??_ISR+5,fsr1l
  9066  0001B8  C005  FFEA         	movff	??_ISR+4,fsr0h
  9067  0001BC  C004  FFE9         	movff	??_ISR+3,fsr0l
  9068  0001C0  C003  FFFB         	movff	??_ISR+2,pclatu
  9069  0001C4  C002  FFFA         	movff	??_ISR+1,pclath
  9070  0001C8  0011               	retfie		f
  9071  0001CA                     __end_of_ISR:
  9072                           	opt stack 0
  9073                           pclatu	equ	0xFFB
  9074                           pclath	equ	0xFFA
  9075                           tblptru	equ	0xFF8
  9076                           tblptrh	equ	0xFF7
  9077                           tblptrl	equ	0xFF6
  9078                           tablat	equ	0xFF5
  9079                           prodh	equ	0xFF4
  9080                           prodl	equ	0xFF3
  9081                           intcon	equ	0xFF2
  9082                           intcon2	equ	0xFF1
  9083                           intcon3	equ	0xFF0
  9084                           postinc0	equ	0xFEE
  9085                           fsr0h	equ	0xFEA
  9086                           fsr0l	equ	0xFE9
  9087                           wreg	equ	0xFE8
  9088                           indf1	equ	0xFE7
  9089                           fsr1h	equ	0xFE2
  9090                           fsr1l	equ	0xFE1
  9091                           indf2	equ	0xFDF
  9092                           postinc2	equ	0xFDE
  9093                           postdec2	equ	0xFDD
  9094                           fsr2h	equ	0xFDA
  9095                           fsr2l	equ	0xFD9
  9096                           status	equ	0xFD8
  9097                           pclatu	equ	0xFFB
  9098                           pclath	equ	0xFFA
  9099                           tblptru	equ	0xFF8
  9100                           tblptrh	equ	0xFF7
  9101                           tblptrl	equ	0xFF6
  9102                           tablat	equ	0xFF5
  9103                           prodh	equ	0xFF4
  9104                           prodl	equ	0xFF3
  9105                           intcon	equ	0xFF2
  9106                           intcon2	equ	0xFF1
  9107                           intcon3	equ	0xFF0
  9108                           postinc0	equ	0xFEE
  9109                           fsr0h	equ	0xFEA
  9110                           fsr0l	equ	0xFE9
  9111                           wreg	equ	0xFE8
  9112                           indf1	equ	0xFE7
  9113                           fsr1h	equ	0xFE2
  9114                           fsr1l	equ	0xFE1
  9115                           indf2	equ	0xFDF
  9116                           postinc2	equ	0xFDE
  9117                           postdec2	equ	0xFDD
  9118                           fsr2h	equ	0xFDA
  9119                           fsr2l	equ	0xFD9
  9120                           status	equ	0xFD8
  9121                           
  9122                           	psect	rparam
  9123  0000                     pclatu	equ	0xFFB
  9124                           pclath	equ	0xFFA
  9125                           tblptru	equ	0xFF8
  9126                           tblptrh	equ	0xFF7
  9127                           tblptrl	equ	0xFF6
  9128                           tablat	equ	0xFF5
  9129                           prodh	equ	0xFF4
  9130                           prodl	equ	0xFF3
  9131                           intcon	equ	0xFF2
  9132                           intcon2	equ	0xFF1
  9133                           intcon3	equ	0xFF0
  9134                           postinc0	equ	0xFEE
  9135                           fsr0h	equ	0xFEA
  9136                           fsr0l	equ	0xFE9
  9137                           wreg	equ	0xFE8
  9138                           indf1	equ	0xFE7
  9139                           fsr1h	equ	0xFE2
  9140                           fsr1l	equ	0xFE1
  9141                           indf2	equ	0xFDF
  9142                           postinc2	equ	0xFDE
  9143                           postdec2	equ	0xFDD
  9144                           fsr2h	equ	0xFDA
  9145                           fsr2l	equ	0xFD9
  9146                           status	equ	0xFD8


Data Sizes:
    Strings     1056
    Constant    30
    Data        0
    BSS         192
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     40      74
    BANK0           160      0     145
    BANK1           256     21      41

Pointer List with Targets:

    printf$1571	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_46(CODE[17]), STR_45(CODE[17]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 58
		 -> STR_44(CODE[13]), STR_43(CODE[19]), STR_42(CODE[35]), STR_41(CODE[29]), 
		 -> STR_40(CODE[40]), STR_39(CODE[22]), STR_38(CODE[30]), STR_37(CODE[32]), 
		 -> STR_36(CODE[37]), STR_35(CODE[24]), STR_34(CODE[15]), STR_33(CODE[29]), 
		 -> STR_32(CODE[10]), STR_31(CODE[28]), STR_30(CODE[34]), STR_29(CODE[16]), 
		 -> STR_28(CODE[23]), STR_27(CODE[22]), STR_26(CODE[25]), STR_25(CODE[22]), 
		 -> STR_24(CODE[16]), STR_23(CODE[17]), STR_22(CODE[15]), STR_21(CODE[21]), 
		 -> STR_20(CODE[22]), STR_19(CODE[37]), STR_18(CODE[16]), STR_17(CODE[21]), 
		 -> STR_16(CODE[15]), STR_15(CODE[58]), STR_14(CODE[19]), STR_13(CODE[31]), 
		 -> STR_12(CODE[22]), STR_11(CODE[24]), STR_10(CODE[13]), STR_9(CODE[22]), 
		 -> STR_8(CODE[8]), STR_7(CODE[22]), STR_6(CODE[16]), STR_5(CODE[33]), 
		 -> STR_4(CODE[28]), STR_3(CODE[27]), STR_2(CODE[27]), STR_1(CODE[19]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_error_stat_hendler
    _main->_stby_stat_hendler
    _main->_work_stat_hendler
    _work_stat_hendler->_printf
    _vbat_check->_printf
    _test_stat_hendler->_printf
    _stby_stat_hendler->_printf
    _sleep_stat_hendler->_printf
    _blink_GREEN_LED_and_RED_LED_and_BUZZER->_activate_buzzer
    _short_test_stat_hendler->_printf
    _output_hendler->_activate_buzzer
    _long_test_stat_hendler->_printf
    _eeprom_time_delay->_load_int_from_eeprom
    _save_int_to_eeprom->_Write_b_eep
    _error_stat_hendler->_printf
    _blink_RED_LED->_DelayMs
    _activate_buzzer->_buzz_on
    _buzz_on->___wmul
    _eeprom_data_refresh->_load_int_from_eeprom
    _load_int_from_eeprom->_Read_b_eep
    _display_voltage->_printf
    _Charging_handler->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printf
    _work_stat_hendler->_printf
    _vbat_check->_printf
    _test_stat_hendler->_printf
    _stby_stat_hendler->_printf
    _sleep_stat_hendler->_printf
    _short_test_stat_hendler->_printf
    _long_test_stat_hendler->_printf
    _error_stat_hendler->_printf
    _display_voltage->_printf
    _Charging_handler->_printf

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  120818
                                             39 COMRAM     1     1      0
                   _Charging_handler
                            _DelayMs
                            ___lwmod
_blink_GREEN_LED_and_RED_LED_and_BUZ
                    _display_voltage
                _eeprom_data_refresh
                 _error_stat_hendler
                         _init_USART
                        _init_system
               _load_int_from_eeprom
             _long_test_stat_hendler
                     _output_hendler
                             _printf
                            _readA2D
                 _save_int_to_eeprom
            _short_test_stat_hendler
                 _sleep_stat_hendler
                  _stby_stat_hendler
                  _test_stat_hendler
                         _vbat_check
                  _work_stat_hendler
 ---------------------------------------------------------------------------------
 (1) _work_stat_hendler                                    2     2      0    9523
                                             37 COMRAM     2     2      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _vbat_check                                           0     0      0    9523
                             _printf
 ---------------------------------------------------------------------------------
 (1) _test_stat_hendler                                    1     1      0    9523
                                             37 COMRAM     1     1      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _stby_stat_hendler                                    2     2      0    9523
                                             37 COMRAM     2     2      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _sleep_stat_hendler                                   0     0      0   12243
                            _DelayMs
_blink_GREEN_LED_and_RED_LED_and_BUZ
                         _init_USART
                        _init_system
                             _printf
                            _readA2D
 ---------------------------------------------------------------------------------
 (2) _readA2D                                             10     8      2     162
                                             15 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (2) _init_system                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_USART                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _blink_GREEN_LED_and_RED_LED_and_BUZZER               4     2      2    2490
                                             30 COMRAM     4     2      2
                            _DelayMs
                    _activate_buzzer
 ---------------------------------------------------------------------------------
 (1) _short_test_stat_hendler                              0     0      0   10738
                  _eeprom_time_delay
                             _printf
 ---------------------------------------------------------------------------------
 (1) _output_hendler                                       0     0      0    2061
                    _activate_buzzer
 ---------------------------------------------------------------------------------
 (1) _long_test_stat_hendler                               0     0      0   11410
                  _eeprom_time_delay
                             _printf
                 _save_int_to_eeprom
 ---------------------------------------------------------------------------------
 (2) _eeprom_time_delay                                    6     4      2    1215
                                             23 COMRAM     6     4      2
               _load_int_from_eeprom
                 _save_int_to_eeprom
 ---------------------------------------------------------------------------------
 (3) _save_int_to_eeprom                                   3     1      2     672
                                             19 COMRAM     3     1      2
                           _Busy_eep
                            _DelayMs
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (4) _Write_b_eep                                          4     1      3     324
                                             15 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (4) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _error_stat_hendler                                   2     2      0   12025
                                             37 COMRAM     2     2      0
                    _activate_buzzer
                      _blink_RED_LED
               _load_int_from_eeprom
                             _printf
 ---------------------------------------------------------------------------------
 (2) _blink_RED_LED                                        4     2      2     222
                                             18 COMRAM     4     2      2
                            _DelayMs
 ---------------------------------------------------------------------------------
 (3) _DelayMs                                              3     3      0      68
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _activate_buzzer                                      4     2      2    2061
                                             27 COMRAM     3     1      2
                           _buzz_off
                            _buzz_on
 ---------------------------------------------------------------------------------
 (4) _buzz_on                                              6     6      0    1480
                                             21 COMRAM     6     6      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _buzz_off                                             1     1      0      23
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _eeprom_data_refresh                                  0     0      0    1529
                             ___wmul
               _load_int_from_eeprom
 ---------------------------------------------------------------------------------
 (3) _load_int_from_eeprom                                 6     4      2     219
                                             17 COMRAM     6     4      2
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2     150
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _display_voltage                                      0     0      0    9523
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Charging_handler                                     0     0      0    9523
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              35    29      6    9523
                                             27 COMRAM    10     4      6
                                              0 BANK1     21    21      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1310
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     540
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     703
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 15    15      0       0
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Charging_handler
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _DelayMs
   ___lwmod
     ___lwdiv (ARG)
   _blink_GREEN_LED_and_RED_LED_and_BUZZER
     _DelayMs
     _activate_buzzer
       _buzz_off
       _buzz_on
         ___wmul
   _display_voltage
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _eeprom_data_refresh
     ___wmul
     _load_int_from_eeprom
       _Read_b_eep
   _error_stat_hendler
     _activate_buzzer
       _buzz_off
       _buzz_on
         ___wmul
     _blink_RED_LED
       _DelayMs
     _load_int_from_eeprom
       _Read_b_eep
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _init_USART
   _init_system
   _load_int_from_eeprom
     _Read_b_eep
   _long_test_stat_hendler
     _eeprom_time_delay
       _load_int_from_eeprom
         _Read_b_eep
       _save_int_to_eeprom
         _Busy_eep
         _DelayMs
         _Write_b_eep
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
     _save_int_to_eeprom
       _Busy_eep
       _DelayMs
       _Write_b_eep
   _output_hendler
     _activate_buzzer
       _buzz_off
       _buzz_on
         ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _readA2D
   _save_int_to_eeprom
     _Busy_eep
     _DelayMs
     _Write_b_eep
   _short_test_stat_hendler
     _eeprom_time_delay
       _load_int_from_eeprom
         _Read_b_eep
       _save_int_to_eeprom
         _Busy_eep
         _DelayMs
         _Write_b_eep
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _sleep_stat_hendler
     _DelayMs
     _blink_GREEN_LED_and_RED_LED_and_BUZZER
       _DelayMs
       _activate_buzzer
         _buzz_off
         _buzz_on
           ___wmul
     _init_USART
     _init_system
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
     _readA2D
   _stby_stat_hendler
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _test_stat_hendler
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _vbat_check
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _work_stat_hendler
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     15      29       5       16.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      91       4       90.6%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     28      4A       1       77.9%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     104       6        0.0%
DATA                 0      0     104       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Mar 27 10:32:01 2016

                     __end_of_error_stat_hendler 13C4                                                _a 00D6  
                                              _g 0094                                                _i 00DF  
                            ___wmul@multiplicand 0012     blink_GREEN_LED_and_RED_LED_and_BUZZER@blinks 0021  
                                   __CFG_CP0$OFF 000000                                     __CFG_CP1$OFF 000000  
                                   _sw_direction 00E8                                              l502 17D6  
                                            l174 15F0                                              l505 17E4  
                                            l513 19F4                                              l177 15F8  
                                            l169 15D0                                              l197 1ACC  
                                            l198 1AD2                                              l470 1A5C  
                                            l199 1AD8                                              l561 1418  
                                            l494 1AAE                                              l590 0F22  
                                            l588 0E56                                              l967 1B7C  
                                            _GIE 007F97                                     __CFG_CPB$OFF 000000  
                                   __CFG_CPD$OFF 000000                                              _ISR 0008  
   blink_GREEN_LED_and_RED_LED_and_BUZZER@timeMs 001F                             __size_of_Write_b_eep 003A  
                                            prod 000FF3                                              wreg 000FE8  
                            _saved_hours_counter 0031                                     __CFG_LVP$OFF 000000  
                                           ?_ISR 0001                                ??_activate_buzzer 001E  
                                           l1120 0914                                             l1104 083A  
                                           l1050 03B4                                             l1028 0250  
                                           l1152 1B88                                             l3105 1AE2  
                                           l1179 19DA                                             l3133 1AC2  
                                           l3305 1A70                                             l1708 1850  
                                           l3261 15E2                                             l1718 18F4  
                                           l5007 1110                                             l5009 111E  
                                           l3265 15EA                                             l4403 18E8  
                                           l4331 17C4                                             l5027 1174  
                                           l5019 1146                                             l3275 160C  
                                           l3259 15D6                                             l4501 0414  
                                           l4341 17EA                                             l5109 18AC  
                                           l4421 1A1A                                             l5221 0D1C  
                                           l4511 044C                                             l4503 0420  
                                           l4431 020A                                             l4351 1B22  
                                           l5039 11B4                                             l5047 11D8  
                                           l5063 1238                                             l5223 0D22  
                                           l5151 0BEC                                             l5135 0B9A  
                                           l4521 048A                                             l4433 0210  
                                           l4441 0228                                             l4425 01DE  
                                           l4345 1B12                                             l5065 1246  
                                           l5225 0D28                                             l5217 0D10  
                                           l5233 0D3A                                             l5145 0BC4  
                                           l5161 0C20                                             l4603 067C  
                                           l4531 04D6                                             l4523 04A4  
                                           l4507 042A                                             l4515 0462  
                                           l4435 0216                                             l5091 12C6  
                                           l5083 1298                                             l5075 126E  
                                           l5227 0D2E                                             l5219 0D16  
                                           l5235 0D68                                             l4365 1B04  
                                           l4701 0998                                             l4613 06D0  
                                           l4605 069C                                             l4509 0432  
                                           l4445 025C                                             l4437 021C  
                                           l4429 01F4                                             l5253 0DB4  
                                           l5229 0D34                                             l5237 0D6E  
                                           l5157 0C14                                             l5165 0C48  
                                           l4375 1814                                             l4711 0A2A  
                                           l4703 09A6                                             l4527 04BE  
                                           l4519 0482                                             l4535 04DE  
                                           l5191 0CA2                                             l5175 0C5E  
                                           l4377 181E                                             l4713 0A38  
                                           l4705 09E8                                             l4721 0AB4  
                                           l4641 07D4                                             l4633 0780  
                                           l4625 0738                                             l4609 06B6  
                                           l4561 05B0                                             l4553 058C  
                                           l4537 0526                                             l4465 0312  
                                           l4449 027C                                             l4457 02E0  
                                           l5177 0C6C                                             l4387 1844  
                                           l4379 1826                                             l4395 18C0  
                                           l4715 0A5E                                             l4723 0ABE  
                                           l4627 0744                                             l4619 06FE  
                                           l4491 03BA                                             l4483 0388  
                                           l4731 0B06                                             l5099 12EA  
                                           l5259 0DD2                                             l5187 0C94  
                                           l4397 18CA                                             l4645 0808  
                                           l4573 05F0                                             l4565 05BE  
                                           l4549 0570                                             l4477 035C  
                                           l4485 03A0                                             l4399 18D2  
                                           l4727 0AE8                                             l4719 0A94  
                                           l4663 0884                                             l4655 0848  
                                           l4647 0814                                             l4639 07C8  
                                           l4583 062E                                             l4575 05F6  
                                           l4559 05AA                                             l4487 03AA  
                                           l4479 0364                                             l4815 1658  
                                           l4743 154C                                             l5199 0CC8  
                                           l4681 08F4                                             l4665 0890  
                                           l4673 08C4                                             l4593 064A  
                                           l4569 05E8                                             l4497 03EE  
                                           l4489 03B0                                             l4825 1696  
                                           l4691 0950                                             l4667 089A  
                                           l4587 0636                                             l4579 0604  
                                           l4763 1480                                             l4907 1380  
                                           l4755 1590                                             l4843 13F8  
                                           l4677 08D6                                             l4669 08A6  
                                           l4597 0674                                             l4589 063C  
                                           l4909 1386                                             l4941 0E60  
                                           l4933 0E28                                             l4829 16A8  
                                           l4749 156E                                             l4687 0922  
                                           l4783 14D4                                             l4775 14B4  
                                           l4791 14F4                                             l4935 0E38  
                                           l4927 0E14                                             l4769 149A  
                                           l4929 0E1C                                             l4857 144C  
                                           l4699 098C                                             l4877 16DE  
                                           l4991 0F66                                             l4975 0F16  
                                           l4897 1338                                             l4993 0F72  
                                           STR_1 1F2A                                             STR_2 1DDB  
                                           STR_3 1DC0                                             STR_4 1D88  
                                           STR_5 1CD0                                             STR_6 1F70  
                                           STR_7 1E56                                             STR_8 1FF7  
                                           STR_9 1E56                                             _LATA 000F89  
                                           _LATB 000F8A                                             _LATC 000F8B  
                                           u4100 07BC                                             u4400 1410  
                                           u4251 0974                                             u3605 17FA  
                                           u3606 17FC                                             u4440 16E6  
                                           _PEIE 007F96                                             u4446 16E8  
                                           u1895 19E6                                             u1896 19E8  
                                           _RCIE 007CED                                             _RCIF 007CF5  
                                           u4725 1864                                             u4726 1866  
                                           u4735 1870                                             u4736 1872  
                                           u4745 187A                                             u4746 187C  
                                           u4755 1886                                             u4835 0C32  
                                           u4756 1888                                             u4836 0C34  
                                           u4765 1890                                             u4845 0C3E  
                                           u4766 1892                                             u4950 0CDC  
                                           u4846 0C40                                             u4960 0CF0  
                                           u4958 0CDE                                             u4968 0CF2  
                                           _RCON 000FD0                                     __CFG_WDTPS$8 000000  
                                           _WPUB 000F61                                             _main 0B28  
                                           _tmpI 00BE                                             fsr0h 000FEA  
                                           fsr1h 000FE2                                             fsr0l 000FE9  
                                           fsr2h 000FDA                                             indf1 000FE7  
                                           _stat 0033                                             fsr1l 000FE1  
                                           indf2 000FDF                                             fsr2l 000FD9  
                                  __CFG_BORV$190 000000                                             pclat 000FFA  
                                           prodh 000FF4                                             prodl 000FF3  
                                           start 01CA                                    __CFG_IESO$OFF 000000  
                        __end_of_display_voltage 1B4C                                  __end_of_DelayMs 1AEC  
                            _second_sample_count 00E7                                     ___param_bank 000010  
                          load_int_from_eeprom@a 0015                              _eeprom_data_refresh 0F7A  
                                          ??_ISR 0001                         _min_bat_voltage_for_test 00A2  
                                _normal_charging 00E3                                     _BAUDCON1bits 000FB8  
                                  _main_led_stat 0043                          _lrn_sw_presed_on_remote 00E1  
                      __size_of_Charging_handler 00A0                          ?_long_test_stat_hendler 0001  
                                          ?_main 0001                                            _EEADR 000FA9  
                                          STR_10 1FEA                                            STR_11 1E27  
                                          STR_20 1EC4                                            STR_12 1E82  
                                          STR_21 1EEF                                            STR_13 1D11  
                                          STR_22 1FCE                                            STR_14 1F17  
                                          STR_30 1CAE                                            STR_23 1F5F  
                                          STR_31 1DA4                                            STR_15 1BDF  
                                          STR_32 1CC6                                            STR_16 1FBF  
                                          STR_24 1F80                                            STR_40 1C19  
                                          STR_17 1EDA                                            STR_25 1E6C  
                                          STR_33 1D6B                                            STR_41 1D4E  
                                          STR_34 1FB0                                            STR_18 1F90  
                                          STR_26 1DF6                                            STR_42 1C8B  
                                          STR_43 1F04                                            STR_27 1EAE  
                                          STR_35 1E0F                                            STR_19 1C66  
                                          STR_44 1FDD                                            STR_28 1E3F  
                                          STR_36 1C41                                            STR_29 1FA0  
                                          STR_45 1F3D                                            STR_37 1CF1  
                                          STR_46 1F4E                                            STR_38 1D30  
                                          STR_39 1E98                                            _CREN1 007D5C  
                                          _FERR1 007D5A                                            _T1CON 000FCD  
                                          _RC1IE 007CED                                            _RC1IF 007CF5  
                                          _INT1F 007F80                                  __end_of___lwdiv 185A  
                                __end_of___lwmod 18FE                                            i2l141 00DC  
                                          i2l150 0190                                    __CFG_WDTEN$ON 000000  
                                          _OERR1 007D59                                            _RCREG 000FAE  
                                          _RCSTA 000FAB                                            _SPEN1 007D5F  
                                          _TMR1H 000FCF                                            _TMR1L 000FCE  
                                          _SPBRG 000FAF                                            _TRISA 000F92  
                                          _TRISB 000F93                                            _TRMT1 007D61  
                                          _TRISC 000F94                                            _TXREG 000FAD  
                                          _TXSTA 000FAC                                    __CFG_WRT0$OFF 000000  
                                  __CFG_WRT1$OFF 000000                                _test_stat_hendler 16B6  
                       ?_short_test_stat_hendler 0001                                   __CFG_EBTR0$OFF 000000  
                                 __CFG_FCMEN$OFF 000000                                   __CFG_EBTR1$OFF 000000  
                                          _nRBPU 007F8F                                    __CFG_WRTB$OFF 000000  
                                  __CFG_WRTC$OFF 000000                                    __CFG_WRTD$OFF 000000  
                                 Read_b_eep@badd 0010                                  __end_of_readA2D 1634  
                                   ?_init_system 0001                                   __CFG_EBTRB$OFF 000000  
                           ?_eeprom_data_refresh 0001                               ?_test_stat_hendler 0001  
                                __end_of_dpowers 1BD7                           Write_b_eep@GIE_BIT_VAL 0013  
                          _ORANGE_LED_10mS_Timer 007E                                            _dummy 00DA  
                                __end_of_isdigit 1B0E                                            _tempa 00B6  
                                __end_of_buzz_on 17FE                               __CFG_MCLRE$EXTMCLR 000000  
                                          _putch 1B78                                       _Count_100m 0038  
                             _sleep_stat_hendler 0DEA                                       _Count_500m 003E  
                             _led_on_bat_voltage 009C                                   __pbitbssCOMRAM 0250  
                                          tablat 000FF5                                       _Count_1min 003D  
                                          status 000FD8                              ??_test_stat_hendler 0026  
                                 __CFG_HFOFST$ON 000000                              ?_sleep_stat_hendler 0001  
          _total_min_bat_voltage_normal_cahrging 00C8                  _min_bat_voltage_normal_cahrging 00A4  
                                __initialization 1A24                                     __end_of_main 0DEA  
                                     _Read_b_eep 1B64                                 __end_of_Busy_eep 1B8E  
                 __end_of_long_test_stat_hendler 11FE                                 _exit_sleep_count 0092  
                               _exit_sleep_press 00EB                                           ??_main 0028  
                      __end_of_test_stat_hendler 172E                                    __activetblptr 000002  
                           ??_sleep_stat_hendler 0026                                   __CFG_PLLCFG$ON 000000  
                                   putch@tx_byte 0010                                     readA2D@_dcnt 0015  
                                _long_press_time 009E                            ??_eeprom_data_refresh 0018  
                                         _ADCON0 000FC2                                           _ADCON1 000FC1  
                                         _ADCON2 000FC0                                           _ADRESH 000FC4  
                                         _ADRESL 000FC3                                           _EEDATA 000FA8  
                                         _EECON2 000FA7                                           _ANSELA 000F38  
                                         ?_putch 0001                                           _ANSELB 000F39  
                                         _ANSELC 000F3A                                           _GODONE 007E11  
                                         i2l4131 0178                                           i2l4133 017E  
                                         i2l4125 0166                                           i2l4109 00F0  
                                         i2l4061 0086                                           i2l4119 012A  
                                         i2l4135 0184                                           i2l4129 0174  
                                         i2l4137 0188                                           i2l4077 00A4  
                                         i2l4099 00CE                                        ??_DelayMs 0010  
                                         _RCREG1 000FAE                                           _CLearn 0078  
                                         _OSCCON 000FD3                                           _TMR1IE 007CE8  
                                         _TMR1IF 007CF0                                           _FLearn 00D3  
                                         _TRISA1 007C91                                           _TRISC0 007CA0  
                                         _TRISC6 007CA6                                           _TRISC7 007CA7  
                               ?_display_voltage 0001                                   __CFG_PWRTEN$ON 000000  
                                 __CFG_XINST$OFF 000000                                           ___wmul 1A7E  
                                      ??___lwdiv 0014                                        ??___lwmod 001B  
                        __size_of_output_hendler 0058                                _stby_stat_hendler 1634  
                          __end_of_blink_RED_LED 1A7E                                           clear_0 1A2A  
                                         clear_1 1A36                                           clear_2 1A44  
                               __end_of_buzz_off 1ACA                                   _send_data_flag 0250  
                                         _printf 01CE                                      _Count_1000m 0037  
                             ?_stby_stat_hendler 0001                                      _Count_10Sec 0039  
                                      ??_readA2D 0012                                      _Count_10min 003B  
                                      ??_isdigit 0010                                        ??_buzz_on 0016  
                                   __mediumconst 1BC0                                      _Count_1hour 003C  
                                         tblptrh 000FF7                                           tblptrl 000FF6  
                                         tblptru 000FF8                              ??_stby_stat_hendler 0026  
                                     __accesstop 0060                          __end_of__initialization 1A4A  
                                __CFG_PBADEN$OFF 000000                                    ___rparam_used 000001  
                  __size_of_load_int_from_eeprom 0040                                   __pcstackCOMRAM 0001  
                      __end_of_stby_stat_hendler 16B6                                   blink_RED_LED@i 0016  
                              _work_stat_hendler 13C4                                      ?_Read_b_eep 0010  
                                  __end_of_putch 1B86                          load_int_from_eeprom@add 0017  
                             ?_work_stat_hendler 0001                                  _activate_buzzer 1B0E  
                               _Charging_handler 1472                       __size_of_test_stat_hendler 0078  
                       _saved_error_buzzer_count 00AA                               _error_stat_hendler 1310  
                            ??_work_stat_hendler 0026                                  buzz_on@duration 0016  
                                   _batt_voltage 008E                                          ??_putch 0010  
                            _enable_sending_data 00DB                                       __pbssBANK0 0060  
                                     __pbssBANK1 0115                             __size_of_init_system 006E  
                            ?_error_stat_hendler 0001                             _previous_charge_stat 00A6  
                                buzz_on@temp_GIE 0017                                        ?_Busy_eep 0001  
                     __end_of_save_int_to_eeprom 19B2                          _number_of_recived_bytes 0044  
                                _trickl_charging 00E9                               __CFG_CCP2MX$PORTC1 000000  
                      __end_of_work_stat_hendler 1472                                          ?___wmul 0010  
                             __CFG_CCP3MX$PORTB5 000000                             ??_error_stat_hendler 0026  
                                  ??_Write_b_eep 0013                                          ?_printf 001C  
                              _batt_full_voltage 008C                              _test_led_time_count 00B8  
                                        _GO_DONE 007E11                                          _CTLearn 007A  
                            __size_of_Read_b_eep 0014                                          _DelayMs 1ACA  
                                     ??_Busy_eep 0010                                        ?_buzz_off 0001  
                          _previous_trickle_stat 00A8                 __size_of_short_test_stat_hendler 0112  
                                        __Hparam 0000                                          __Lparam 0000  
                                     _init_USART 1B4C                          __end_of_activate_buzzer 1B2E  
                     __size_of_stby_stat_hendler 0082                                  __size_of___wmul 0028  
                                 _output_hendler 185A                                          ___lwdiv 17FE  
                                        ___lwmod 18B2                                  __CFG_STVREN$OFF 000000  
                                        __pcinit 1A24                                          __ramtop 0200  
                            _led_off_bat_voltage 009A                                          __ptext0 0B28  
                                        __ptext1 13C4                                          __ptext2 1512  
                                        __ptext3 16B6                                          __ptext4 1634  
                                        __ptext5 0DEA                                          __ptext6 15A8  
                                        __ptext7 172E                                          __ptext8 1B4C  
                                        __ptext9 19EC                                  __size_of_printf 095A  
                                        _readA2D 15A8                                _eeprom_time_delay 193E  
                                   __size_of_ISR 01C2                                __end_of_hexpowers 1BDF  
                                        _dpowers 1BCD                                          _isdigit 1AEC  
                                        _red_led 0045                                          _buzz_on 179C  
                             ?_eeprom_time_delay 0018                              __end_of_Write_b_eep 19EC  
                                        _unit_ID 00CC                         _total_led_on_bat_voltage 00C6  
                                        _sw_stat 0049                             end_of_initialization 1A4A  
                              __end_of_octpowers 1BCD                              ??_eeprom_time_delay 001A  
                               __CFG_BOREN$NOSLP 000000                                    __Lmediumconst 1BC0  
                                     _vbat_check 1512                                     _Learn_Window 00D4  
                                     ??_buzz_off 0010                          _grid_power_high_voltage 0096  
                     __size_of_work_stat_hendler 00AE                           __end_of_output_hendler 18B2  
                                        printf@c 0112                                          printf@f 001C  
                                        postdec2 000FDD                                          postinc0 000FEE  
                                        postinc2 000FDE                        __end_of_eeprom_time_delay 1978  
                             _analog_delay_count 0040                                        _PORTBbits 000F81  
                    __end_of_eeprom_data_refresh 10D6                      __size_of_sleep_stat_hendler 0190  
                                     _power_stat 00E5                                    _Vin_ADC_accum 0084  
        blink_GREEN_LED_and_RED_LED_and_BUZZER@i 0022                                        _WDT_cnter 0086  
                                     _rx_pointer 0046                                       _rx_timeout 00E6  
                       __end_of_Charging_handler 1512                          _total_batt_full_voltage 00C2  
                               _num_of_bat_cells 002F                                      printf@width 0110  
                               buzz_on@_dcnt_864 0019                       _start_analog_sequence_flag 0047  
                                    _Switch_stat 003F                                     buzz_on@_dcnt 0018  
                                    ?_init_USART 0001                                  ?_output_hendler 0001  
                            _long_time_test_pass 00A0                                 ?_activate_buzzer 001C  
                                   ??_Read_b_eep 0012                                _time_to_pass_test 00BC  
                            _shorted_bat_voltage 00B2                                   __end_of___wmul 1AA6  
                       __size_of_display_voltage 001E                                      _Write_b_eep 19B2  
                                   DelayMs@_dcnt 0012                                        _Count_10m 003A  
                                 __end_of_printf 0B28                           _bat_is_shorted_voltage 008A  
                           _GREEN_LED_10mS_Timer 007C                     __end_of_load_int_from_eeprom 193E  
                            start_initialization 1A24                             _GRID_Voltage_ADC_val 0029  
                                    __end_of_ISR 01CA                               _last_main_led_stat 00E0  
                                      _BuzzTimer 00D2                               _Vbat_ADC_val_accum 0082  
                             _RED_LED_10mS_Timer 0080                                    _charging_stat 00D8  
                             __end_of_Read_b_eep 1B78                           __size_of_blink_RED_LED 002A  
                                    ?_vbat_check 0001                          _short_test_stat_hendler 11FE  
                                _test_faild_flag 00ED                                __size_of_Busy_eep 0008  
                       ??_long_test_stat_hendler 0026                                         ??___wmul 0014  
                                 _week_in_houres 00CE                                 buzz_off@duration 0010  
                             _save_int_to_eeprom 1978                       __size_of_eeprom_time_delay 003A  
                                       ??_printf 0022                               _solar_cell_voltage 00B4  
 __end_of_blink_GREEN_LED_and_RED_LED_and_BUZZER 1A24  __size_of_blink_GREEN_LED_and_RED_LED_and_BUZZER 0038  
       ??_blink_GREEN_LED_and_RED_LED_and_BUZZER 0021          ?_blink_GREEN_LED_and_RED_LED_and_BUZZER 001F  
         _blink_GREEN_LED_and_RED_LED_and_BUZZER 19EC                                        _Sync_Last 00D5  
                                    __pbssCOMRAM 0029                             _short_time_test_pass 00B0  
                            ?_save_int_to_eeprom 0014                                    __pcstackBANK1 0100  
                                  ??_init_system 0010                                     _last_sw_stat 0042  
                                   _isdigit$2006 0011                              __size_of_init_USART 0018  
                               readA2D@_dcnt_180 0016                                  _working_timeout 0074  
                                       ?_DelayMs 0001                                        __pnvBANK0 00EB  
                                      _data_buff 0115                        _total_led_off_bat_voltage 00C4  
                           ??_save_int_to_eeprom 0016                                        _batt_stat 0041  
                               ___lwdiv@dividend 0010                                     _Vbat_ADC_val 002B  
                              __size_of_buzz_off 0024                                   readA2D@channel 0014  
                    activate_buzzer@Off_duration 001D                                        __pintcode 0008  
                                  __pmediumconst 1BC0                            _eraze_transmiters_cnt 00DC  
                                       ?___lwdiv 0010                            eeprom_time_delay@temp 001C  
                                       ?___lwmod 0017                      __size_of_error_stat_hendler 00B4  
                            blink_RED_LED@blinks 0015                                    _blink_RED_LED 1A54  
                               __CFG_PRICLKEN$ON 000000                              blink_RED_LED@timeMs 0013  
                                       ?_readA2D 0010                              __size_of_vbat_check 0096  
                                       ?_isdigit 0001                                         ?_buzz_on 0001  
                                      _green_led 00DE                                ??_display_voltage 0026  
                                      _hexpowers 1BD7                          eeprom_time_delay@houres 0018  
                               ___lwdiv@quotient 0015                                   __size_of_putch 000E  
                      ??_short_test_stat_hendler 0026                              __end_of_init_system 179C  
                                 ___wmul@product 0014                                         _LATAbits 000F89  
                                       _LATBbits 000F8A                                         _LATCbits 000F8B  
                                       DelayMs@i 0011                                        _octpowers 1BC1  
                                   _hour_counter 0098                  __size_of_long_test_stat_hendler 0128  
                           _load_int_from_eeprom 18FE                                readA2D@A2D_Result 0018  
                                 ?_blink_RED_LED 0013                                  _test_time_count 0035  
                                      _year_time 00D0                                        _rx_buufer 0060  
                                     _ADCON1bits 000FC1                                ___wmul@multiplier 0010  
                                Write_b_eep@badd 0010                                  Write_b_eep@bdat 0012  
                                     printf@flag 0113                                        _unit_type 00EA  
                                     printf@prec 010F                             _short_press_time_max 00AC  
                           _short_press_time_min 00AE                _total_bat_is_disconnected_voltage 00C0  
                           activate_buzzer@beeps 001E                             buzz_on@calc_duration 001A  
                                       _Busy_eep 1B86                                 __size_of_DelayMs 0022  
                               ??_output_hendler 001F                                ?_Charging_handler 0001  
                               _power_fail_count 00E4                        _total_shorted_bat_voltage 00CA  
                                    _msec100buzz 00E2                                       _EECON1bits 000FA6  
                                       __Hrparam 0000                            ?_load_int_from_eeprom 0012  
                             ??_Charging_handler 0026                                     ??_init_USART 0010  
                                       __Lrparam 0000                           globals@test_faild_flag 00EF  
                              __CFG_P2BMX$PORTB5 000000                  __end_of_short_test_stat_hendler 1310  
                               __size_of___lwdiv 005C                                 __size_of___lwmod 004C  
                     __end_of_sleep_stat_hendler 0F7A                                     ?_Write_b_eep 0010  
                               __size_of_readA2D 008C                           _long_test_stat_hendler 10D6  
                               __size_of_isdigit 0022                                 __size_of_buzz_on 0062  
                                ___lwdiv@divisor 0012                                  ___lwdiv@counter 0014  
                                       __ptext10 11FE                                         __ptext11 185A  
                                       __ptext20 1B0E                                         __ptext12 10D6  
                                       __ptext21 179C                                         __ptext13 193E  
                                       __ptext30 1AEC                                         __ptext22 1AA6  
                                       __ptext14 1978                                         __ptext31 1A7E  
                                       __ptext23 0F7A                                         __ptext15 19B2  
                                       __ptext32 18B2                                         __ptext24 18FE  
                                       __ptext16 1B86                                         __ptext33 17FE  
                                       __ptext25 1B64                                         __ptext17 1310  
                                       __ptext26 1B2E                                         __ptext18 1A54  
                                       __ptext27 1472                                         __ptext19 1ACA  
                                       __ptext28 01CE                                         __ptext29 1B78  
                                    _init_system 172E                     __size_of_eeprom_data_refresh 015C  
                             __end_of_init_USART 1B64                             _curent_save_position 00D9  
                                   ??_vbat_check 0026                                    __size_of_main 02C2  
                                       _buzz_off 1AA6                                  ??_blink_RED_LED 0015  
                                      printf@idx 0100                                        printf@len 0109  
                                      printf@val 010D                                         readA2D@i 0017  
                                     DelayMs@cnt 0010                         __size_of_activate_buzzer 0020  
                             __end_of_vbat_check 15A8                                       _INTCONbits 000FF2  
                     activate_buzzer@On_duration 001C                                       _FVRCONbits 000F42  
                                       isdigit@c 0012                                         intlevel2 0000  
                           _analog_samples_count 00D7                                 ___lwmod@dividend 0017  
                         _grid_power_low_voltage 002D                           ??_load_int_from_eeprom 0014  
                            _start_sampling_flag 0048                                         printf@ap 010B  
                                       printf@cp 0101                           save_int_to_eeprom@data 0014  
                                _display_voltage 1B2E                                    _test_sw_count 00BA  
                                    _printf$1571 0107                                      _printf$1564 0103  
                                    _printf$1565 0105                                  ___lwmod@divisor 0019  
                                ___lwmod@counter 001B                                __CFG_T3CMX$PORTC0 000000  
                          save_int_to_eeprom@add 0016                      _bat_is_disconnected_voltage 0088  
                              __CFG_FOSC$INTIO67 000000                                  _blink_sec_count 0090  
                             _error_buzzer_count 00DD                      __size_of_save_int_to_eeprom 003A  
